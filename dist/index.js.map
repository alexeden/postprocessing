{"version":3,"sources":["webpack://postprocessing/webpack/universalModuleDefinition","webpack://postprocessing/webpack/bootstrap","webpack://postprocessing/./passes/Pass.ts","webpack://postprocessing/external \"three\"","webpack://postprocessing/./passes/lib/index.ts","webpack://postprocessing/./materials/index.ts","webpack://postprocessing/./effects/index.ts","webpack://postprocessing/./passes/index.ts","webpack://postprocessing/./passes/ClearPass.ts","webpack://postprocessing/./effects/blending/index.ts","webpack://postprocessing/./effects/blending/BlendFunction.ts","webpack://postprocessing/./effects/lib/index.ts","webpack://postprocessing/./materials/lib/index.ts","webpack://postprocessing/./passes/utils/FindSubstringsUtil.ts","webpack://postprocessing/./passes/utils/PrefixSubstringsUtils.ts","webpack://postprocessing/./index.ts","webpack://postprocessing/./core/index.ts","webpack://postprocessing/./core/EffectComposer.ts","webpack://postprocessing/./passes/ClearMaskPass.ts","webpack://postprocessing/./passes/lib/PassName.ts","webpack://postprocessing/./passes/EffectPass.ts","webpack://postprocessing/./effects/blending/BlendMode.ts","webpack://postprocessing/./effects/blending/glsl/add/shader.frag","webpack://postprocessing/./effects/blending/glsl/alpha/shader.frag","webpack://postprocessing/./effects/blending/glsl/average/shader.frag","webpack://postprocessing/./effects/blending/glsl/color-burn/shader.frag","webpack://postprocessing/./effects/blending/glsl/color-dodge/shader.frag","webpack://postprocessing/./effects/blending/glsl/darken/shader.frag","webpack://postprocessing/./effects/blending/glsl/difference/shader.frag","webpack://postprocessing/./effects/blending/glsl/exclusion/shader.frag","webpack://postprocessing/./effects/blending/glsl/lighten/shader.frag","webpack://postprocessing/./effects/blending/glsl/multiply/shader.frag","webpack://postprocessing/./effects/blending/glsl/divide/shader.frag","webpack://postprocessing/./effects/blending/glsl/negation/shader.frag","webpack://postprocessing/./effects/blending/glsl/normal/shader.frag","webpack://postprocessing/./effects/blending/glsl/overlay/shader.frag","webpack://postprocessing/./effects/blending/glsl/reflect/shader.frag","webpack://postprocessing/./effects/blending/glsl/screen/shader.frag","webpack://postprocessing/./effects/blending/glsl/soft-light/shader.frag","webpack://postprocessing/./effects/blending/glsl/subtract/shader.frag","webpack://postprocessing/./effects/lib/effects.types.ts","webpack://postprocessing/./effects/Effect.ts","webpack://postprocessing/./materials/lib/Section.ts","webpack://postprocessing/./materials/CopyMaterial.ts","webpack://postprocessing/./materials/glsl/copy/shader.frag","webpack://postprocessing/./materials/glsl/common/shader.vert","webpack://postprocessing/./materials/EffectMaterial.ts","webpack://postprocessing/./materials/glsl/effect/shader.frag","webpack://postprocessing/./materials/glsl/effect/shader.vert","webpack://postprocessing/./passes/utils/index.ts","webpack://postprocessing/./passes/utils/IntegrateEffectUtil.ts","webpack://postprocessing/./passes/MaskPass.ts","webpack://postprocessing/./passes/RenderPass.ts","webpack://postprocessing/./passes/ShaderPass.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","three_1","Pass","scene","arguments","length","undefined","Scene","camera","OrthographicCamera","_classCallCheck","this","uniform","quad","needsSwap","needsDepthTexture","renderToScreen","enabled","material","Array","isArray","type","getFullscreenMaterials","filter","mat","Mesh","PlaneBufferGeometry","frustumCulled","add","depthTexture","width","height","renderer","alpha","_this","forEach","dispose","keys","map","prop","_typeof","PassName_1","PassName","__export","CopyMaterial_1","CopyMaterial","EffectMaterial_1","EffectMaterial","Effect_1","Effect","ClearMaskPass_1","ClearMaskPass","ClearPass_1","ClearPass","EffectPass_1","EffectPass","MaskPass_1","MaskPass","Pass_1","RenderPass_1","RenderPass","ShaderPass_1","ShaderPass","lib_1","partialOptions","_possibleConstructorReturn","_getPrototypeOf","Clear","options","_objectSpread","clearAlpha","clearColor","inputBuffer","color","copy","getClearColor","getClearAlpha","setClearColor","setRenderTarget","clear","Color","BlendFunction_1","BlendFunction","BlendMode_1","BlendMode","Section_1","Section","findSubstrings","regExp","str","result","substrings","exec","push","prefixSubstrings","prefix","strings","prefixed","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","substring","charAt","toUpperCase","slice","RegExp","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","entries","entry","set","replace","err","return","EffectComposer_1","EffectComposer","passes_1","materials_1","outputBuffer","copyPass","passes","depthBuffer","stencilBuffer","autoClear","createBuffer","clone","parent","oldSize","newSize","oldRenderer","domElement","parentNode","getSize","removeChild","appendChild","setSize","index","pass","DepthTexture","format","DepthStencilFormat","UnsignedInt248Type","drawingBufferSize","getDrawingBufferSize","context","getContextAttributes","renderTarget","WebGLRenderTarget","minFilter","LinearFilter","magFilter","RGBAFormat","RGBFormat","texture","generateMipmaps","initialize","splice","createDepthTexture","setDepthTexture","getDepthTexture","indexOf","delta","state","buffer","stencilTest","render","buffers","stencil","setFunc","NOTEQUAL","EQUAL","size","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","ClearMask","setTest","effects_1","utils_1","mainCamera","skipRendering","quantize","uniforms","varyings","minTime","maxTime","_len","effects","_key","sort","a","b","attributes","setFullscreenMaterial","createMaterial","blendRegExp","shaderParts","Map","FRAGMENT_HEAD","FRAGMENT_MAIN_UV","FRAGMENT_MAIN_IMAGE","VERTEX_HEAD","VERTEX_MAIN_SUPPORT","blendModes","defines","extensions","Set","id","transformedUv","readDepth","effect","blendMode","blendFunction","SKIP","EffectAttribute","CONVOLUTION","console","error","integrateEffect","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","extension","values","concat","getShaderCode","DEPTH","trim","dithering","_this2","depthPacking","resolution","x","y","newMaterial","materials","getFullscreenMaterialsOfType","needsUpdate","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_this3","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","update","time","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","capabilities","max","Math","min","maxFragmentUniforms","maxVertexUniforms","warn","maxVaryings","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_get","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","__importDefault","mod","default","shader_frag_1","shader_frag_2","shader_frag_3","shader_frag_4","shader_frag_5","shader_frag_6","shader_frag_7","shader_frag_8","shader_frag_9","shader_frag_10","shader_frag_11","shader_frag_12","shader_frag_13","shader_frag_14","shader_frag_15","shader_frag_16","shader_frag_17","shader_frag_18","opacity","Uniform","ADD","ALPHA","AVERAGE","COLOR_BURN","COLOR_DODGE","DARKEN","DIFFERENCE","EXCLUSION","LIGHTEN","MULTIPLY","DIVIDE","NEGATION","NORMAL","OVERLAY","REFLECT","SCREEN","SOFT_LIGHT","SUBTRACT","EffectName","WebGLExtension","blending_1","fragmentShader","vertexShader","settings","NONE","_arr","_i","shader_vert_1","depthWrite","depthTest","ShaderMaterial","DEPTH_PACKING","Vector2","texelSize","cameraNear","cameraFar","aspect","adoptCameraSettings","PerspectiveCamera","near","far","PERSPECTIVE_CAMERA","Number","parseInt","toFixed","FindSubstringsUtil_1","IntegrateEffectUtil_1","PrefixSubstringsUtils_1","functionRegExp","shaders","mainImageExists","includes","mainUvExists","names","from","blendOpacity","Mask","inverse","clearStencil","writeValue","clearValue","setMask","depth","setLocked","setOp","REPLACE","ALWAYS","setClear","KEEP","Render","overrideMaterial","clearDepth","clearPass","input","Shader","setInput"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,UACA,mBAAAC,eAAAC,IACAD,OAAA,UAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,UAEAJ,EAAA,eAAAC,EAAAD,EAAA,OARA,CASCO,OAAA,SAAAC,GACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAT,QAGA,IAAAC,EAAAM,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAX,QAAA,IAUA,OANAY,EAAAH,GAAAI,KAAAZ,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAU,GAAA,EAGAV,EAAAD,QA0DA,OArDAQ,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAhB,EAAAiB,EAAAC,GACAV,EAAAW,EAAAnB,EAAAiB,IACAG,OAAAC,eAAArB,EAAAiB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAxB,GACA,oBAAAyB,eAAAC,aACAN,OAAAC,eAAArB,EAAAyB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAArB,EAAA,cAAiD2B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAlC,GACA,IAAAiB,EAAAjB,KAAA6B,WACA,WAA2B,OAAA7B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAO,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,8aCjFArB,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAMe,EAAUxC,EAAQ,GAOlByC,aAQF,SAAAA,EAAY1B,GAAgG,IAA1F2B,EAA0FC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlF,IAAIH,EAAQM,MAASC,EAA6DJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApD,IAAIH,EAAQQ,oBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,gGAAIC,CAAAC,KAAAT,GACxGS,KAAKnC,KAAOA,EACZmC,KAAKR,MAAQA,EACbQ,KAAKH,OAASA,EAEdG,KAAKC,QAAU,KAIfD,KAAKE,KAAO,KAQZF,KAAKG,WAAY,EAQjBH,KAAKI,mBAAoB,EAIzBJ,KAAKK,gBAAiB,EAItBL,KAAKM,SAAU,yEAQf,OAAsB,OAAdN,KAAKE,KAAiBF,KAAKE,KAAKK,SAAW,sDAQnD,OAAqB,OAAdP,KAAKE,KACN,GACAM,MAAMC,QAAQT,KAAKE,KAAKK,UACpBP,KAAKE,KAAKK,SACV,CAACP,KAAKE,KAAKK,+DAOIG,GACzB,OAAOV,KAAKW,yBACPC,OAAO,SAACC,GAAD,OAASA,aAAeH,kDAUlBH,GAClB,GAAkB,OAAdP,KAAKE,KACLF,KAAKE,KAAKK,SAAWA,MAEpB,CACD,IAAML,EAAO,IAAIZ,EAAQwB,KAAK,IAAIxB,EAAQyB,oBAAoB,EAAG,GAAIR,GACrEL,EAAKc,eAAgB,EACF,OAAfhB,KAAKR,QACLQ,KAAKR,MAAMyB,IAAIf,GACfF,KAAKE,KAAOA,8CAUpB,OAAO,6CAWKgB,GAAgCzB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,mCAcxC0B,EAAOC,uCAkBJC,EAAUC,sCAcX,IAAAC,EAAAvB,KACNA,KAAKW,yBAAyBa,QAAQ,SAAAjB,GAAQ,OAAIA,EAASkB,YAI3DzD,OAAO0D,KAAK1B,MACP2B,IAAI,SAAAC,GAAI,OAAIL,EAAKK,KACjBhB,OAAO,SAACrC,GAAD,OAAqB,OAAVA,GACC,WAAjBsD,EAAOtD,IACkB,mBAAlBA,EAAMkD,UACfD,QAAQ,SAAAjD,GAAK,OAAIA,EAAMkD,iDAGpC7E,EAAQ2C,KAAOA,iBClLf1C,EAAAD,QAAAM,gCCCAc,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAIuD,EAAahF,EAAQ,IACzBF,EAAQmF,SAAWD,EAAWC,uCCC9B/D,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IAHtD,SAAkBb,GACd,IAAK,IAAI0B,KAAK1B,EAAQd,EAAQuC,eAAeC,KAAIxC,EAAQwC,GAAK1B,EAAE0B,IAGpE4C,CAASlF,EAAQ,KAIjB,IAAMmF,EAAiBnF,EAAQ,IAC/BF,EAAQsF,aAAeD,EAAeC,aAEtC,IAAMC,EAAmBrF,EAAQ,IACjCF,EAAQwF,eAAiBD,EAAiBC,6CCZ1C,SAASJ,EAAStE,GACd,IAAK,IAAI0B,KAAK1B,EAAQd,EAAQuC,eAAeC,KAAIxC,EAAQwC,GAAK1B,EAAE0B,IAEpEpB,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtDyD,EAASlF,EAAQ,IACjBkF,EAASlF,EAAQ,IAQjB,IAAIuF,EAAWvF,EAAQ,IACvBF,EAAQ0F,OAASD,EAASC,qCCd1BtE,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IAEtD,IAAIgE,EAAkBzF,EAAQ,IAC9BF,EAAQ4F,cAAgBD,EAAgBC,cACxC,IAAIC,EAAc3F,EAAQ,GAC1BF,EAAQ8F,UAAYD,EAAYC,UAEhC,IAAIC,EAAe7F,EAAQ,IAC3BF,EAAQgG,WAAaD,EAAaC,WAClC,IAAIC,EAAa/F,EAAQ,IACzBF,EAAQkG,SAAWD,EAAWC,SAE9B,IAAIC,EAASjG,EAAQ,GACrBF,EAAQ2C,KAAOwD,EAAOxD,KACtB,IAAIyD,EAAelG,EAAQ,IAC3BF,EAAQqG,WAAaD,EAAaC,WAElC,IAAIC,EAAepG,EAAQ,IAC3BF,EAAQuG,WAAaD,EAAaC,w8BClBlCnF,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAMe,EAAUxC,EAAQ,GAClBiG,EAASjG,EAAQ,GACjBsG,EAAQtG,EAAQ,GAQhB4F,cAKF,SAAAA,IAAiC,IAAAnB,EAArB8B,EAAqB5D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,gGAAIM,CAAAC,KAAA0C,GAC7BnB,EAAA+B,EAAAtD,KAAAuD,EAAAb,GAAAjF,KAAAuC,KAAMoD,EAAMrB,SAASyB,QACrB,IAAMC,oUAAOC,CAAA,CACTC,WAAY,EACZC,WAAY,MACTP,GALsB,OAO7B9B,EAAKpB,WAAY,EACjBoB,EAAKqC,WAAaH,EAAQG,WAC1BrC,EAAKoC,WAAaF,EAAQE,WATGpC,wPALbwB,EAAOxD,2CAsBpB8B,EAAUwC,GACb,IACIF,EADEC,EAAa5D,KAAK4D,WAEL,OAAfA,IACAlB,EAAUoB,MAAMC,KAAK1C,EAAS2C,iBAC9BL,EAAatC,EAAS4C,gBACtB5C,EAAS6C,cAAcN,EAAY5D,KAAK2D,aAE5CtC,EAAS8C,gBAAgBnE,KAAKK,oBAAiBV,EAAYkE,GAC3DxC,EAAS+C,QACU,OAAfR,GACAvC,EAAS6C,cAAcxB,EAAUoB,MAAOH,wCAKpDjB,EAAUoB,MAAQ,IAAIxE,EAAQ+E,MAC9BzH,EAAQ8F,UAAYA,gCClDpB1E,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAI+F,EAAkBxH,EAAQ,GAC9BF,EAAQ2H,cAAgBD,EAAgBC,cACxC,IAAIC,EAAc1H,EAAQ,IAC1BF,EAAQ6H,UAAYD,EAAYC,wCCJhCzG,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IAKtD,SAAWgG,GAEPA,EAAcA,EAAa,KAAW,GAAK,OAE3CA,EAAcA,EAAa,IAAU,GAAK,MAE1CA,EAAcA,EAAa,MAAY,GAAK,QAE5CA,EAAcA,EAAa,QAAc,GAAK,UAE9CA,EAAcA,EAAa,WAAiB,GAAK,aAEjDA,EAAcA,EAAa,YAAkB,GAAK,cAElDA,EAAcA,EAAa,OAAa,GAAK,SAE7CA,EAAcA,EAAa,WAAiB,GAAK,aAEjDA,EAAcA,EAAa,UAAgB,GAAK,YAEhDA,EAAcA,EAAa,QAAc,GAAK,UAE9CA,EAAcA,EAAa,SAAe,IAAM,WAEhDA,EAAcA,EAAa,OAAa,IAAM,SAE9CA,EAAcA,EAAa,SAAe,IAAM,WAEhDA,EAAcA,EAAa,OAAa,IAAM,SAE9CA,EAAcA,EAAa,QAAc,IAAM,UAE/CA,EAAcA,EAAa,QAAc,IAAM,UAE/CA,EAAcA,EAAa,OAAa,IAAM,SAE9CA,EAAcA,EAAa,WAAiB,IAAM,aAElDA,EAAcA,EAAa,SAAe,IAAM,WAtCpD,CAuCmB3H,EAAQ2H,gBAAkB3H,EAAQ2H,cAAgB,mCCzCrEvG,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IAHtD,SAAkBb,GACd,IAAK,IAAI0B,KAAK1B,EAAQd,EAAQuC,eAAeC,KAAIxC,EAAQwC,GAAK1B,EAAE0B,IAGpE4C,CAASlF,EAAQ,mCCJjBkB,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAImG,EAAY5H,EAAQ,IACxBF,EAAQ+H,QAAUD,EAAUC,sCCF5B3G,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IAiBtD3B,EAAQgI,eATR,SAAwBC,EAAQC,GAI5B,IAHA,IACIC,EADEC,EAAa,GAGoB,QAA/BD,EAASF,EAAOI,KAAKH,KACzBE,EAAWE,KAAKH,EAAO,IAE3B,OAAOC,iCCfXhH,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IAuBtD3B,EAAQuI,iBAfR,SAA0BC,EAAQJ,EAAYK,GAC1C,IAAIC,EACAT,EAF+CU,GAAA,EAAAC,GAAA,EAAAC,OAAA9F,EAAA,IAGnD,QAAA+F,EAAAC,EAAwBX,EAAxB3G,OAAAuH,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAoC,KAAzBQ,EAAyBL,EAAAnH,MAEhC+G,EAAW,KAAOF,EAASW,EAAUC,OAAO,GAAGC,cAAgBF,EAAUG,MAAM,GAE/ErB,EAAS,IAAIsB,OAAO,eAAiBJ,EAAY,OAAQ,KAJzB,IAAAK,GAAA,EAAAC,GAAA,EAAAC,OAAA3G,EAAA,IAKhC,QAAA4G,EAAAC,EAAoBnB,EAAQoB,UAA5BpI,OAAAuH,cAAAQ,GAAAG,EAAAC,EAAAX,QAAAC,MAAAM,GAAA,EAAuC,KAA5BM,EAA4BH,EAAAhI,MAClB,OAAbmI,EAAM,IACNrB,EAAQsB,IAAID,EAAM,GAAIA,EAAM,GAAGE,QAAQ/B,EAAQS,KAPvB,MAAAuB,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,KAHe,MAAAO,GAAArB,GAAA,EAAAC,EAAAoB,EAAA,YAAAtB,GAAA,MAAAI,EAAAmB,QAAAnB,EAAAmB,SAAA,WAAAtB,EAAA,MAAAC,mCCRvD,SAASzD,EAAStE,GACd,IAAK,IAAI0B,KAAK1B,EAAQd,EAAQuC,eAAeC,KAAIxC,EAAQwC,GAAK1B,EAAE0B,IAEpEpB,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtDyD,EAASlF,EAAQ,KACjBkF,EAASlF,EAAQ,IAEjBkF,EAASlF,EAAQ,IACjBkF,EAASlF,EAAQ,kCCRjBkB,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAIwI,EAAmBjK,EAAQ,IAC/BF,EAAQoK,eAAiBD,EAAiBC,2UCF1ChJ,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAMe,EAAUxC,EAAQ,GAClBmK,EAAWnK,EAAQ,GACnBoK,EAAcpK,EAAQ,GAWtBkK,aAMF,SAAAA,IAAkD,IAAtC3F,EAAsC5B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA3B,KAAM4D,EAAqB5D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,gGAAIM,CAAAC,KAAAgH,GAC9ChH,KAAKqB,SAAWA,EAOhBrB,KAAK6D,YAAc,KAInB7D,KAAKmH,aAAe,KAIpBnH,KAAKoH,SAAW,IAAIH,EAAS9D,WAAW,IAAI+D,EAAYhF,cAIxDlC,KAAKqH,OAAS,GACd,IAAM5D,oUAAOC,CAAA,CACT4D,aAAa,EACbC,eAAe,GACZlE,GAEe,OAAlBrD,KAAKqB,WACLrB,KAAKqB,SAASmG,WAAY,EAC1BxH,KAAK6D,YAAc7D,KAAKyH,aAAahE,EAAQ6D,YAAa7D,EAAQ8D,eAClEvH,KAAKmH,aAAenH,KAAK6D,YAAY6D,wEAa7BrG,GACZ,IACIsG,EACAC,EACAC,EAHEC,EAAc9H,KAAKqB,SAkBzB,OAdoB,OAAhByG,GAAwBA,IAAgBzG,IACxCrB,KAAKqB,SAAWA,EAChBrB,KAAKqB,SAASmG,WAAY,EAC1BG,EAASG,EAAYC,WAAWC,WAChCJ,EAAUE,EAAYG,UACtBJ,EAAUxG,EAAS4G,UACJ,OAAXN,IACAA,EAAOO,YAAYJ,EAAYC,YAC/BJ,EAAOQ,YAAY9G,EAAS0G,aAE5BH,EAAQzG,QAAU0G,EAAQ1G,OAASyG,EAAQxG,SAAWyG,EAAQzG,QAC9DpB,KAAKoI,WAGNN,0CAOKO,GACZ,IAGI/K,EACAgL,EAJEjB,EAASrH,KAAKqH,OAChBnG,EAAe,KACf2C,GAAc,EAGlB,IAAKvG,EAAI,EAAGA,EAAI+K,IAAS/K,GACrBgL,EAAOjB,EAAO/J,IACL6C,UACL0D,GAAeA,EAEVyE,aAAgBrB,EAAShE,aAC9B/B,GAAgB2C,EAAc7D,KAAK6D,YAAc7D,KAAKmH,cAAcjG,cAG5E,OAAOA,6CAgBQC,EAAOC,GACtB,IAAMF,EAAe,IAAI5B,EAAQiJ,aAAapH,EAAOC,GACjDpB,KAAK6D,YAAY0D,gBACjBrG,EAAasH,OAASlJ,EAAQmJ,mBAC9BvH,EAAaR,KAAOpB,EAAQoJ,oBAEhC1I,KAAK6D,YAAY3C,aAAeA,EAChClB,KAAKmH,aAAajG,aAAeA,EAAawG,6CAarCJ,EAAaC,GACtB,IAAMoB,EAAoB3I,KAAKqB,SAASuH,uBAClCtH,EAAQtB,KAAKqB,SAASwH,QAAQC,uBAAuBxH,MACrDyH,EAAe,IAAIzJ,EAAQ0J,kBAAkBL,EAAkBxH,MAAOwH,EAAkBvH,OAAQ,CAClG6H,UAAW3J,EAAQ4J,aACnBC,UAAW7J,EAAQ4J,aACnBV,OAAQlH,EAAQhC,EAAQ8J,WAAa9J,EAAQ+J,UAC7C/B,cACAC,kBAIJ,OAFAwB,EAAaO,QAAQzL,KAAO,wBAC5BkL,EAAaO,QAAQC,iBAAkB,EAChCR,kCAQHT,EAAMD,GACV,IAAMM,EAAoB3I,KAAKqB,SAASuH,uBACxCN,EAAKF,QAAQO,EAAkBxH,MAAOwH,EAAkBvH,QACxDkH,EAAKkB,WAAWxJ,KAAKqB,SAAUrB,KAAKqB,SAASwH,QAAQC,uBAAuBxH,YAC9D3B,IAAV0I,EACArI,KAAKqH,OAAOoC,OAAOpB,EAAO,EAAGC,GAG7BD,EAAQrI,KAAKqH,OAAOnC,KAAKoD,GAAQ,EAEjCA,EAAKlI,oBACiC,OAAlCJ,KAAK6D,YAAY3C,cACjBlB,KAAK0J,mBAAmBf,EAAkBxH,MAAOwH,EAAkBvH,QAEvEkH,EAAKqB,gBAAgB3J,KAAK4J,gBAAgBvB,wCAMvCC,GACPtI,KAAKqH,OAAOoC,OAAOzJ,KAAKqH,OAAOwC,QAAQvB,GAAO,kCAM3CwB,GACH,IAGIjB,EACAkB,EACAC,EALAnG,EAAc7D,KAAK6D,YACnBsD,EAAenH,KAAKmH,aACpB8C,GAAc,EAHR1E,GAAA,EAAAC,GAAA,EAAAC,OAAA9F,EAAA,IAOV,QAAA+F,EAAAC,EAAmB3F,KAAKqH,OAAxBhJ,OAAAuH,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAgC,KAArB+C,EAAqB5C,EAAAnH,MACxB+J,EAAKhI,UACLgI,EAAK4B,OAAOlK,KAAKqB,SAAUwC,EAAasD,EAAc2C,EAAOG,GACzD3B,EAAKnI,YACD8J,IACAjK,KAAKoH,SAAS/G,eAAiBiI,EAAKjI,eACpCwI,EAAU7I,KAAKqB,SAASwH,SACxBkB,EAAQ/J,KAAKqB,SAAS0I,OAEhBI,QAAQC,QAAQC,QAAQxB,EAAQyB,SAAU,EAAG,YACnDtK,KAAKoH,SAAS8C,OAAOlK,KAAKqB,SAAUwC,EAAasD,GACjD4C,EAAMI,QAAQC,QAAQC,QAAQxB,EAAQ0B,MAAO,EAAG,aAEpDP,EAASnG,EACTA,EAAcsD,EACdA,EAAe6C,GAEf1B,aAAgBrB,EAASnE,SACzBmH,GAAc,EAET3B,aAAgBrB,EAASzE,gBAC9ByH,GAAc,KA5BhB,MAAApD,GAAArB,GAAA,EAAAC,EAAAoB,EAAA,YAAAtB,GAAA,MAAAI,EAAAmB,QAAAnB,EAAAmB,SAAA,WAAAtB,EAAA,MAAAC,oCA0CNtE,EAAOC,GACX,IAAIoJ,OACU7K,IAAVwB,QAAkCxB,IAAXyB,IAEvBD,GADAqJ,EAAOxK,KAAKqB,SAAS4G,WACR9G,MACbC,EAASoJ,EAAKpJ,QAGlBpB,KAAKqB,SAAS+G,QAAQjH,EAAOC,GAE7B,IAAMuH,EAAoB3I,KAAKqB,SAASuH,uBACxC5I,KAAK6D,YAAYuE,QAAQO,EAAkBxH,MAAOwH,EAAkBvH,QACpEpB,KAAKmH,aAAaiB,QAAQO,EAAkBxH,MAAOwH,EAAkBvH,QAZlD,IAAAgF,GAAA,EAAAC,GAAA,EAAAC,OAAA3G,EAAA,IAanB,QAAA4G,EAAAC,EAAmBxG,KAAKqH,OAAxBhJ,OAAAuH,cAAAQ,GAAAG,EAAAC,EAAAX,QAAAC,MAAAM,GAAA,EAAgC,CAAAG,EAAAhI,MACvB6J,QAAQO,EAAkBxH,MAAOwH,EAAkBvH,SAdzC,MAAAyF,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,oCAqBnB,IAAMyC,EAAe/I,KAAKyH,aAAazH,KAAK6D,YAAYyD,YAAatH,KAAK6D,YAAY0D,eACtFvH,KAAKyB,UAELzB,KAAK6D,YAAckF,EACnB/I,KAAKmH,aAAe4B,EAAarB,QACjC1H,KAAKoH,SAAW,IAAIH,EAAS9D,WAAW,IAAI+D,EAAYhF,gDAQlD,IAAAuI,GAAA,EAAAC,GAAA,EAAAC,OAAAhL,EAAA,IACN,QAAAiL,EAAAC,EAAmB7K,KAAKqH,OAAxBhJ,OAAAuH,cAAA6E,GAAAG,EAAAC,EAAAhF,QAAAC,MAAA2E,GAAA,GAAAG,EAAArM,MACSkD,WAFH,MAAAoF,GAAA6D,GAAA,EAAAC,EAAA9D,EAAA,YAAA4D,GAAA,MAAAI,EAAA/D,QAAA+D,EAAA/D,SAAA,WAAA4D,EAAA,MAAAC,GAGN3K,KAAKqH,OAAS,GACW,OAArBrH,KAAK6D,cACL7D,KAAK6D,YAAYpC,UACjBzB,KAAK6D,YAAc,MAEG,OAAtB7D,KAAKmH,eACLnH,KAAKmH,aAAa1F,UAClBzB,KAAKmH,aAAe,MAExBnH,KAAKoH,SAAS3F,+CAGtB7E,EAAQoK,eAAiBA,u0BCrRzBhJ,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAM6E,EAAQtG,EAAQ,GAChBiG,EAASjG,EAAQ,GAIjB0F,cACF,SAAAA,IAAc,IAAAjB,EAAA,mGAAAxB,CAAAC,KAAAwC,IACVjB,EAAA+B,EAAAtD,KAAAuD,EAAAf,GAAA/E,KAAAuC,KAAMoD,EAAMrB,SAAS+I,aAChB3K,WAAY,EAFPoB,wPADUwB,EAAOxD,2CAQxB8B,GACHA,EAAS0I,MAAMI,QAAQC,QAAQW,SAAQ,wCAG/CnO,EAAQ4F,cAAgBA,gCClBxBxE,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IAEtD,SAAWwD,GACPA,EAAQ,MAAY,QACpBA,EAAQ,UAAgB,YACxBA,EAAQ,OAAa,SACrBA,EAAQ,KAAW,OACnBA,EAAQ,OAAa,SACrBA,EAAQ,OAAa,SANzB,CAOcnF,EAAQmF,WAAanF,EAAQmF,SAAW,inCCTtD/D,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAMyM,EAAYlO,EAAQ,GACpBoK,EAAcpK,EAAQ,GACtBiG,EAASjG,EAAQ,GACjBsG,EAAQtG,EAAQ,GAChBmO,EAAUnO,EAAQ,IAMlB8F,cASF,SAAAA,EAAYsI,GAAwB,IAAA3J,+FAAAxB,CAAAC,KAAA4C,IAChCrB,EAAA+B,EAAAtD,KAAAuD,EAAAX,GAAAnF,KAAAuC,KAAMoD,EAAMrB,SAASO,UAChB4I,WAAaA,EAKlB3J,EAAK4J,eAAgB,EAIrB5J,EAAK6J,UAAW,EAIhB7J,EAAK8J,SAAW,EAIhB9J,EAAK+J,SAAW,EAKhB/J,EAAKgK,QAAU,EAKfhK,EAAKiK,QAAU,IA7BiB,QAAAC,EAAAhM,UAAAC,OAATgM,EAAS,IAAAlL,MAAAiL,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAATD,EAASC,EAAA,GAAAlM,UAAAkM,GAAA,OA8BhCpK,EAAKmK,QAAUA,EAAQE,KAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEC,WAAaF,EAAEE,aACxDxK,EAAKyK,sBAAsBzK,EAAK0K,kBA/BA1K,wPATfwB,EAAOxD,qDAoExB,IAiBIwF,EAjBEmH,EAAc,aACdC,EAAc,IAAIC,IAAI,CACxB,CAAClF,EAAYvC,QAAQ0H,cAAe,IACpC,CAACnF,EAAYvC,QAAQ2H,iBAAkB,IACvC,CAACpF,EAAYvC,QAAQ4H,oBAAqB,IAC1C,CAACrF,EAAYvC,QAAQ6H,YAAa,IAClC,CAACtF,EAAYvC,QAAQ8H,oBAAqB,MAExCC,EAAa,IAAIN,IACjBO,EAAU,IAAIP,IACdf,EAAW,IAAIe,IACfQ,EAAa,IAAIC,IACnBC,EAAK,EACLxB,EAAW,EACXS,EAAa,EACbgB,GAAgB,EAChBC,GAAY,EAjBHzH,GAAA,EAAAC,GAAA,EAAAC,OAAA9F,EAAA,IAmBb,QAAA+F,EAAAC,EAAqB3F,KAAK0L,QAA1BrN,OAAAuH,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAmC,KAAxB0H,EAAwBvH,EAAAnH,MAC/B,GAAI0O,EAAOC,UAAUC,gBAAkBnC,EAAUzG,cAAc6I,KAG1D,GAA6D,IAAxDrB,EAAaf,EAAUqC,gBAAgBC,cAAsF,IAA/DL,EAAOlB,WAAaf,EAAUqC,gBAAgBC,aAClHC,QAAQC,MAAM,uCAAwCP,QAQtD,GALAlB,GAAckB,EAAOlB,WAErBT,IADAvG,EAASkG,EAAQwC,gBAAiB,IAAMX,IAAOG,EAAQd,EAAaO,EAAYC,EAAStB,EAAUU,IAChFT,SAAS5L,OAC5BqN,EAAgBA,GAAiBhI,EAAOgI,cACxCC,EAAYA,GAAajI,EAAOiI,UACN,OAAtBC,EAAOL,WAAqB,KAAAc,GAAA,EAAAC,GAAA,EAAAC,OAAAjO,EAAA,IAE5B,QAAAkO,EAAAC,EAAwBb,EAAOL,WAA/BvO,OAAAuH,cAAA8H,GAAAG,EAAAC,EAAAjI,QAAAC,MAAA4H,GAAA,EAA2C,KAAhCK,EAAgCF,EAAAtP,MACvCqO,EAAW3L,IAAI8M,IAHS,MAAAlH,GAAA8G,GAAA,EAAAC,EAAA/G,EAAA,YAAA6G,GAAA,MAAAI,EAAAhH,QAAAgH,EAAAhH,SAAA,WAAA6G,EAAA,MAAAC,MAhC3B,MAAA/G,GAAArB,GAAA,EAAAC,EAAAoB,EAAA,YAAAtB,GAAA,MAAAI,EAAAmB,QAAAnB,EAAAmB,SAAA,WAAAtB,EAAA,MAAAC,GAAA,IAAAW,GAAA,EAAAC,GAAA,EAAAC,OAAA3G,EAAA,IAyCb,QAAA4G,EAAAC,EAAwBkG,EAAWsB,SAAnC3P,OAAAuH,cAAAQ,GAAAG,EAAAC,EAAAX,QAAAC,MAAAM,GAAA,EAA6C,KAAlC8G,EAAkC3G,EAAAhI,MACzC4N,EAAYxF,IAAIO,EAAYvC,QAAQ0H,cAApC,GAAA4B,OAAsD9B,EAAYhO,IAAI+I,EAAYvC,QAAQ0H,gBAA1F4B,OAA2Gf,EAAUgB,gBAAgBtH,QAAQsF,EAAa,QAAUgB,EAAUC,eAA9K,QA1CS,MAAAtG,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,GA6C0C,IAAlDyF,EAAaf,EAAUqC,gBAAgBc,SAEpCnB,GACAb,EAAYxF,IAAIO,EAAYvC,QAAQ4H,oBAApC,qCAAA0B,OAA8F9B,EAAYhO,IAAI+I,EAAYvC,QAAQ4H,uBAEtIvM,KAAKI,mBAAoB,GAGzB2M,GACAZ,EAAYxF,IAAIO,EAAYvC,QAAQ2H,iBAApC,8BAAA2B,OAAoF9B,EAAYhO,IAAI+I,EAAYvC,QAAQ2H,oBACxHK,EAAQhG,IAAI,KAAM,kBAGlBgG,EAAQhG,IAAI,KAAM,OAEtBwF,EAAY3K,QAAQ,SAACjD,EAAOM,EAAK8C,GAAb,OAAqBA,EAAIgF,IAAI9H,EAAKN,EAAM6P,UAC5DpO,KAAKqL,SAAWA,EAASb,KACzBxK,KAAKsL,SAAWA,EAChBtL,KAAKmL,cAAwB,IAAP2B,EACtB9M,KAAKG,WAAaH,KAAKmL,cACvB,IAAM5K,EAAW,IAAI2G,EAAY9E,eAAe+J,EAAaQ,EAAStB,EAAUrL,KAAKkL,WAAYlL,KAAKqO,WACtG,GAAIzB,EAAWpC,KAAO,EAAG,KAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAhL,EAAA,IAErB,QAAAiL,EAAAC,EAAwB+B,EAAxBvO,OAAAuH,cAAA6E,GAAAG,EAAAC,EAAAhF,QAAAC,MAAA2E,GAAA,EAAoC,KAAzBsD,EAAyBnD,EAAArM,MAChCgC,EAASqM,WAAWmB,IAAa,GAHhB,MAAAlH,GAAA6D,GAAA,EAAAC,EAAA9D,EAAA,YAAA4D,GAAA,MAAAI,EAAA/D,QAAA+D,EAAA/D,SAAA,WAAA4D,EAAA,MAAAC,IAMzB,OAAOpK,sCAOC,IAAA+N,EAAAtO,KACJmB,EAAQ,EACRC,EAAS,EACTF,EAAe,KACfqN,EAAe,EACnBvO,KAAKW,yBACAC,OAAO,SAACC,GAAD,OAASA,aAAeqG,EAAY9E,iBAC3CZ,QAAQ,SAAAjB,GACT,IAAMiO,EAAajO,EAAS8K,SAASmD,WAAWjQ,MAChD4C,EAAQqN,EAAWC,EACnBrN,EAASoN,EAAWE,EACpBxN,EAAeX,EAAS8K,SAAS/D,YAAY/I,MAC7CgQ,EAAehO,EAASgO,aACxBhO,EAASkB,UACT6M,EAAKjD,SAAW,EAChBiD,EAAKhD,SAAW,IAEpB,IAAMqD,EAAc3O,KAAKiM,iBACzB0C,EAAYvG,QAAQjH,EAAOC,GAC3BpB,KAAKgM,sBAAsB2C,GAC3B3O,KAAK2J,gBAAgBzI,EAAcqN,6CAQnC,IAAMK,EAAY5O,KAAKW,yBACvB,OAAOiO,EAAUlP,OAAS,EAAIkP,EAAU,GAAGvD,SAAS/D,YAAY/I,MAAQ,6CAQ5D2C,GAAgC,IAAlBqN,EAAkB9O,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EACzCO,KAAK6O,6BAA6B3H,EAAY9E,gBAAgBZ,QAAQ,SAAAjB,GAClEA,EAAS8K,SAAS/D,YAAY/I,MAAQ2C,EACtCX,EAASgO,aAAeA,EACxBhO,EAASuO,aAAc,IAJiB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAtP,EAAA,IAM5C,QAAAuP,EAAAC,EAAqBnP,KAAK0L,QAA1BrN,OAAAuH,cAAAmJ,GAAAG,EAAAC,EAAAtJ,QAAAC,MAAAiJ,GAAA,EAAmC,CAAAG,EAAA3Q,MACxBoL,gBAAgBzI,EAAcqN,IAPG,MAAA1H,GAAAmI,GAAA,EAAAC,EAAApI,EAAA,YAAAkI,GAAA,MAAAI,EAAArI,QAAAqI,EAAArI,SAAA,WAAAkI,EAAA,MAAAC,GAS5CjP,KAAKI,kBAAsC,OAAjBc,iCAUvBG,EAAUwC,EAAasD,GAAyB,IAAAiI,EAAApP,KAAX8J,EAAWrK,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAH,EAAG4P,GAAA,EAAAC,GAAA,EAAAC,OAAA5P,EAAA,IACnD,QAAA6P,EAAAC,EAAqBzP,KAAK0L,QAA1BrN,OAAAuH,cAAAyJ,GAAAG,EAAAC,EAAA5J,QAAAC,MAAAuJ,GAAA,EAAmC,CAAAG,EAAAjR,MACxBmR,OAAOrO,EAAUwC,EAAaiG,IAFU,MAAAjD,GAAAyI,GAAA,EAAAC,EAAA1I,EAAA,YAAAwI,GAAA,MAAAI,EAAA3I,QAAA2I,EAAA3I,SAAA,WAAAwI,EAAA,MAAAC,GAI9CvP,KAAKmL,gBAAiBnL,KAAKK,gBAC5BL,KAAKW,yBAAyBa,QAAQ,SAAAjB,GAClC,IAAMoP,EAAOpP,EAAS8K,SAASsE,KAAKpR,MAAQuL,EAC5CvJ,EAAS8K,SAASxH,YAAYtF,MAAQsF,EAAYyF,QAClD/I,EAAS8K,SAASsE,KAAKpR,MAASoR,GAAQP,EAAK5D,QAAWmE,EAAOP,EAAK7D,QACpElK,EAAS6I,OAAOkF,EAAK5P,MAAO4P,EAAKvP,OAAQuP,EAAK/O,oBAAiBV,EAAYwH,qCAU/EhG,EAAOC,GACXpB,KAAKW,yBAAyBa,QAAQ,SAAAjB,GAC9B,YAAaA,GACbA,EAAS6H,QAAQjH,EAAOC,KAHb,IAAAwO,GAAA,EAAAC,GAAA,EAAAC,OAAAnQ,EAAA,IAKnB,QAAAoQ,EAAAC,EAAqBhQ,KAAK0L,QAA1BrN,OAAAuH,cAAAgK,GAAAG,EAAAC,EAAAnK,QAAAC,MAAA8J,GAAA,EAAmC,CAAAG,EAAAxR,MACxB6J,QAAQjH,EAAOC,IANP,MAAAyF,GAAAgJ,GAAA,EAAAC,EAAAjJ,EAAA,YAAA+I,GAAA,MAAAI,EAAAlJ,QAAAkJ,EAAAlJ,SAAA,WAAA+I,EAAA,MAAAC,uCAeZzO,EAAUC,GACjB,IAAM2O,EAAe5O,EAAS4O,aAC1BC,EAAMC,KAAKC,IAAIH,EAAaI,oBAAqBJ,EAAaK,mBAC9DtQ,KAAKqL,SAAW6E,GAChB3C,QAAQgD,KAAR,2DAAAtC,OAAwEiC,EAAxE,mBAAAjC,OAA6FjO,KAAKqL,SAAlG,kBAEJ6E,EAAMD,EAAaO,YACfxQ,KAAKsL,SAAW4E,GAChB3C,QAAQgD,KAAR,2DAAAtC,OAAwEiC,EAAxE,mBAAAjC,OAA6FjO,KAAKsL,SAAlG,kBARoB,IAAAmF,GAAA,EAAAC,GAAA,EAAAC,OAAAhR,EAAA,IAUxB,QAAAiR,EAAAC,EAAqB7Q,KAAK0L,QAA1BrN,OAAAuH,cAAA6K,GAAAG,EAAAC,EAAAhL,QAAAC,MAAA2K,GAAA,EAAmC,CAAAG,EAAArS,MACxBiL,WAAWnI,EAAUC,IAXR,MAAAuF,GAAA6J,GAAA,EAAAC,EAAA9J,EAAA,YAAA4J,GAAA,MAAAI,EAAA/J,QAAA+J,EAAA/J,SAAA,WAAA4J,EAAA,MAAAC,sCAoBxBG,EAAAvN,EAAAX,EAAA1D,WAAA,UAAAc,MAAAvC,KAAAuC,MADM,IAAA+Q,GAAA,EAAAC,GAAA,EAAAC,OAAAtR,EAAA,IAEN,QAAAuR,EAAAC,EAAqBnR,KAAK0L,QAA1BrN,OAAAuH,cAAAmL,GAAAG,EAAAC,EAAAtL,QAAAC,MAAAiL,GAAA,EAAmC,CAAAG,EAAA3S,MACxBkD,WAHL,MAAAoF,GAAAmK,GAAA,EAAAC,EAAApK,EAAA,YAAAkK,GAAA,MAAAI,EAAArK,QAAAqK,EAAArK,SAAA,WAAAkK,EAAA,MAAAC,sCAhNN,OAAOjR,KAAKoL,uBAMF7M,GACNyB,KAAKoL,WAAa7M,IAClByB,KAAKW,yBAAyBa,QAAQ,SAAAjB,GAClCA,EAAS8N,UAAY9P,EACrBgC,EAASuO,aAAc,IAE3B9O,KAAKoL,SAAW7M,wCA2M5B3B,EAAQgG,WAAaA,sMCjRrB,IAAIwO,EAAmBpR,MAAQA,KAAKoR,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAI3S,WAAc2S,EAAM,CAAEC,QAAWD,IAExDrT,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAMe,EAAUxC,EAAQ,GAClBwH,EAAkBxH,EAAQ,GAC1ByU,EAAgBH,EAAgBtU,EAAQ,KACxC0U,EAAgBJ,EAAgBtU,EAAQ,KACxC2U,EAAgBL,EAAgBtU,EAAQ,KACxC4U,EAAgBN,EAAgBtU,EAAQ,KACxC6U,EAAgBP,EAAgBtU,EAAQ,KACxC8U,EAAgBR,EAAgBtU,EAAQ,KACxC+U,EAAgBT,EAAgBtU,EAAQ,KACxCgV,EAAgBV,EAAgBtU,EAAQ,KACxCiV,EAAgBX,EAAgBtU,EAAQ,KACxCkV,EAAiBZ,EAAgBtU,EAAQ,KACzCmV,EAAiBb,EAAgBtU,EAAQ,KACzCoV,EAAiBd,EAAgBtU,EAAQ,KACzCqV,EAAiBf,EAAgBtU,EAAQ,KACzCsV,EAAiBhB,EAAgBtU,EAAQ,KACzCuV,EAAiBjB,EAAgBtU,EAAQ,KACzCwV,EAAiBlB,EAAgBtU,EAAQ,KACzCyV,EAAiBnB,EAAgBtU,EAAQ,KACzC0V,EAAiBpB,EAAgBtU,EAAQ,KAEzC2H,aAOF,SAAAA,EAAY0I,GAA8B,IAAfsF,EAAehT,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAL,+FAAKM,CAAAC,KAAAyE,GACtCzE,KAAKmN,cAAgBA,EACrBnN,KAAKyS,QAAU,IAAInT,EAAQoT,QAAQD,kEAInC,OAAQzS,KAAKmN,eACT,KAAK7I,EAAgBC,cAAc6I,KAAM,OAAO,KAChD,KAAK9I,EAAgBC,cAAcoO,IAAK,OAAOpB,EAAcD,QAC7D,KAAKhN,EAAgBC,cAAcqO,MAAO,OAAOpB,EAAcF,QAC/D,KAAKhN,EAAgBC,cAAcsO,QAAS,OAAOpB,EAAcH,QACjE,KAAKhN,EAAgBC,cAAcuO,WAAY,OAAOpB,EAAcJ,QACpE,KAAKhN,EAAgBC,cAAcwO,YAAa,OAAOpB,EAAcL,QACrE,KAAKhN,EAAgBC,cAAcyO,OAAQ,OAAOpB,EAAcN,QAChE,KAAKhN,EAAgBC,cAAc0O,WAAY,OAAOpB,EAAcP,QACpE,KAAKhN,EAAgBC,cAAc2O,UAAW,OAAOpB,EAAcR,QACnE,KAAKhN,EAAgBC,cAAc4O,QAAS,OAAOpB,EAAcT,QACjE,KAAKhN,EAAgBC,cAAc6O,SAAU,OAAOpB,EAAeV,QACnE,KAAKhN,EAAgBC,cAAc8O,OAAQ,OAAOpB,EAAeX,QACjE,KAAKhN,EAAgBC,cAAc+O,SAAU,OAAOpB,EAAeZ,QACnE,KAAKhN,EAAgBC,cAAcgP,OAAQ,OAAOpB,EAAeb,QACjE,KAAKhN,EAAgBC,cAAciP,QAAS,OAAOpB,EAAed,QAClE,KAAKhN,EAAgBC,cAAckP,QAAS,OAAOpB,EAAef,QAClE,KAAKhN,EAAgBC,cAAcmP,OAAQ,OAAOpB,EAAehB,QACjE,KAAKhN,EAAgBC,cAAcoP,WAAY,OAAOpB,EAAejB,QACrE,KAAKhN,EAAgBC,cAAcqP,SAAU,OAAOpB,EAAelB,8CAI/E1U,EAAQ6H,UAAYA,iBC9DpB5H,EAAAD,QAAA,gSCAAC,EAAAD,QAAA,8QCAAC,EAAAD,QAAA,8RCAAC,EAAAD,QAAA,+cCAAC,EAAAD,QAAA,ycCAAC,EAAAD,QAAA,0RCAAC,EAAAD,QAAA,2RCAAC,EAAAD,QAAA,sSCAAC,EAAAD,QAAA,0RCAAC,EAAAD,QAAA,sRCAAC,EAAAD,QAAA,kcCAAC,EAAAD,QAAA,ySCAAC,EAAAD,QAAA,kRCAAC,EAAAD,QAAA,geCAAC,EAAAD,QAAA,6cCAAC,EAAAD,QAAA,8SCAAC,EAAAD,QAAA,khBCAAC,EAAAD,QAAA,qTCCAoB,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IAEtD,SAAWsV,GACPA,EAAU,OAAa,eAD3B,CAEgBjX,EAAQiX,aAAejX,EAAQiX,WAAa,KAS5D,SAAWxG,GAEPA,EAAgBA,EAAe,KAAW,GAAK,OAE/CA,EAAgBA,EAAe,MAAY,GAAK,QAKhDA,EAAgBA,EAAe,YAAkB,GAAK,cAT1D,CAUqBzQ,EAAQyQ,kBAAoBzQ,EAAQyQ,gBAAkB,KAG3E,SAAWyG,GAEPA,EAAc,YAAkB,cAEhCA,EAAc,WAAiB,YAE/BA,EAAc,aAAmB,cAEjCA,EAAc,mBAAyB,mBAR3C,CASoBlX,EAAQkX,iBAAmBlX,EAAQkX,eAAiB,iUCnCxE9V,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAMwV,EAAajX,EAAQ,GACrBsG,EAAQtG,EAAQ,GAKhBwF,aACF,SAAAA,EAAYzE,EAAMmW,GAAqC,IAArB3Q,EAAqB5D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,gGAAIM,CAAAC,KAAAsC,GACnDtC,KAAKnC,KAAOA,EACZmC,KAAKgU,eAAiBA,EACtBhU,KAAKiU,aAAe,KACpB,IAAMC,oUAAQxQ,CAAA,CACVqI,WAAY3I,EAAMiK,gBAAgB8G,KAClChH,cAAe4G,EAAWxP,cAAcmP,OACxC/G,QAAS,IAAIP,IACbf,SAAU,IAAIe,IACdQ,WAAY,IAAIC,IAChBoH,aAAc,MACX5Q,GAEPrD,KAAK+L,WAAamI,EAASnI,WAC3B/L,KAAKiU,aAAeC,EAASD,aAC7BjU,KAAK2M,QAAUuH,EAASvH,QACxB3M,KAAKqL,SAAW6I,EAAS7I,SACzBrL,KAAK4M,WAAasH,EAAStH,WAC3B5M,KAAKkN,UAAY,IAAI6G,EAAWtP,UAAUyP,EAAS/G,8EAQvCjM,GAAgCzB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,kCAczC4B,EAAUwC,GAAwBpE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,mCAUjC0B,EAAOC,uCAkBJC,EAAUC,sCAcjB,IADM,IAAA8S,EACYpW,OAAO0D,KAAK1B,MAA9BqU,EAAA,EAAAA,EAAAD,EAAA1U,OAAA2U,IAAqC,CAAhC,IAAMxV,EAAGuV,EAAAC,GACQ,OAAdrU,KAAKnB,IAA8C,mBAAtBmB,KAAKnB,GAAK4C,UACvCzB,KAAKnB,GAAK4C,UACVzB,KAAKnB,GAAO,4CAK5BjC,EAAQ0F,OAASA,gCClGjBtE,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IAKtD,SAAWoG,GAEPA,EAAO,cAAoB,gBAE3BA,EAAO,iBAAuB,mBAE9BA,EAAO,oBAA0B,sBAEjCA,EAAO,YAAkB,cAEzBA,EAAO,oBAA0B,sBAVrC,CAWa/H,EAAQ+H,UAAY/H,EAAQ+H,QAAU,oqBChBnD,IAAIyM,EAAmBpR,MAAQA,KAAKoR,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAI3S,WAAc2S,EAAM,CAAEC,QAAWD,IAExDrT,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAMe,EAAUxC,EAAQ,GAClByU,EAAgBH,EAAgBtU,EAAQ,KACxCwX,EAAgBlD,EAAgBtU,EAAQ,KAIxCoF,cACF,SAAAA,IAAc,mGAAAnC,CAAAC,KAAAkC,GAAAoB,EAAAtD,KAAAuD,EAAArB,GAAAzE,KAAAuC,KACJ,CACFqL,SAAU,CACNxH,YAAa,IAAIvE,EAAQoT,QAAQ,MACjCD,QAAS,IAAInT,EAAQoT,QAAQ,IAEjCsB,eAAgBzC,EAAcD,QAC9B2C,aAAcK,EAAchD,QAC5BiD,YAAY,EACZC,WAAW,iPAVIlV,EAAQmV,qBAcnC7X,EAAQsF,aAAeA,iBCzBvBrF,EAAAD,QAAA,uMCAAC,EAAAD,QAAA,28BCCA,IAAIwU,EAAmBpR,MAAQA,KAAKoR,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAI3S,WAAc2S,EAAM,CAAEC,QAAWD,IAExDrT,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAMe,EAAUxC,EAAQ,GAClBsG,EAAQtG,EAAQ,IAChByU,EAAgBH,EAAgBtU,EAAQ,KACxCwX,EAAgBlD,EAAgBtU,EAAQ,KAMxCsF,cAUF,SAAAA,EAAY+J,EAAaQ,EAAStB,GAA4C,IAAA9J,EAAlC1B,EAAkCJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzB,KAAM4O,EAAmB5O,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GA0B1E,+FA1B0EM,CAAAC,KAAAoC,GAC1Eb,EAAA+B,EAAAtD,KAAAuD,EAAAnB,GAAA3E,KAAAuC,KAAM,CACF2M,QAAS,CACL+H,cAAe,KAEnBrJ,SAAU,CACNxH,YAAa,IAAIvE,EAAQoT,QAAQ,MACjCpL,YAAa,IAAIhI,EAAQoT,QAAQ,MACjClE,WAAY,IAAIlP,EAAQoT,QAAQ,IAAIpT,EAAQqV,SAC5CC,UAAW,IAAItV,EAAQoT,QAAQ,IAAIpT,EAAQqV,SAC3CE,WAAY,IAAIvV,EAAQoT,QAAQ,IAChCoC,UAAW,IAAIxV,EAAQoT,QAAQ,KAC/BqC,OAAQ,IAAIzV,EAAQoT,QAAQ,GAC5B/C,KAAM,IAAIrQ,EAAQoT,QAAQ,IAE9BsB,eAAgBzC,EAAcD,QACzB1K,QAAQxD,EAAMuB,QAAQ0H,cAAeF,EAAYhO,IAAIiF,EAAMuB,QAAQ0H,gBACnEzF,QAAQxD,EAAMuB,QAAQ2H,iBAAkBH,EAAYhO,IAAIiF,EAAMuB,QAAQ2H,mBACtE1F,QAAQxD,EAAMuB,QAAQ4H,oBAAqBJ,EAAYhO,IAAIiF,EAAMuB,QAAQ4H,sBAC9E0H,aAAcK,EAAchD,QACvB1K,QAAQxD,EAAMuB,QAAQ6H,YAAaL,EAAYhO,IAAIiF,EAAMuB,QAAQ6H,cACjE5F,QAAQxD,EAAMuB,QAAQ8H,oBAAqBN,EAAYhO,IAAIiF,EAAMuB,QAAQ8H,sBAC9E4B,YACAkG,YAAY,EACZC,WAAW,KAEC,OAAZ7H,EAAkB,KAAApH,GAAA,EAAAC,GAAA,EAAAC,OAAA9F,EAAA,IAClB,QAAA+F,EAAAC,EAAoBgH,EAAQlG,UAA5BpI,OAAAuH,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAuC,KAA5BmB,EAA4BhB,EAAAnH,MACnCgD,EAAKoL,QAAQjG,EAAM,IAAMA,EAAM,IAFjB,MAAAG,GAAArB,GAAA,EAAAC,EAAAoB,EAAA,YAAAtB,GAAA,MAAAI,EAAAmB,QAAAnB,EAAAmB,SAAA,WAAAtB,EAAA,MAAAC,IAKtB,GAAiB,OAAb4F,EAAmB,KAAAjF,GAAA,EAAAC,GAAA,EAAAC,OAAA3G,EAAA,IACnB,QAAA4G,EAAAC,EAAoB6E,EAAS5E,UAA7BpI,OAAAuH,cAAAQ,GAAAG,EAAAC,EAAAX,QAAAC,MAAAM,GAAA,EAAwC,KAA7BM,EAA6BH,EAAAhI,MACpCgD,EAAK8J,SAAS3E,EAAM,IAAMA,EAAM,IAFjB,MAAAG,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,IA/BmD,OAoC1E/E,EAAKyT,oBAAoBnV,GApCiD0B,wPAVrDjC,EAAQmV,sDAuEzBtT,EAAOC,GACXD,EAAQgP,KAAKD,IAAI/O,EAAO,GACxBC,EAAS+O,KAAKD,IAAI9O,EAAQ,GAC1BpB,KAAKqL,SAASmD,WAAWjQ,MAAMoI,IAAIxF,EAAOC,GAC1CpB,KAAKqL,SAASuJ,UAAUrW,MAAMoI,IAAI,EAAMxF,EAAO,EAAMC,GACrDpB,KAAKqL,SAAS0J,OAAOxW,MAAQ4C,EAAQC,gDAKN,IAAfvB,EAAeJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KACV,OAAXI,IACIA,aAAkBP,EAAQ2V,mBAC1BjV,KAAKqL,SAASwJ,WAAWtW,MAAQsB,EAAOqV,KACxClV,KAAKqL,SAASyJ,UAAUvW,MAAQsB,EAAOsV,IACvCnV,KAAK2M,QAAQyI,mBAAqB,YAG3BpV,KAAK2M,QAAQyI,yDArC5B,OAAOC,OAAOC,SAAStV,KAAK2M,QAAQ+H,cAAe,kBAUtCnW,GACbyB,KAAK2M,QAAQ+H,cAAgBnW,EAAMgX,QAAQ,wCA+BnD3Y,EAAQwF,eAAiBA,iBC5GzBvF,EAAAD,QAAA,uvBCAAC,EAAAD,QAAA,sWCCAoB,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAIiX,EAAuB1Y,EAAQ,IACnCF,EAAQgI,eAAiB4Q,EAAqB5Q,eAC9C,IAAI6Q,EAAwB3Y,EAAQ,IACpCF,EAAQ6Q,gBAAkBgI,EAAsBhI,gBAChD,IAAIiI,EAA0B5Y,EAAQ,IACtCF,EAAQuI,iBAAmBuQ,EAAwBvQ,+CCNnDnH,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAMyM,EAAYlO,EAAQ,GACpBoK,EAAcpK,EAAQ,GACtB0Y,EAAuB1Y,EAAQ,IAC/B4Y,EAA0B5Y,EAAQ,IAkFxCF,EAAQ6Q,gBArER,SAAyBrI,EAAQ6H,EAAQd,EAAaO,EAAYC,EAAStB,EAAUU,GACjF,IAAM4J,EAAiB,yCAEjBzI,EAAYD,EAAOC,UACnB0I,EAAU,IAAIxJ,IAAI,CACpB,CAAC,WAAYa,EAAO+G,gBACpB,CAAC,SAAU/G,EAAOgH,gBAEhB4B,EAAkB5I,EAAO+G,eAAe8B,SAAS,aACjDC,EAAe9I,EAAO+G,eAAe8B,SAAS,UAChDxK,EAAW,GACX0K,EAAQ,GACRjJ,GAAgB,EAChBC,GAAY,EAChB,QAAgCrN,IAA5BiW,EAAQzX,IAAI,YACZoP,QAAQC,MAAM,0BAA2BP,QAExC,GAAI8I,GAAyE,IAAxDhK,EAAaf,EAAUqC,gBAAgBC,aAC7DC,QAAQC,MAAM,kFAAmFP,QAEhG,GAAK4I,GAAoBE,EAGzB,CAsBD,GArBIA,IACA5J,EAAYxF,IAAIO,EAAYvC,QAAQ2H,iBAAkBH,EAAYhO,IAAI+I,EAAYvC,QAAQ2H,kBAAoB,KAAOlH,EAAS,iBAC9H2H,GAAgB,GAEU,OAA1B6I,EAAQzX,IAAI,WAAsByX,EAAQzX,IAAI,UAAU0L,QAAQ,gBAAkB,IAClFsC,EAAYxF,IAAIO,EAAYvC,QAAQ8H,oBAAqBN,EAAYhO,IAAI+I,EAAYvC,QAAQ8H,qBAAuB,KAAOrH,EAAS,oBACpIkG,EAAWA,EAAS2C,OAAOuH,EAAqB5Q,eA5BlC,6BA4BgEgR,EAAQzX,IAAI,YAC1F6X,EAAQA,EAAM/H,OAAO3C,GAAU2C,OAAOuH,EAAqB5Q,eAAe+Q,EAAgBC,EAAQzX,IAAI,aAE1G6X,EAAQA,EACH/H,OAAOuH,EAAqB5Q,eAAe+Q,EAAgBC,EAAQzX,IAAI,cACvE8P,OAAOzN,MAAMyV,KAAKhJ,EAAO5B,SAAS3J,SAClCuM,OAAOzN,MAAMyV,KAAKhJ,EAAON,QAAQjL,SAEtCuL,EAAO5B,SAAS7J,QAAQ,SAACjD,EAAOM,GAAR,OAAgBwM,EAAS1E,IAAIvB,EAASvG,EAAImH,OAAO,GAAGC,cAAgBpH,EAAIqH,MAAM,GAAI3H,KAC1G0O,EAAON,QAAQnL,QAAQ,SAACjD,EAAOM,GAAR,OAAgB8N,EAAQhG,IAAIvB,EAASvG,EAAImH,OAAO,GAAGC,cAAgBpH,EAAIqH,MAAM,GAAI3H,KAExGmX,EAAwBvQ,iBAAiBC,EAAQ4Q,EAAOrJ,GACxD+I,EAAwBvQ,iBAAiBC,EAAQ4Q,EAAOJ,GAExDlJ,EAAW/F,IAAIuG,EAAUC,cAAeD,GACpC2I,EAAiB,CACjB,IAAI/Q,EAAMM,EAAS,yBAEoC,IAAlD2G,EAAaf,EAAUqC,gBAAgBc,QAAgByH,EAAQzX,IAAI,YAAY0L,QAAQ,UAAY,IACpG/E,GAAO,UACPkI,GAAY,GAEhBlI,GAAO,eAEP,IAAMoR,EAAe9Q,EAAS,eAC9BiG,EAAS1E,IAAIuP,EAAchJ,EAAUuF,SAErC3N,GAAO,iBAAmBoI,EAAUC,cAAgB,oBAAsB+I,EAAe,WACzF/J,EAAYxF,IAAIO,EAAYvC,QAAQ4H,oBAAqBJ,EAAYhO,IAAI+I,EAAYvC,QAAQ4H,qBAAuBzH,GACpHqH,EAAYxF,IAAIO,EAAYvC,QAAQ0H,cAAeF,EAAYhO,IAAI+I,EAAYvC,QAAQ0H,eAAiB,iBAAmB6J,EAAe,SAG9I/J,EAAYxF,IAAIO,EAAYvC,QAAQ0H,cAAeF,EAAYhO,IAAI+I,EAAYvC,QAAQ0H,eAAiBuJ,EAAQzX,IAAI,YAAc,MACpG,OAA1ByX,EAAQzX,IAAI,WACZgO,EAAYxF,IAAIO,EAAYvC,QAAQ6H,YAAaL,EAAYhO,IAAI+I,EAAYvC,QAAQ6H,aAAeoJ,EAAQzX,IAAI,UAAY,WA3ChIoP,QAAQC,MAAM,yEAA0EP,GA8C5F,MAAO,CAAE3B,WAAUyB,gBAAeC,m1BCpFtChP,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAM6E,EAAQtG,EAAQ,GAChBiG,EAASjG,EAAQ,GAOjBgG,cAOF,SAAAA,EAAYtD,EAAOK,GAAQ,IAAA0B,EAAA,mGAAAxB,CAAAC,KAAA8C,IACvBvB,EAAA+B,EAAAtD,KAAAuD,EAAAT,GAAArF,KAAAuC,KAAMoD,EAAMrB,SAASoU,KAAM3W,EAAOK,KAE7BuW,SAAU,EAEf7U,EAAK8U,cAAe,EACpB9U,EAAKpB,WAAY,EANMoB,wPAPRwB,EAAOxD,2CAsBnB8B,EAAUwC,EAAasD,GAC1B,IAAM0B,EAAUxH,EAASwH,QACnBkB,EAAQ1I,EAAS0I,MACjBvK,EAAQQ,KAAKR,MACbK,EAASG,KAAKH,OACdyW,EAAatW,KAAKoW,QAAU,EAAI,EAChCG,EAAa,EAAID,EAEvBvM,EAAMI,QAAQrG,MAAM0S,QAAQ,GAC5BzM,EAAMI,QAAQsM,MAAMD,QAAQ,GAE5BzM,EAAMI,QAAQrG,MAAM4S,WAAU,GAC9B3M,EAAMI,QAAQsM,MAAMC,WAAU,GAE9B3M,EAAMI,QAAQC,QAAQW,SAAQ,GAC9BhB,EAAMI,QAAQC,QAAQuM,MAAM9N,EAAQ+N,QAAS/N,EAAQ+N,QAAS/N,EAAQ+N,SACtE7M,EAAMI,QAAQC,QAAQC,QAAQxB,EAAQgO,OAAQP,EAAY,YAC1DvM,EAAMI,QAAQC,QAAQ0M,SAASP,GAE3BvW,KAAKqW,eACDrW,KAAKK,gBACLgB,EAAS8C,kBACT9C,EAASgV,iBAGThV,EAAS8C,gBAAgBN,GACzBxC,EAASgV,eACThV,EAAS8C,gBAAgBgD,GACzB9F,EAASgV,iBAIbrW,KAAKK,eACLgB,EAAS6I,OAAO1K,EAAOK,IAGvBwB,EAAS6I,OAAO1K,EAAOK,EAAQgE,GAC/BxC,EAAS6I,OAAO1K,EAAOK,EAAQsH,IAGnC4C,EAAMI,QAAQrG,MAAM4S,WAAU,GAC9B3M,EAAMI,QAAQsM,MAAMC,WAAU,GAE9B3M,EAAMI,QAAQC,QAAQC,QAAQxB,EAAQ0B,MAAO,EAAG,YAChDR,EAAMI,QAAQC,QAAQuM,MAAM9N,EAAQkO,KAAMlO,EAAQkO,KAAMlO,EAAQkO,2CAGxEna,EAAQkG,SAAWA,+7BC9EnB9E,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAMkE,EAAc3F,EAAQ,GACtBiG,EAASjG,EAAQ,GACjBsG,EAAQtG,EAAQ,GAKhBmG,cAQF,SAAAA,EAAYzD,EAAOK,GAA6B,IAAA0B,EAArB8B,EAAqB5D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,gGAAIM,CAAAC,KAAAiD,IAC5C1B,EAAA+B,EAAAtD,KAAAuD,EAAAN,GAAAxF,KAAAuC,KAAMoD,EAAMrB,SAASiV,OAAQxX,EAAOK,KAC/BL,MAAQA,EACb+B,EAAK1B,OAASA,EACd0B,EAAK0V,iBAAmB,KACxB,IAAMxT,oUAAOC,CAAA,CACTuT,iBAAkB,KAClBtT,WAAY,EACZuT,YAAY,EACZ9S,OAAO,GACJf,GAVqC,OAY5C9B,EAAKpB,WAAY,EACjBoB,EAAK4V,UAAY,IAAI1U,EAAYC,UAAUe,GAC3ClC,EAAK0V,iBAAmBxT,EAAQwT,iBAChC1V,EAAK2V,WAAazT,EAAQyT,WAC1B3V,EAAK6C,MAAQX,EAAQW,MAhBuB7C,wPAR3BwB,EAAOxD,2CAgCrB8B,EAAUwC,GACb,IAAMrE,EAAQQ,KAAKR,MACbuJ,EAAe/I,KAAKK,oBAAiBV,EAAYkE,EACjDoT,EAAmBzX,EAAMyX,iBAC3BjX,KAAKoE,OACLpE,KAAKmX,UAAU9W,eAAiBL,KAAKK,eACrCL,KAAKmX,UAAUjN,OAAO7I,EAAUwC,IAE3B7D,KAAKkX,aACV7V,EAAS8C,gBAAgB4E,GACzB1H,EAAS6V,cAEb1X,EAAMyX,iBAAmBjX,KAAKiX,iBAC9B5V,EAAS6I,OAAO1K,EAAOQ,KAAKH,OAAQkJ,GACpCvJ,EAAMyX,iBAAmBA,uCAGjCra,EAAQqG,WAAaA,u0BCzDrBjF,OAAOC,eAAerB,EAAS,aAAc,CAAE2B,OAAO,IACtD,IAAM6E,EAAQtG,EAAQ,GAChBiG,EAASjG,EAAQ,GAOjBqG,cAOF,SAAAA,EAAY5C,GAAiC,IAAAgB,EAAvB6V,EAAuB3X,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,cAAe,mGAAAM,CAAAC,KAAAmD,IACzC5B,EAAA+B,EAAAtD,KAAAuD,EAAAJ,GAAA1F,KAAAuC,KAAMoD,EAAMrB,SAASsV,UAChBrL,sBAAsBzL,GAI3BgB,EAAKtB,QAAU,KACfsB,EAAK+V,SAASF,GAP2B7V,wPAPxBwB,EAAOxD,6CAyBnB6X,GAAO,IAAA9I,EAAAtO,KACN4O,EAAY5O,KAAKW,yBACvBX,KAAKC,QAAU,KACf2O,EAAUpN,QAAQ,SAAAjB,GACd,IAAM8K,EAAW9K,EAAS8K,cACF1L,IAApB0L,EAAS+L,KACT9I,EAAKrO,QAAUoL,EAAS+L,qCAW7B/V,EAAUwC,EAAasD,GACL,OAAjBnH,KAAKC,UACLD,KAAKC,QAAQ1B,MAAQsF,EAAYyF,SAErCjI,EAAS6I,OAAOlK,KAAKR,MAAOQ,KAAKH,OAAQG,KAAKK,oBAAiBV,EAAYwH,wCAGnFvK,EAAQuG,WAAaA","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postprocessing\"] = factory(require(\"three\"));\n\telse\n\t\troot[\"postprocessing\"] = factory(root[\"three\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\n/**\n * An abstract pass.\n *\n * Passes that do not rely on the depth buffer should explicitly disable the\n * depth test and depth write in their respective shader materials.\n */\nclass Pass {\n    /**\n     * Constructs a new pass.\n     *\n     * @param - The name of this pass. Does not have to be unique.\n     * @param - The scene to render. The default scene contains a single mesh that fills the screen.\n     * @param - The camera. The default camera perfectly captures the screen mesh.\n     */\n    constructor(name, scene = new three_1.Scene(), camera = new three_1.OrthographicCamera(-1, 1, 1, -1, 0, 1)) {\n        this.name = name;\n        this.scene = scene;\n        this.camera = camera;\n        // [k: string]: any;\n        this.uniform = null;\n        /**\n         * A quad mesh that fills the screen.\n         */\n        this.quad = null;\n        /**\n         * Indicates whether the {@link EffectComposer} should swap the frame\n         * buffers after this pass has finished rendering.\n         *\n         * Set this to `false` if this pass doesn't render to the output buffer or\n         * the screen. Otherwise, the contents of the input buffer will be lost.\n         */\n        this.needsSwap = true;\n        /**\n         * Indicates whether the {@link EffectComposer} should prepare a depth\n         * texture for this pass.\n         *\n         * Set this to `true` if this pass relies on depth information from a\n         * preceding {@link RenderPass}.\n         */\n        this.needsDepthTexture = false;\n        /**\n         * Indicates whether this pass should render to screen.\n         */\n        this.renderToScreen = false;\n        /**\n         * Indicates whether this pass should be executed.\n         */\n        this.enabled = true;\n    }\n    /**\n     * Returns the current fullscreen material.\n     *\n     * @return The current fullscreen material(s), or null if there is none.\n     */\n    getFullscreenMaterial() {\n        return (this.quad !== null) ? this.quad.material : null;\n    }\n    /**\n     * Returns the current fullscreen material.\n     *\n     * @return The current fullscreen materials.\n     */\n    getFullscreenMaterials() {\n        return this.quad === null\n            ? []\n            : Array.isArray(this.quad.material)\n                ? this.quad.material\n                : [this.quad.material];\n    }\n    /**\n     * Returns the current fullscreen material.\n     *\n     * @return The current fullscreen materials.\n     */\n    getFullscreenMaterialsOfType(type) {\n        return this.getFullscreenMaterials()\n            .filter((mat) => mat instanceof type);\n    }\n    /**\n     * Sets the fullscreen material.\n     *\n     * The material will be assigned to the quad mesh that fills the screen. The\n     * screen quad will be created once a material is assigned via this method.\n     *\n     * @param - A fullscreen material.\n     */\n    setFullscreenMaterial(material) {\n        if (this.quad !== null) {\n            this.quad.material = material;\n        }\n        else {\n            const quad = new three_1.Mesh(new three_1.PlaneBufferGeometry(2, 2), material);\n            quad.frustumCulled = false;\n            if (this.scene !== null) {\n                this.scene.add(quad);\n                this.quad = quad;\n            }\n        }\n    }\n    /**\n     * Returns the current depth texture.\n     *\n     * @return The current depth texture, or null if there is none.\n     */\n    getDepthTexture() {\n        return null;\n    }\n    /**\n     * Sets the depth texture.\n     *\n     * You may override this method if your pass relies on the depth information\n     * of a preceding {@link RenderPass}.\n     *\n     * @param depthTexture - A depth texture.\n     * @param depthPacking - The depth packing. Default to `0`.\n     */\n    setDepthTexture(depthTexture, depthPacking = 0) { }\n    /**\n     * Updates this pass with the renderer's size.\n     *\n     * You may override this method in case you want to be informed about the main\n     * render size.\n     *\n     * The {@link EffectComposer} calls this method before this pass is\n     * initialized and every time its own size is updated.\n     *\n     * @param width - The renderer's width.\n     * @param height - The renderer's height.\n     * @example this.myRenderTarget.setSize(width, height);\n     */\n    setSize(width, height) { }\n    /**\n     * Performs initialization tasks.\n     *\n     * By overriding this method you gain access to the renderer. You'll also be\n     * able to configure your custom render targets to use the appropriate format\n     * (RGB or RGBA).\n     *\n     * The provided renderer can be used to warm up special off-screen render\n     * targets by performing a preliminary render operation.\n     *\n     * The {@link EffectComposer} calls this method when this pass is added to its\n     * queue, but not before its size has been set.\n     *\n     * @param renderer - The renderer.\n     * @param alpha - Whether the renderer uses the alpha channel or not.\n     * @example if(!alpha) { this.myRenderTarget.texture.format = RGBFormat; }\n     */\n    initialize(renderer, alpha) { }\n    /**\n     * Performs a shallow search for disposable properties and deletes them. The\n     * pass will be inoperative after this method was called!\n     *\n     * Disposable objects:\n     *  - WebGLRenderTarget\n     *  - Material\n     *  - Texture\n     *\n     * The {@link EffectComposer} calls this method when it is being destroyed.\n     * You may, however, use it independently to free memory when you are certain\n     * that you don't need this pass anymore.\n     */\n    dispose() {\n        this.getFullscreenMaterials().forEach(material => material.dispose());\n        /**\n         * @todo: Find a less sketchy (see: type safer) way of doing this\n         */\n        Object.keys(this)\n            .map(prop => this[prop])\n            .filter((value) => value !== null\n            && typeof value === 'object'\n            && typeof value.dispose === 'function')\n            .forEach(value => value.dispose());\n    }\n}\nexports.Pass = Pass;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PassName_1 = require(\"./PassName\");\nexports.PassName = PassName_1.PassName;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./lib\"));\n// export { AdaptiveLuminanceMaterial } from './AdaptiveLuminanceMaterial';\n// export { ColorEdgesMaterial } from './ColorEdgesMaterial';\n// export { ConvolutionMaterial, KernelSize } from './ConvolutionMaterial';\nconst CopyMaterial_1 = require(\"./CopyMaterial\");\nexports.CopyMaterial = CopyMaterial_1.CopyMaterial;\n// export { DepthComparisonMaterial } from './DepthComparisonMaterial';\nconst EffectMaterial_1 = require(\"./EffectMaterial\");\nexports.EffectMaterial = EffectMaterial_1.EffectMaterial;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./blending\"));\n__export(require(\"./lib\"));\n// export { BloomEffect } from './BloomEffect';\n// export { BokehEffect } from './BokehEffect';\n// export { BrightnessContrastEffect } from './BrightnessContrastEffect';\n// export { ColorAverageEffect } from './ColorAverageEffect';\n// export { ChromaticAberrationEffect } from './ChromaticAberrationEffect';\n// export { DepthEffect } from './DepthEffect';\n// export { DotScreenEffect } from './DotScreenEffect';\nvar Effect_1 = require(\"./Effect\");\nexports.Effect = Effect_1.Effect;\n// export { GammaCorrectionEffect } from './GammaCorrectionEffect';\n// export { GlitchEffect, GlitchMode } from './GlitchEffect';\n// export { GodRaysEffect } from './GodRaysEffect';\n// export { GridEffect } from './GridEffect';\n// export { HueSaturationEffect } from './HueSaturationEffect';\n// export { NoiseEffect } from './NoiseEffect';\n// export { OutlineEffect } from './OutlineEffect';\n// export { PixelationEffect } from './PixelationEffect';\n// export { RealisticBokehEffect } from './RealisticBokehEffect';\n// export { ScanlineEffect } from './ScanlineEffect';\n// export { ShockWaveEffect } from './ShockWaveEffect';\n// export { SepiaEffect } from './SepiaEffect';\n// export { SMAAEffect } from './SMAAEffect';\n// export { SSAOEffect } from './SSAOEffect';\n// export { TextureEffect } from './TextureEffect';\n// export { ToneMappingEffect } from './ToneMappingEffect';\n// export { VignetteEffect } from './VignetteEffect';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// export { BlurPass } from './BlurPass';\nvar ClearMaskPass_1 = require(\"./ClearMaskPass\");\nexports.ClearMaskPass = ClearMaskPass_1.ClearMaskPass;\nvar ClearPass_1 = require(\"./ClearPass\");\nexports.ClearPass = ClearPass_1.ClearPass;\n// export { DepthPass } from './DepthPass';\nvar EffectPass_1 = require(\"./EffectPass\");\nexports.EffectPass = EffectPass_1.EffectPass;\nvar MaskPass_1 = require(\"./MaskPass\");\nexports.MaskPass = MaskPass_1.MaskPass;\n// export { NormalPass } from './NormalPass';\nvar Pass_1 = require(\"./Pass\");\nexports.Pass = Pass_1.Pass;\nvar RenderPass_1 = require(\"./RenderPass\");\nexports.RenderPass = RenderPass_1.RenderPass;\n// export { SavePass } from './SavePass';\nvar ShaderPass_1 = require(\"./ShaderPass\");\nexports.ShaderPass = ShaderPass_1.ShaderPass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\nconst Pass_1 = require(\"./Pass\");\nconst lib_1 = require(\"./lib\");\n/**\n * A pass that clears the input buffer or the screen.\n *\n * You can prevent specific bits from being cleared by setting either the\n * `autoClearColor`, `autoClearStencil` or `autoClearDepth` properties of the renderer\n * to `false`.\n */\nclass ClearPass extends Pass_1.Pass {\n    /**\n     * Constructs a new clear pass.\n     * @param options - Additional options.\n     */\n    constructor(partialOptions = {}) {\n        super(lib_1.PassName.Clear);\n        const options = {\n            clearAlpha: 0,\n            clearColor: null,\n            ...partialOptions,\n        };\n        this.needsSwap = false;\n        this.clearColor = options.clearColor;\n        this.clearAlpha = options.clearAlpha;\n    }\n    /**\n     * Clears the input buffer or the screen.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     */\n    render(renderer, inputBuffer) {\n        const clearColor = this.clearColor;\n        let clearAlpha;\n        if (clearColor !== null) {\n            ClearPass.color.copy(renderer.getClearColor());\n            clearAlpha = renderer.getClearAlpha();\n            renderer.setClearColor(clearColor, this.clearAlpha);\n        }\n        renderer.setRenderTarget(this.renderToScreen ? undefined : inputBuffer);\n        renderer.clear();\n        if (clearColor !== null) {\n            renderer.setClearColor(ClearPass.color, clearAlpha);\n        }\n    }\n}\n/** Used for saving the original clear color of the renderer. */\nClearPass.color = new three_1.Color();\nexports.ClearPass = ClearPass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BlendFunction_1 = require(\"./BlendFunction\");\nexports.BlendFunction = BlendFunction_1.BlendFunction;\nvar BlendMode_1 = require(\"./BlendMode\");\nexports.BlendMode = BlendMode_1.BlendMode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A blend function enumeration.\n */\nvar BlendFunction;\n(function (BlendFunction) {\n    /** No blending. The effect will not be included in the final shader. */\n    BlendFunction[BlendFunction[\"SKIP\"] = 0] = \"SKIP\";\n    /** Additive blending. Fast, but may produce washed out results. */\n    BlendFunction[BlendFunction[\"ADD\"] = 1] = \"ADD\";\n    /** Alpha blending. Blends based on the alpha value of the new color. Opacity will be ignored. */\n    BlendFunction[BlendFunction[\"ALPHA\"] = 2] = \"ALPHA\";\n    /** Average blending. */\n    BlendFunction[BlendFunction[\"AVERAGE\"] = 3] = \"AVERAGE\";\n    /** Color dodge. */\n    BlendFunction[BlendFunction[\"COLOR_BURN\"] = 4] = \"COLOR_BURN\";\n    /** Color burn. */\n    BlendFunction[BlendFunction[\"COLOR_DODGE\"] = 5] = \"COLOR_DODGE\";\n    /** Prioritize darker colors. */\n    BlendFunction[BlendFunction[\"DARKEN\"] = 6] = \"DARKEN\";\n    /** Color difference. */\n    BlendFunction[BlendFunction[\"DIFFERENCE\"] = 7] = \"DIFFERENCE\";\n    /** Color exclusion. */\n    BlendFunction[BlendFunction[\"EXCLUSION\"] = 8] = \"EXCLUSION\";\n    /** Prioritize lighter colors. */\n    BlendFunction[BlendFunction[\"LIGHTEN\"] = 9] = \"LIGHTEN\";\n    /** Color multiplication. */\n    BlendFunction[BlendFunction[\"MULTIPLY\"] = 10] = \"MULTIPLY\";\n    /** Color division. */\n    BlendFunction[BlendFunction[\"DIVIDE\"] = 11] = \"DIVIDE\";\n    /** Color negation. */\n    BlendFunction[BlendFunction[\"NEGATION\"] = 12] = \"NEGATION\";\n    /** Normal blending. The new color overwrites the old one. */\n    BlendFunction[BlendFunction[\"NORMAL\"] = 13] = \"NORMAL\";\n    /** Color overlay. */\n    BlendFunction[BlendFunction[\"OVERLAY\"] = 14] = \"OVERLAY\";\n    /** Color reflection. */\n    BlendFunction[BlendFunction[\"REFLECT\"] = 15] = \"REFLECT\";\n    /** Screen blending. The two colors are effectively projected on a white screen simultaneously. */\n    BlendFunction[BlendFunction[\"SCREEN\"] = 16] = \"SCREEN\";\n    /** Soft light blending. */\n    BlendFunction[BlendFunction[\"SOFT_LIGHT\"] = 17] = \"SOFT_LIGHT\";\n    /** Color subtraction. */\n    BlendFunction[BlendFunction[\"SUBTRACT\"] = 18] = \"SUBTRACT\";\n})(BlendFunction = exports.BlendFunction || (exports.BlendFunction = {}));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./effects.types\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Section_1 = require(\"./Section\");\nexports.Section = Section_1.Section;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Finds and collects substrings that match the given regular expression.\n *\n * @param regExp - A regular expression.\n * @param string - A string.\n * @return The matching substrings.\n */\nfunction findSubstrings(regExp, str) {\n    const substrings = [];\n    let result;\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((result = regExp.exec(str)) !== null) {\n        substrings.push(result[1]);\n    }\n    return substrings;\n}\nexports.findSubstrings = findSubstrings;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Prefixes substrings within the given strings.\n *\n * @param prefix - A prefix.\n * @param substrings - The substrings.\n * @param strings - A collection of named strings.\n */\nfunction prefixSubstrings(prefix, substrings, strings) {\n    let prefixed;\n    let regExp;\n    for (const substring of substrings) {\n        // tslint:disable-next-line:prefer-template\n        prefixed = '$1' + prefix + substring.charAt(0).toUpperCase() + substring.slice(1);\n        // tslint:disable-next-line:prefer-template\n        regExp = new RegExp('([^\\\\.])(\\\\b' + substring + '\\\\b)', 'g');\n        for (const entry of strings.entries()) {\n            if (entry[1] !== null) {\n                strings.set(entry[0], entry[1].replace(regExp, prefixed));\n            }\n        }\n    }\n}\nexports.prefixSubstrings = prefixSubstrings;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./core\"));\n__export(require(\"./effects\"));\n// export * from './images';\n__export(require(\"./materials\"));\n__export(require(\"./passes\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EffectComposer_1 = require(\"./EffectComposer\");\nexports.EffectComposer = EffectComposer_1.EffectComposer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\nconst passes_1 = require(\"../passes\");\nconst materials_1 = require(\"../materials\");\n/**\n * The EffectComposer may be used in place of a normal WebGLRenderer.\n *\n * The auto clear behaviour of the provided renderer will be disabled to prevent\n * unnecessary clear operations.\n *\n * It is common practice to use a {@link RenderPass} as the first pass to\n * automatically clear the screen and render the scene to a texture for further\n * processing.\n */\nclass EffectComposer {\n    /**\n     * Constructs a new effect composer.\n     * @param renderer- The renderer that should be used.\n     * @param options - The options.\n     */\n    constructor(renderer = null, partialOptions = {}) {\n        this.renderer = renderer;\n        /**\n         * The input buffer.\n         *\n         * Reading from and writing to the same render target should be avoided.\n         * Therefore, two seperate yet identical buffers are used.\n         */\n        this.inputBuffer = null;\n        /**\n         * The output buffer.\n         */\n        this.outputBuffer = null;\n        /**\n         * A copy pass used for copying masked scenes.\n         */\n        this.copyPass = new passes_1.ShaderPass(new materials_1.CopyMaterial());\n        /**\n         * The passes.\n         */\n        this.passes = [];\n        const options = {\n            depthBuffer: true,\n            stencilBuffer: false,\n            ...partialOptions,\n        };\n        if (this.renderer !== null) {\n            this.renderer.autoClear = false;\n            this.inputBuffer = this.createBuffer(options.depthBuffer, options.stencilBuffer);\n            this.outputBuffer = this.inputBuffer.clone();\n        }\n    }\n    /**\n     * Replaces the current renderer with the given one. The DOM element of the\n     * current renderer will automatically be removed from its parent node and the\n     * DOM element of the new renderer will take its place.\n     *\n     * The auto clear mechanism of the provided renderer will be disabled.\n     *\n     * @param renderer New renderer.\n     * @return The old renderer.\n     */\n    replaceRenderer(renderer) {\n        const oldRenderer = this.renderer;\n        let parent;\n        let oldSize;\n        let newSize;\n        if (oldRenderer !== null && oldRenderer !== renderer) {\n            this.renderer = renderer;\n            this.renderer.autoClear = false;\n            parent = oldRenderer.domElement.parentNode;\n            oldSize = oldRenderer.getSize();\n            newSize = renderer.getSize();\n            if (parent !== null) {\n                parent.removeChild(oldRenderer.domElement);\n                parent.appendChild(renderer.domElement);\n            }\n            if (oldSize.width !== newSize.width || oldSize.height !== newSize.height) {\n                this.setSize();\n            }\n        }\n        return oldRenderer;\n    }\n    /**\n     * Retrieves the most relevant depth texture for the pass at the given index.\n     * @param index - The index of the pass that needs a depth texture.\n     * @return The depth texture, or null if there is none.\n     */\n    getDepthTexture(index) {\n        const passes = this.passes;\n        let depthTexture = null;\n        let inputBuffer = true;\n        let i;\n        let pass;\n        for (i = 0; i < index; ++i) {\n            pass = passes[i];\n            if (pass.needsSwap) {\n                inputBuffer = !inputBuffer;\n            }\n            else if (pass instanceof passes_1.RenderPass) {\n                depthTexture = (inputBuffer ? this.inputBuffer : this.outputBuffer).depthTexture;\n            }\n        }\n        return depthTexture;\n    }\n    /**\n     * Creates two depth texture attachments, one for the input buffer and one for\n     * the output buffer.\n     *\n     * Depth will be written to the depth texture when something is rendered into\n     * the respective render target and the involved materials have `depthWrite`\n     * enabled. Under normal circumstances, only a {@link RenderPass} will render\n     * depth.\n     *\n     * When a shader reads from a depth texture and writes to a render target that\n     * uses the same depth texture attachment, the depth information will be lost.\n     * This happens even if `depthWrite` is disabled. For that reason, two\n     * separate depth textures are used.\n     */\n    createDepthTexture(width, height) {\n        const depthTexture = new three_1.DepthTexture(width, height);\n        if (this.inputBuffer.stencilBuffer) {\n            depthTexture.format = three_1.DepthStencilFormat;\n            depthTexture.type = three_1.UnsignedInt248Type;\n        }\n        this.inputBuffer.depthTexture = depthTexture;\n        this.outputBuffer.depthTexture = depthTexture.clone();\n    }\n    /**\n     * Creates a new render target by replicating the renderer's canvas.\n     *\n     * The created render target uses a linear filter for texel minification and\n     * magnification. Its render texture format depends on whether the renderer\n     * uses the alpha channel. Mipmaps are disabled.\n     *\n     * @param depthBuffer - Whether the render target should have a depth buffer.\n     * @param stencilBuffer - Whether the render target should have a stencil buffer.\n     * @return A new render target that equals the renderer's canvas.\n     */\n    createBuffer(depthBuffer, stencilBuffer) {\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        const alpha = this.renderer.context.getContextAttributes().alpha;\n        const renderTarget = new three_1.WebGLRenderTarget(drawingBufferSize.width, drawingBufferSize.height, {\n            minFilter: three_1.LinearFilter,\n            magFilter: three_1.LinearFilter,\n            format: alpha ? three_1.RGBAFormat : three_1.RGBFormat,\n            depthBuffer,\n            stencilBuffer,\n        });\n        renderTarget.texture.name = 'EffectComposer.Buffer';\n        renderTarget.texture.generateMipmaps = false;\n        return renderTarget;\n    }\n    /**\n     * Adds a pass, optionally at a specific index.\n     *\n     * @param pass - A new pass.\n     * @param index - An index at which the pass should be inserted.\n     */\n    addPass(pass, index) {\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        pass.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        pass.initialize(this.renderer, this.renderer.context.getContextAttributes().alpha);\n        if (index !== undefined) {\n            this.passes.splice(index, 0, pass);\n        }\n        else {\n            index = this.passes.push(pass) - 1;\n        }\n        if (pass.needsDepthTexture) {\n            if (this.inputBuffer.depthTexture === null) {\n                this.createDepthTexture(drawingBufferSize.width, drawingBufferSize.height);\n            }\n            pass.setDepthTexture(this.getDepthTexture(index));\n        }\n    }\n    /**\n     * Removes a pass.\n     */\n    removePass(pass) {\n        this.passes.splice(this.passes.indexOf(pass), 1);\n    }\n    /**\n     * Renders all enabled passes in the order in which they were added.\n     * @param delta - The time between the last frame and the current one in seconds.\n     */\n    render(delta) {\n        let inputBuffer = this.inputBuffer;\n        let outputBuffer = this.outputBuffer;\n        let stencilTest = false;\n        let context;\n        let state;\n        let buffer;\n        for (const pass of this.passes) {\n            if (pass.enabled) {\n                pass.render(this.renderer, inputBuffer, outputBuffer, delta, stencilTest);\n                if (pass.needsSwap) {\n                    if (stencilTest) {\n                        this.copyPass.renderToScreen = pass.renderToScreen;\n                        context = this.renderer.context;\n                        state = this.renderer.state;\n                        // Preserve the unaffected pixels.\n                        state.buffers.stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n                        this.copyPass.render(this.renderer, inputBuffer, outputBuffer);\n                        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n                    }\n                    buffer = inputBuffer;\n                    inputBuffer = outputBuffer;\n                    outputBuffer = buffer;\n                }\n                if (pass instanceof passes_1.MaskPass) {\n                    stencilTest = true;\n                }\n                else if (pass instanceof passes_1.ClearMaskPass) {\n                    stencilTest = false;\n                }\n            }\n        }\n    }\n    /**\n     * Sets the size of the buffers and the renderer's output canvas.\n     *\n     * Every pass will be informed of the new size. It's up to each pass how that\n     * information is used.\n     *\n     * If no width or height is specified, the render targets and passes will be\n     * updated with the current size of the renderer.\n     */\n    setSize(width, height) {\n        let size;\n        if (width === undefined || height === undefined) {\n            size = this.renderer.getSize();\n            width = size.width;\n            height = size.height;\n        }\n        // Update the logical render size.\n        this.renderer.setSize(width, height);\n        // The drawing buffer size takes the device pixel ratio into account.\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        this.inputBuffer.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        this.outputBuffer.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        for (const pass of this.passes) {\n            pass.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        }\n    }\n    /**\n     * Resets this composer by deleting all passes and creating new buffers.\n     */\n    reset() {\n        const renderTarget = this.createBuffer(this.inputBuffer.depthBuffer, this.inputBuffer.stencilBuffer);\n        this.dispose();\n        // Reanimate.\n        this.inputBuffer = renderTarget;\n        this.outputBuffer = renderTarget.clone();\n        this.copyPass = new passes_1.ShaderPass(new materials_1.CopyMaterial());\n    }\n    /**\n     * Destroys this composer and all passes.\n     *\n     * This method deallocates all disposable objects created by the passes. It\n     * also deletes the main frame buffers of this composer.\n     */\n    dispose() {\n        for (const pass of this.passes)\n            pass.dispose();\n        this.passes = [];\n        if (this.inputBuffer !== null) {\n            this.inputBuffer.dispose();\n            this.inputBuffer = null;\n        }\n        if (this.outputBuffer !== null) {\n            this.outputBuffer.dispose();\n            this.outputBuffer = null;\n        }\n        this.copyPass.dispose();\n    }\n}\nexports.EffectComposer = EffectComposer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lib_1 = require(\"./lib\");\nconst Pass_1 = require(\"./Pass\");\n/**\n * A pass that disables the stencil test.\n */\nclass ClearMaskPass extends Pass_1.Pass {\n    constructor() {\n        super(lib_1.PassName.ClearMask);\n        this.needsSwap = false;\n    }\n    /**\n     * Disables the global stencil test.\n     */\n    render(renderer) {\n        renderer.state.buffers.stencil.setTest(false);\n    }\n}\nexports.ClearMaskPass = ClearMaskPass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PassName;\n(function (PassName) {\n    PassName[\"Clear\"] = \"clear\";\n    PassName[\"ClearMask\"] = \"clearMask\";\n    PassName[\"Effect\"] = \"effect\";\n    PassName[\"Mask\"] = \"mask\";\n    PassName[\"Render\"] = \"render\";\n    PassName[\"Shader\"] = \"shader\";\n})(PassName = exports.PassName || (exports.PassName = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst effects_1 = require(\"../effects\");\nconst materials_1 = require(\"../materials\");\nconst Pass_1 = require(\"./Pass\");\nconst lib_1 = require(\"./lib\");\nconst utils_1 = require(\"./utils\");\n/**\n * An effect pass.\n *\n * Use this pass to combine {@link Effect} instances.\n */\nclass EffectPass extends Pass_1.Pass {\n    /**\n     * Constructs a new effect pass.\n     *\n     * The provided effects will be organized and merged for optimal performance.\n     *\n     * @param camera - The main camera. The camera's type and settings will be available to all effects.\n     * @param effects - The effects that will be rendered by this pass.\n     */\n    constructor(mainCamera, ...effects) {\n        super(lib_1.PassName.Effect);\n        this.mainCamera = mainCamera;\n        /**\n         * Indicates whether this pass should skip rendering.\n         * Effects will still be updated, even if this flag is true.\n         */\n        this.skipRendering = false;\n        /**\n         * Indicates whether dithering is enabled.\n         */\n        this.quantize = false;\n        /**\n         * The amount of shader uniforms that this pass uses.\n         */\n        this.uniforms = 0;\n        /**\n         * The amount of shader varyings that this pass uses.\n         */\n        this.varyings = 0;\n        /**\n         * A time offset.\n         * Elapsed time will start at this value.\n         */\n        this.minTime = 1.0;\n        /**\n         * The maximum time.\n         * If the elapsed time exceeds this value, it will be reset.\n         */\n        this.maxTime = 1e3;\n        this.effects = effects.sort((a, b) => (b.attributes - a.attributes));\n        this.setFullscreenMaterial(this.createMaterial());\n    }\n    /**\n     * Indicates whether dithering is enabled.\n     * Color quantization reduces banding artifacts but degrades performance.\n     */\n    get dithering() {\n        return this.quantize;\n    }\n    /**\n     * Enables or disables dithering.\n     * Note that some effects like bloom have their own dithering setting.\n     */\n    set dithering(value) {\n        if (this.quantize !== value) {\n            this.getFullscreenMaterials().forEach(material => {\n                material.dithering = value;\n                material.needsUpdate = true;\n            });\n            this.quantize = value;\n        }\n    }\n    /**\n     * Creates a compound shader material.\n     *\n     * @return The new material.\n     */\n    createMaterial() {\n        const blendRegExp = /\\bblend\\b/g;\n        const shaderParts = new Map([\n            [materials_1.Section.FRAGMENT_HEAD, ''],\n            [materials_1.Section.FRAGMENT_MAIN_UV, ''],\n            [materials_1.Section.FRAGMENT_MAIN_IMAGE, ''],\n            [materials_1.Section.VERTEX_HEAD, ''],\n            [materials_1.Section.VERTEX_MAIN_SUPPORT, ''],\n        ]);\n        const blendModes = new Map();\n        const defines = new Map();\n        const uniforms = new Map();\n        const extensions = new Set();\n        let id = 0;\n        let varyings = 0;\n        let attributes = 0;\n        let transformedUv = false;\n        let readDepth = false;\n        let result;\n        for (const effect of this.effects) {\n            if (effect.blendMode.blendFunction === effects_1.BlendFunction.SKIP) {\n                continue;\n            }\n            else if ((attributes & effects_1.EffectAttribute.CONVOLUTION) !== 0 && (effect.attributes & effects_1.EffectAttribute.CONVOLUTION) !== 0) {\n                console.error('Convolution effects cannot be merged', effect);\n            }\n            else {\n                attributes |= effect.attributes;\n                result = utils_1.integrateEffect(('e' + id++), effect, shaderParts, blendModes, defines, uniforms, attributes);\n                varyings += result.varyings.length;\n                transformedUv = transformedUv || result.transformedUv;\n                readDepth = readDepth || result.readDepth;\n                if (effect.extensions !== null) {\n                    // Collect the WebGL extensions that are required by this effect.\n                    for (const extension of effect.extensions) {\n                        extensions.add(extension);\n                    }\n                }\n            }\n        }\n        // Integrate the relevant blend functions.\n        for (const blendMode of blendModes.values()) {\n            shaderParts.set(materials_1.Section.FRAGMENT_HEAD, `${shaderParts.get(materials_1.Section.FRAGMENT_HEAD)}${blendMode.getShaderCode().replace(blendRegExp, 'blend' + blendMode.blendFunction)}\\n`);\n        }\n        // Check if any effect relies on depth.\n        if ((attributes & effects_1.EffectAttribute.DEPTH) !== 0) {\n            // Only read depth if any effect actually uses this information.\n            if (readDepth) {\n                shaderParts.set(materials_1.Section.FRAGMENT_MAIN_IMAGE, `float depth = readDepth(UV);\\n\\n\\t${shaderParts.get(materials_1.Section.FRAGMENT_MAIN_IMAGE)}`);\n            }\n            this.needsDepthTexture = true;\n        }\n        // Check if any effect transforms UVs in the fragment shader.\n        if (transformedUv) {\n            shaderParts.set(materials_1.Section.FRAGMENT_MAIN_UV, `vec2 transformedUv = vUv;\\n${shaderParts.get(materials_1.Section.FRAGMENT_MAIN_UV)}`);\n            defines.set('UV', 'transformedUv');\n        }\n        else {\n            defines.set('UV', 'vUv');\n        }\n        shaderParts.forEach((value, key, map) => map.set(key, value.trim()));\n        this.uniforms = uniforms.size;\n        this.varyings = varyings;\n        this.skipRendering = (id === 0);\n        this.needsSwap = !this.skipRendering;\n        const material = new materials_1.EffectMaterial(shaderParts, defines, uniforms, this.mainCamera, this.dithering);\n        if (extensions.size > 0) {\n            // Enable required WebGL extensions.\n            for (const extension of extensions) {\n                material.extensions[extension] = true;\n            }\n        }\n        return material;\n    }\n    /**\n     * Destroys the current fullscreen shader material and builds a new one.\n     *\n     * Warning: This method performs a relatively expensive shader recompilation.\n     */\n    recompile() {\n        let width = 0;\n        let height = 0;\n        let depthTexture = null;\n        let depthPacking = 0;\n        this.getFullscreenMaterials()\n            .filter((mat) => mat instanceof materials_1.EffectMaterial)\n            .forEach(material => {\n            const resolution = material.uniforms.resolution.value;\n            width = resolution.x;\n            height = resolution.y;\n            depthTexture = material.uniforms.depthBuffer.value;\n            depthPacking = material.depthPacking;\n            material.dispose();\n            this.uniforms = 0;\n            this.varyings = 0;\n        });\n        const newMaterial = this.createMaterial();\n        newMaterial.setSize(width, height);\n        this.setFullscreenMaterial(newMaterial);\n        this.setDepthTexture(depthTexture, depthPacking);\n    }\n    /**\n     * Returns the current depth texture.\n     *\n     * @return The current depth texture, or null if there is none.\n     */\n    getDepthTexture() {\n        const materials = this.getFullscreenMaterials();\n        return materials.length > 0 ? materials[0].uniforms.depthBuffer.value : null;\n    }\n    /**\n     * Sets the depth texture.\n     *\n     * @param depthTexture - A depth texture.\n     * @param depthPacking - The depth packing.\n     */\n    setDepthTexture(depthTexture, depthPacking = 0) {\n        this.getFullscreenMaterialsOfType(materials_1.EffectMaterial).forEach(material => {\n            material.uniforms.depthBuffer.value = depthTexture;\n            material.depthPacking = depthPacking;\n            material.needsUpdate = true;\n        });\n        for (const effect of this.effects) {\n            effect.setDepthTexture(depthTexture, depthPacking);\n        }\n        this.needsDepthTexture = (depthTexture === null);\n    }\n    /**\n     * Renders the effect.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\n     * @param delta - The time between the last frame and the current one in seconds.\n     */\n    render(renderer, inputBuffer, outputBuffer, delta = 1) {\n        for (const effect of this.effects) {\n            effect.update(renderer, inputBuffer, delta);\n        }\n        if (!this.skipRendering || this.renderToScreen) {\n            this.getFullscreenMaterials().forEach(material => {\n                const time = material.uniforms.time.value + delta;\n                material.uniforms.inputBuffer.value = inputBuffer.texture;\n                material.uniforms.time.value = (time <= this.maxTime) ? time : this.minTime;\n                renderer.render(this.scene, this.camera, this.renderToScreen ? undefined : outputBuffer);\n            });\n        }\n    }\n    /**\n     * Updates the size of this pass.\n     *\n     * @param width - The width.\n     * @param height - The height.\n     */\n    setSize(width, height) {\n        this.getFullscreenMaterials().forEach(material => {\n            if ('setSize' in material)\n                material.setSize(width, height);\n        });\n        for (const effect of this.effects) {\n            effect.setSize(width, height);\n        }\n    }\n    /**\n     * Performs initialization tasks.\n     *\n     * @param renderer - The renderer.\n     * @param alpha - Whether the renderer uses the alpha channel or not.\n     */\n    initialize(renderer, alpha) {\n        const capabilities = renderer.capabilities;\n        let max = Math.min(capabilities.maxFragmentUniforms, capabilities.maxVertexUniforms);\n        if (this.uniforms > max) {\n            console.warn(`The current rendering context doesn't support more than ${max} uniforms, but ${this.uniforms} were defined`);\n        }\n        max = capabilities.maxVaryings;\n        if (this.varyings > max) {\n            console.warn(`The current rendering context doesn't support more than ${max} varyings, but ${this.varyings} were defined`);\n        }\n        for (const effect of this.effects) {\n            effect.initialize(renderer, alpha);\n        }\n    }\n    /**\n     * Deletes disposable objects.\n     *\n     * This pass will be inoperative after this method was called!\n     */\n    dispose() {\n        super.dispose();\n        for (const effect of this.effects) {\n            effect.dispose();\n        }\n    }\n}\nexports.EffectPass = EffectPass;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\nconst BlendFunction_1 = require(\"./BlendFunction\");\nconst shader_frag_1 = __importDefault(require(\"./glsl/add/shader.frag\"));\nconst shader_frag_2 = __importDefault(require(\"./glsl/alpha/shader.frag\"));\nconst shader_frag_3 = __importDefault(require(\"./glsl/average/shader.frag\"));\nconst shader_frag_4 = __importDefault(require(\"./glsl/color-burn/shader.frag\"));\nconst shader_frag_5 = __importDefault(require(\"./glsl/color-dodge/shader.frag\"));\nconst shader_frag_6 = __importDefault(require(\"./glsl/darken/shader.frag\"));\nconst shader_frag_7 = __importDefault(require(\"./glsl/difference/shader.frag\"));\nconst shader_frag_8 = __importDefault(require(\"./glsl/exclusion/shader.frag\"));\nconst shader_frag_9 = __importDefault(require(\"./glsl/lighten/shader.frag\"));\nconst shader_frag_10 = __importDefault(require(\"./glsl/multiply/shader.frag\"));\nconst shader_frag_11 = __importDefault(require(\"./glsl/divide/shader.frag\"));\nconst shader_frag_12 = __importDefault(require(\"./glsl/negation/shader.frag\"));\nconst shader_frag_13 = __importDefault(require(\"./glsl/normal/shader.frag\"));\nconst shader_frag_14 = __importDefault(require(\"./glsl/overlay/shader.frag\"));\nconst shader_frag_15 = __importDefault(require(\"./glsl/reflect/shader.frag\"));\nconst shader_frag_16 = __importDefault(require(\"./glsl/screen/shader.frag\"));\nconst shader_frag_17 = __importDefault(require(\"./glsl/soft-light/shader.frag\"));\nconst shader_frag_18 = __importDefault(require(\"./glsl/subtract/shader.frag\"));\n/** A blend mode. */\nclass BlendMode {\n    /**\n     * Constructs a new blend mode.\n     *\n     * @param blendFunction - The blend function to use.\n     * @param opacity - The opacity of the color that will be blended with the base color.\n     */\n    constructor(blendFunction, opacity = 1.0) {\n        this.blendFunction = blendFunction;\n        this.opacity = new three_1.Uniform(opacity);\n    }\n    /** Returns the blend function shader code, or null for `SKIP` blend function. */\n    getShaderCode() {\n        switch (this.blendFunction) {\n            case BlendFunction_1.BlendFunction.SKIP: return null;\n            case BlendFunction_1.BlendFunction.ADD: return shader_frag_1.default;\n            case BlendFunction_1.BlendFunction.ALPHA: return shader_frag_2.default;\n            case BlendFunction_1.BlendFunction.AVERAGE: return shader_frag_3.default;\n            case BlendFunction_1.BlendFunction.COLOR_BURN: return shader_frag_4.default;\n            case BlendFunction_1.BlendFunction.COLOR_DODGE: return shader_frag_5.default;\n            case BlendFunction_1.BlendFunction.DARKEN: return shader_frag_6.default;\n            case BlendFunction_1.BlendFunction.DIFFERENCE: return shader_frag_7.default;\n            case BlendFunction_1.BlendFunction.EXCLUSION: return shader_frag_8.default;\n            case BlendFunction_1.BlendFunction.LIGHTEN: return shader_frag_9.default;\n            case BlendFunction_1.BlendFunction.MULTIPLY: return shader_frag_10.default;\n            case BlendFunction_1.BlendFunction.DIVIDE: return shader_frag_11.default;\n            case BlendFunction_1.BlendFunction.NEGATION: return shader_frag_12.default;\n            case BlendFunction_1.BlendFunction.NORMAL: return shader_frag_13.default;\n            case BlendFunction_1.BlendFunction.OVERLAY: return shader_frag_14.default;\n            case BlendFunction_1.BlendFunction.REFLECT: return shader_frag_15.default;\n            case BlendFunction_1.BlendFunction.SCREEN: return shader_frag_16.default;\n            case BlendFunction_1.BlendFunction.SOFT_LIGHT: return shader_frag_17.default;\n            case BlendFunction_1.BlendFunction.SUBTRACT: return shader_frag_18.default;\n        }\n    }\n}\nexports.BlendMode = BlendMode;\n","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn min(x + y, 1.0) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, y.a), x.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (x + y) * 0.5 * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 0.0) ? y : max(1.0 - (1.0 - x) / y, 0.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 1.0) ? y : min(x / (1.0 - y), 1.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn min(x, y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn abs(x - y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (x + y - 2.0 * x * y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn max(x, y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn x * y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y > 0.0) ? min(x / y, 1.0) : 1.0;\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (1.0 - abs(1.0 - x - y)) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (x < 0.5) ? (2.0 * x * y) : (1.0 - 2.0 * (1.0 - x) * (1.0 - y));\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 1.0) ? y : min(x * x / (1.0 - y), 1.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (1.0 - (1.0 - x) * (1.0 - y)) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y < 0.5) ?\\n\\t\\t(2.0 * x * y + x * x * (1.0 - 2.0 * y)) :\\n\\t\\t(sqrt(x) * (2.0 * y - 1.0) + 2.0 * x * (1.0 - y));\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn max(x + y - 1.0, 0.0) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EffectName;\n(function (EffectName) {\n    EffectName[\"Glitch\"] = \"GlitchEffect\";\n})(EffectName = exports.EffectName || (exports.EffectName = {}));\n/**\n * An enumeration of effect attributes.\n * Attributes can be concatenated using the bitwise OR operator.\n *\n * @example\n * const attributes = EffectAttribute.CONVOLUTION | EffectAttribute.DEPTH;\n */\nvar EffectAttribute;\n(function (EffectAttribute) {\n    /* No attributes. Most effects don't need to specify any attributes. */\n    EffectAttribute[EffectAttribute[\"NONE\"] = 0] = \"NONE\";\n    /** Describes effects that require a depth texture. */\n    EffectAttribute[EffectAttribute[\"DEPTH\"] = 1] = \"DEPTH\";\n    /**\n     * Describes effects that fetch additional samples from the input buffer.\n     * There cannot be more than one effect with this attribute per {@link EffectPass}.\n     */\n    EffectAttribute[EffectAttribute[\"CONVOLUTION\"] = 2] = \"CONVOLUTION\";\n})(EffectAttribute = exports.EffectAttribute || (exports.EffectAttribute = {}));\n/** An enumeration of WebGL extensions. */\nvar WebGLExtension;\n(function (WebGLExtension) {\n    /** Enables derivatives by adding the functions dFdx, dFdy and fwidth. */\n    WebGLExtension[\"DERIVATIVES\"] = \"derivatives\";\n    /** Enables gl_FragDepthEXT to set a depth value of a fragment from within the fragment shader. */\n    WebGLExtension[\"FRAG_DEPTH\"] = \"fragDepth\";\n    /** Enables multiple render targets (MRT) support. */\n    WebGLExtension[\"DRAW_BUFFERS\"] = \"drawBuffers\";\n    /** Enables explicit control of texture LOD. */\n    WebGLExtension[\"SHADER_TEXTURE_LOD\"] = \"shaderTextureLOD\";\n})(WebGLExtension = exports.WebGLExtension || (exports.WebGLExtension = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst blending_1 = require(\"./blending\");\nconst lib_1 = require(\"./lib\");\n/**\n * An abstract effect.\n * Effects can be combined using the {@link EffectPass}.\n */\nclass Effect {\n    constructor(name, fragmentShader, partialOptions = {}) {\n        this.name = name;\n        this.fragmentShader = fragmentShader;\n        this.vertexShader = null;\n        const settings = {\n            attributes: lib_1.EffectAttribute.NONE,\n            blendFunction: blending_1.BlendFunction.SCREEN,\n            defines: new Map(),\n            uniforms: new Map(),\n            extensions: new Set(),\n            vertexShader: null,\n            ...partialOptions,\n        };\n        this.attributes = settings.attributes;\n        this.vertexShader = settings.vertexShader;\n        this.defines = settings.defines;\n        this.uniforms = settings.uniforms;\n        this.extensions = settings.extensions;\n        this.blendMode = new blending_1.BlendMode(settings.blendFunction);\n    }\n    /**\n     * Sets the depth texture.\n     *\n     * You may override this method if your effect requires direct access to the\n     * depth texture that is bound to the associated {@link EffectPass}.\n     */\n    setDepthTexture(depthTexture, depthPacking = 0) { }\n    /**\n     * Updates the effect by performing supporting operations.\n     *\n     * This method is called by the {@link EffectPass} right before the main\n     * fullscreen render operation, even if the blend function is set to `SKIP`.\n     *\n     * You may override this method if you need to render additional off-screen\n     * textures or update custom uniforms.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param delta - The time between the last frame and the current one in seconds.\n     */\n    update(renderer, inputBuffer, delta = 0) { }\n    /**\n     * Updates the size of this effect.\n     *\n     * You may override this method in case you want to be informed about the main\n     * render size.\n     *\n     * The {@link EffectPass} calls this method before this effect is initialized\n     * and every time its own size is updated.\n     */\n    setSize(width, height) { }\n    /**\n     * Performs initialization tasks.\n     *\n     * By overriding this method you gain access to the renderer. You'll also be\n     * able to configure your custom render targets to use the appropriate format\n     * (RGB or RGBA).\n     *\n     * The provided renderer can be used to warm up special off-screen render\n     * targets by performing a preliminary render operation.\n     *\n     * The {@link EffectPass} calls this method during its own initialization\n     * which happens after the size has been set.\n     *\n     * @param renderer - The renderer.\n     * @param alpha - Whether the renderer uses the alpha channel or not.\n     * @example if(!alpha) this.myRenderTarget.texture.format = RGBFormat;\n     */\n    initialize(renderer, alpha) { }\n    /**\n     * Performs a shallow search for properties that define a dispose method and\n     * deletes them. The effect will be inoperative after this method was called!\n     *\n     * Disposable objects:\n     *  - render targets\n     *  - materials\n     *  - textures\n     *\n     * The {@link EffectPass} calls this method when it is being destroyed. Do not\n     * call this method directly.\n     */\n    dispose() {\n        for (const key of Object.keys(this)) {\n            if (this[key] !== null && typeof this[key].dispose === 'function') {\n                this[key].dispose();\n                this[key] = null;\n            }\n        }\n    }\n}\nexports.Effect = Effect;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An enumeration of shader code placeholders.\n */\nvar Section;\n(function (Section) {\n    /**  A placeholder for function and variable declarations inside the fragment shader. */\n    Section[\"FRAGMENT_HEAD\"] = \"FRAGMENT_HEAD\";\n    /**  A placeholder for UV transformations inside the fragment shader. */\n    Section[\"FRAGMENT_MAIN_UV\"] = \"FRAGMENT_MAIN_UV\";\n    /**  A placeholder for color calculations inside the fragment shader. */\n    Section[\"FRAGMENT_MAIN_IMAGE\"] = \"FRAGMENT_MAIN_IMAGE\";\n    /**  A placeholder for function and variable declarations inside the vertex shader. */\n    Section[\"VERTEX_HEAD\"] = \"VERTEX_HEAD\";\n    /**  A placeholder for supporting calculations inside the vertex shader. */\n    Section[\"VERTEX_MAIN_SUPPORT\"] = \"VERTEX_MAIN_SUPPORT\";\n})(Section = exports.Section || (exports.Section = {}));\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\nconst shader_frag_1 = __importDefault(require(\"./glsl/copy/shader.frag\"));\nconst shader_vert_1 = __importDefault(require(\"./glsl/common/shader.vert\"));\n/**\n * A simple copy shader material.\n */\nclass CopyMaterial extends three_1.ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                inputBuffer: new three_1.Uniform(null),\n                opacity: new three_1.Uniform(1.0),\n            },\n            fragmentShader: shader_frag_1.default,\n            vertexShader: shader_vert_1.default,\n            depthWrite: false,\n            depthTest: false,\n        });\n    }\n}\nexports.CopyMaterial = CopyMaterial;\n","module.exports = \"uniform sampler2D inputBuffer;\\nuniform float opacity;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tvec4 texel = texture2D(inputBuffer, vUv);\\n\\tgl_FragColor = opacity * texel;\\n\\n}\\n\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tvUv = uv;\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\\n}\\n\"","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\nconst lib_1 = require(\"./lib\");\nconst shader_frag_1 = __importDefault(require(\"./glsl/effect/shader.frag\"));\nconst shader_vert_1 = __importDefault(require(\"./glsl/effect/shader.vert\"));\n/**\n * An effect material for compound shaders.\n *\n * This material supports dithering.\n */\nclass EffectMaterial extends three_1.ShaderMaterial {\n    /**\n     * Constructs a new effect material.\n     *\n     * @param shaderParts - A collection of shader snippets.\n     * @param defines - A collection of preprocessor macro definitions.\n     * @param uniforms - A collection of uniforms.\n     * @param camera - A camera.\n     * @param dithering - Whether dithering should be enabled.\n     */\n    constructor(shaderParts, defines, uniforms, camera = null, dithering = false) {\n        super({\n            defines: {\n                DEPTH_PACKING: '0',\n            },\n            uniforms: {\n                inputBuffer: new three_1.Uniform(null),\n                depthBuffer: new three_1.Uniform(null),\n                resolution: new three_1.Uniform(new three_1.Vector2()),\n                texelSize: new three_1.Uniform(new three_1.Vector2()),\n                cameraNear: new three_1.Uniform(0.3),\n                cameraFar: new three_1.Uniform(1000.0),\n                aspect: new three_1.Uniform(1.0),\n                time: new three_1.Uniform(0.0),\n            },\n            fragmentShader: shader_frag_1.default\n                .replace(lib_1.Section.FRAGMENT_HEAD, shaderParts.get(lib_1.Section.FRAGMENT_HEAD))\n                .replace(lib_1.Section.FRAGMENT_MAIN_UV, shaderParts.get(lib_1.Section.FRAGMENT_MAIN_UV))\n                .replace(lib_1.Section.FRAGMENT_MAIN_IMAGE, shaderParts.get(lib_1.Section.FRAGMENT_MAIN_IMAGE)),\n            vertexShader: shader_vert_1.default\n                .replace(lib_1.Section.VERTEX_HEAD, shaderParts.get(lib_1.Section.VERTEX_HEAD))\n                .replace(lib_1.Section.VERTEX_MAIN_SUPPORT, shaderParts.get(lib_1.Section.VERTEX_MAIN_SUPPORT)),\n            dithering,\n            depthWrite: false,\n            depthTest: false,\n        });\n        if (defines !== null) {\n            for (const entry of defines.entries()) {\n                this.defines[entry[0]] = entry[1];\n            }\n        }\n        if (uniforms !== null) {\n            for (const entry of uniforms.entries()) {\n                this.uniforms[entry[0]] = entry[1];\n            }\n        }\n        this.adoptCameraSettings(camera);\n    }\n    /**\n     * The current depth packing.\n     */\n    get depthPacking() {\n        return Number.parseInt(this.defines.DEPTH_PACKING, 10);\n    }\n    /**\n     * Sets the depth packing.\n     *\n     * Use `BasicDepthPacking` or `RGBADepthPacking` if your depth texture\n     * contains packed depth.\n     *\n     * You'll need to call {@link EffectPass#recompile} after changing this value.\n     */\n    set depthPacking(value) {\n        this.defines.DEPTH_PACKING = value.toFixed(0);\n    }\n    /**\n     * Sets the resolution.\n     *\n     * @param width - The width.\n     * @param height - The height.\n     */\n    setSize(width, height) {\n        width = Math.max(width, 1.0);\n        height = Math.max(height, 1.0);\n        this.uniforms.resolution.value.set(width, height);\n        this.uniforms.texelSize.value.set(1.0 / width, 1.0 / height);\n        this.uniforms.aspect.value = width / height;\n    }\n    /**\n     * Adopts the settings of the given camera.\n     */\n    adoptCameraSettings(camera = null) {\n        if (camera !== null) {\n            if (camera instanceof three_1.PerspectiveCamera) {\n                this.uniforms.cameraNear.value = camera.near;\n                this.uniforms.cameraFar.value = camera.far;\n                this.defines.PERSPECTIVE_CAMERA = '1';\n            }\n            else {\n                delete this.defines.PERSPECTIVE_CAMERA;\n            }\n        }\n    }\n}\nexports.EffectMaterial = EffectMaterial;\n","module.exports = \"#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n\\nuniform sampler2D inputBuffer;\\nuniform sampler2D depthBuffer;\\n\\nuniform vec2 resolution;\\nuniform vec2 texelSize;\\n\\nuniform float cameraNear;\\nuniform float cameraFar;\\nuniform float aspect;\\nuniform float time;\\n\\nvarying vec2 vUv;\\n\\nfloat readDepth(const in vec2 uv) {\\n\\n\\t#if DEPTH_PACKING == 3201\\n\\n\\t\\treturn unpackRGBAToDepth(texture2D(depthBuffer, uv));\\n\\n\\t#else\\n\\n\\t\\treturn texture2D(depthBuffer, uv).r;\\n\\n\\t#endif\\n\\n}\\n\\nFRAGMENT_HEAD\\n\\nvoid main() {\\n\\n\\tFRAGMENT_MAIN_UV\\n\\n\\tvec4 color0 = texture2D(inputBuffer, UV);\\n\\tvec4 color1 = vec4(0.0);\\n\\n\\tFRAGMENT_MAIN_IMAGE\\n\\n\\tgl_FragColor = color0;\\n\\n\\t#include <dithering_fragment>\\n\\n}\\n\"","module.exports = \"uniform vec2 resolution;\\nuniform vec2 texelSize;\\n\\nuniform float cameraNear;\\nuniform float cameraFar;\\nuniform float aspect;\\nuniform float time;\\n\\nvarying vec2 vUv;\\n\\nVERTEX_HEAD\\n\\nvoid main() {\\n\\n\\tvUv = uv;\\n\\n\\tVERTEX_MAIN_SUPPORT\\n\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar FindSubstringsUtil_1 = require(\"./FindSubstringsUtil\");\nexports.findSubstrings = FindSubstringsUtil_1.findSubstrings;\nvar IntegrateEffectUtil_1 = require(\"./IntegrateEffectUtil\");\nexports.integrateEffect = IntegrateEffectUtil_1.integrateEffect;\nvar PrefixSubstringsUtils_1 = require(\"./PrefixSubstringsUtils\");\nexports.prefixSubstrings = PrefixSubstringsUtils_1.prefixSubstrings;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst effects_1 = require(\"../../effects\");\nconst materials_1 = require(\"../../materials\");\nconst FindSubstringsUtil_1 = require(\"./FindSubstringsUtil\");\nconst PrefixSubstringsUtils_1 = require(\"./PrefixSubstringsUtils\");\n/**\n * Integrates the given effect.\n *\n * @param prefix - A prefix.\n * @param effect - An effect.\n * @param shaderParts - The shader parts.\n * @param blendModes - The blend modes.\n * @param defines - The macro definitions.\n * @param uniforms - The uniforms.\n * @param attributes - The global, collective attributes.\n * @return The results.\n */\nfunction integrateEffect(prefix, effect, shaderParts, blendModes, defines, uniforms, attributes) {\n    const functionRegExp = /(?:\\w+\\s+(\\w+)\\([\\w\\s,]*\\)\\s*{[^}]+})/g;\n    const varyingRegExp = /(?:varying\\s+\\w+\\s+(\\w*))/g;\n    const blendMode = effect.blendMode;\n    const shaders = new Map([\n        ['fragment', effect.fragmentShader],\n        ['vertex', effect.vertexShader],\n    ]);\n    const mainImageExists = effect.fragmentShader.includes('mainImage');\n    const mainUvExists = effect.fragmentShader.includes('mainUv');\n    let varyings = [];\n    let names = [];\n    let transformedUv = false;\n    let readDepth = false;\n    if (shaders.get('fragment') === undefined) {\n        console.error('Missing fragment shader', effect);\n    }\n    else if (mainUvExists && (attributes & effects_1.EffectAttribute.CONVOLUTION) !== 0) {\n        console.error('Effects that transform UV coordinates are incompatible with convolution effects', effect);\n    }\n    else if (!mainImageExists && !mainUvExists) {\n        console.error('The fragment shader contains neither a mainImage nor a mainUv function', effect);\n    }\n    else {\n        if (mainUvExists) {\n            shaderParts.set(materials_1.Section.FRAGMENT_MAIN_UV, shaderParts.get(materials_1.Section.FRAGMENT_MAIN_UV) + '\\t' + prefix + 'MainUv(UV);\\n');\n            transformedUv = true;\n        }\n        if (shaders.get('vertex') !== null && shaders.get('vertex').indexOf('mainSupport') >= 0) {\n            shaderParts.set(materials_1.Section.VERTEX_MAIN_SUPPORT, shaderParts.get(materials_1.Section.VERTEX_MAIN_SUPPORT) + '\\t' + prefix + 'MainSupport();\\n');\n            varyings = varyings.concat(FindSubstringsUtil_1.findSubstrings(varyingRegExp, shaders.get('vertex')));\n            names = names.concat(varyings).concat(FindSubstringsUtil_1.findSubstrings(functionRegExp, shaders.get('vertex')));\n        }\n        names = names\n            .concat(FindSubstringsUtil_1.findSubstrings(functionRegExp, shaders.get('fragment')))\n            .concat(Array.from(effect.uniforms.keys()))\n            .concat(Array.from(effect.defines.keys()));\n        // Store prefixed uniforms and macros.\n        effect.uniforms.forEach((value, key) => uniforms.set(prefix + key.charAt(0).toUpperCase() + key.slice(1), value));\n        effect.defines.forEach((value, key) => defines.set(prefix + key.charAt(0).toUpperCase() + key.slice(1), value));\n        // Prefix varyings, functions, uniforms and macros.\n        PrefixSubstringsUtils_1.prefixSubstrings(prefix, names, defines);\n        PrefixSubstringsUtils_1.prefixSubstrings(prefix, names, shaders);\n        // Collect unique blend modes.\n        blendModes.set(blendMode.blendFunction, blendMode);\n        if (mainImageExists) {\n            let str = prefix + 'MainImage(color0, UV, ';\n            // The effect may sample depth in a different shader.\n            if ((attributes & effects_1.EffectAttribute.DEPTH) !== 0 && shaders.get('fragment').indexOf('depth') >= 0) {\n                str += 'depth, ';\n                readDepth = true;\n            }\n            str += 'color1);\\n\\t';\n            // Include the blend opacity uniform of this effect.\n            const blendOpacity = prefix + 'BlendOpacity';\n            uniforms.set(blendOpacity, blendMode.opacity);\n            // Blend the result of this effect with the input color.\n            str += 'color0 = blend' + blendMode.blendFunction + '(color0, color1, ' + blendOpacity + ');\\n\\n\\t';\n            shaderParts.set(materials_1.Section.FRAGMENT_MAIN_IMAGE, shaderParts.get(materials_1.Section.FRAGMENT_MAIN_IMAGE) + str);\n            shaderParts.set(materials_1.Section.FRAGMENT_HEAD, shaderParts.get(materials_1.Section.FRAGMENT_HEAD) + 'uniform float ' + blendOpacity + ';\\n\\n');\n        }\n        // Include the modified code in the final shader.\n        shaderParts.set(materials_1.Section.FRAGMENT_HEAD, shaderParts.get(materials_1.Section.FRAGMENT_HEAD) + shaders.get('fragment') + '\\n');\n        if (shaders.get('vertex') !== null) {\n            shaderParts.set(materials_1.Section.VERTEX_HEAD, shaderParts.get(materials_1.Section.VERTEX_HEAD) + shaders.get('vertex') + '\\n');\n        }\n    }\n    return { varyings, transformedUv, readDepth };\n}\nexports.integrateEffect = integrateEffect;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lib_1 = require(\"./lib\");\nconst Pass_1 = require(\"./Pass\");\n/**\n * A mask pass.\n *\n * This pass requires that the input and output buffers have a stencil buffer.\n * You can enable the stencil buffer via the {@link EffectComposer} constructor.\n */\nclass MaskPass extends Pass_1.Pass {\n    /**\n     * Constructs a new mask pass.\n     *\n     * @param scene - The scene to render.\n     * @param camera - The camera to use.\n     */\n    constructor(scene, camera) {\n        super(lib_1.PassName.Mask, scene, camera);\n        /** Inverse flag */\n        this.inverse = false;\n        /** Stencil buffer clear flag. */\n        this.clearStencil = true;\n        this.needsSwap = false;\n    }\n    /**\n     * Renders the effect.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\n     */\n    render(renderer, inputBuffer, outputBuffer) {\n        const context = renderer.context;\n        const state = renderer.state;\n        const scene = this.scene;\n        const camera = this.camera;\n        const writeValue = this.inverse ? 0 : 1;\n        const clearValue = 1 - writeValue;\n        // Don't update color or depth.\n        state.buffers.color.setMask(0);\n        state.buffers.depth.setMask(0);\n        // Lock the buffers.\n        state.buffers.color.setLocked(true);\n        state.buffers.depth.setLocked(true);\n        // Configure the stencil.\n        state.buffers.stencil.setTest(true);\n        state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n        state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n        state.buffers.stencil.setClear(clearValue);\n        // Clear the stencil.\n        if (this.clearStencil) {\n            if (this.renderToScreen) {\n                renderer.setRenderTarget();\n                renderer.clearStencil();\n            }\n            else {\n                renderer.setRenderTarget(inputBuffer);\n                renderer.clearStencil();\n                renderer.setRenderTarget(outputBuffer);\n                renderer.clearStencil();\n            }\n        }\n        // Draw the mask.\n        if (this.renderToScreen) {\n            renderer.render(scene, camera);\n        }\n        else {\n            renderer.render(scene, camera, inputBuffer);\n            renderer.render(scene, camera, outputBuffer);\n        }\n        // Unlock the buffers.\n        state.buffers.color.setLocked(false);\n        state.buffers.depth.setLocked(false);\n        // Only render where the stencil is set to 1.\n        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    }\n}\nexports.MaskPass = MaskPass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ClearPass_1 = require(\"./ClearPass\");\nconst Pass_1 = require(\"./Pass\");\nconst lib_1 = require(\"./lib\");\n/**\n * A pass that renders a given scene directly on screen or into the read buffer\n * for further processing.\n */\nclass RenderPass extends Pass_1.Pass {\n    /**\n     * Constructs a new render pass.\n     *\n     * @param scene The scene to render.\n     * @param camera The camera to use to render the scene.\n     * @param options Additional options.\n     */\n    constructor(scene, camera, partialOptions = {}) {\n        super(lib_1.PassName.Render, scene, camera);\n        this.scene = scene;\n        this.camera = camera;\n        this.overrideMaterial = null;\n        const options = {\n            overrideMaterial: null,\n            clearAlpha: 1,\n            clearDepth: false,\n            clear: true,\n            ...partialOptions,\n        };\n        this.needsSwap = false;\n        this.clearPass = new ClearPass_1.ClearPass(options);\n        this.overrideMaterial = options.overrideMaterial;\n        this.clearDepth = options.clearDepth;\n        this.clear = options.clear;\n    }\n    /**\n     * Renders the scene.\n     *\n     * @param renderer The renderer.\n     * @param inputBuffer A frame buffer that contains the result of the previous pass.\n     */\n    render(renderer, inputBuffer) {\n        const scene = this.scene;\n        const renderTarget = this.renderToScreen ? undefined : inputBuffer;\n        const overrideMaterial = scene.overrideMaterial;\n        if (this.clear) {\n            this.clearPass.renderToScreen = this.renderToScreen;\n            this.clearPass.render(renderer, inputBuffer);\n        }\n        else if (this.clearDepth) {\n            renderer.setRenderTarget(renderTarget);\n            renderer.clearDepth();\n        }\n        scene.overrideMaterial = this.overrideMaterial;\n        renderer.render(scene, this.camera, renderTarget);\n        scene.overrideMaterial = overrideMaterial;\n    }\n}\nexports.RenderPass = RenderPass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lib_1 = require(\"./lib\");\nconst Pass_1 = require(\"./Pass\");\n/**\n * A shader pass. Renders any shader material as a fullscreen effect.\n *\n * This pass should not be used to create multiple chained effects. For a more\n * efficient solution, please refer to the {@link EffectPass}.\n */\nclass ShaderPass extends Pass_1.Pass {\n    /**\n     * Constructs a new shader pass.\n     *\n     * @param material - A shader material.\n     * @param input - The name of the input buffer uniform.\n     */\n    constructor(material, input = 'inputBuffer') {\n        super(lib_1.PassName.Shader);\n        this.setFullscreenMaterial(material);\n        /**\n         * The input buffer uniform.\n         */\n        this.uniform = null;\n        this.setInput(input);\n    }\n    /**\n     * Sets the name of the input buffer uniform.\n     *\n     * Most fullscreen materials modify texels from an input texture. This pass\n     * automatically assigns the main input buffer to the uniform identified by\n     * the given name.\n     *\n     * @param input - The name of the input buffer uniform.\n     */\n    setInput(input) {\n        const materials = this.getFullscreenMaterials();\n        this.uniform = null;\n        materials.forEach(material => {\n            const uniforms = material.uniforms;\n            if (uniforms[input] !== undefined) {\n                this.uniform = uniforms[input];\n            }\n        });\n    }\n    /**\n     * Renders the effect.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\n     */\n    render(renderer, inputBuffer, outputBuffer) {\n        if (this.uniform !== null) {\n            this.uniform.value = inputBuffer.texture;\n        }\n        renderer.render(this.scene, this.camera, this.renderToScreen ? undefined : outputBuffer);\n    }\n}\nexports.ShaderPass = ShaderPass;\n"],"sourceRoot":""}