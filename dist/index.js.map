{"version":3,"sources":["webpack://postprocessing/webpack/universalModuleDefinition","webpack://postprocessing/webpack/bootstrap","webpack://postprocessing/./passes/Pass.ts","webpack://postprocessing/external \"three\"","webpack://postprocessing/./passes/lib/index.ts","webpack://postprocessing/./passes/index.ts","webpack://postprocessing/./passes/ClearPass.ts","webpack://postprocessing/./materials/index.ts","webpack://postprocessing/./effects/blending/index.ts","webpack://postprocessing/./effects/blending/BlendFunction.ts","webpack://postprocessing/./effects/lib/index.ts","webpack://postprocessing/./index.ts","webpack://postprocessing/./core/index.ts","webpack://postprocessing/./core/EffectComposer.ts","webpack://postprocessing/./passes/ClearMaskPass.ts","webpack://postprocessing/./passes/lib/passes.types.ts","webpack://postprocessing/./passes/MaskPass.ts","webpack://postprocessing/./passes/RenderPass.ts","webpack://postprocessing/./passes/ShaderPass.ts","webpack://postprocessing/./materials/CopyMaterial.ts","webpack://postprocessing/./materials/glsl/copy/shader.frag","webpack://postprocessing/./materials/glsl/copy/shader.vert","webpack://postprocessing/./effects/index.ts","webpack://postprocessing/./effects/blending/BlendMode.ts","webpack://postprocessing/./effects/blending/glsl/add/shader.frag","webpack://postprocessing/./effects/blending/glsl/alpha/shader.frag","webpack://postprocessing/./effects/blending/glsl/average/shader.frag","webpack://postprocessing/./effects/blending/glsl/color-burn/shader.frag","webpack://postprocessing/./effects/blending/glsl/color-dodge/shader.frag","webpack://postprocessing/./effects/blending/glsl/darken/shader.frag","webpack://postprocessing/./effects/blending/glsl/difference/shader.frag","webpack://postprocessing/./effects/blending/glsl/exclusion/shader.frag","webpack://postprocessing/./effects/blending/glsl/lighten/shader.frag","webpack://postprocessing/./effects/blending/glsl/multiply/shader.frag","webpack://postprocessing/./effects/blending/glsl/divide/shader.frag","webpack://postprocessing/./effects/blending/glsl/negation/shader.frag","webpack://postprocessing/./effects/blending/glsl/normal/shader.frag","webpack://postprocessing/./effects/blending/glsl/overlay/shader.frag","webpack://postprocessing/./effects/blending/glsl/reflect/shader.frag","webpack://postprocessing/./effects/blending/glsl/screen/shader.frag","webpack://postprocessing/./effects/blending/glsl/soft-light/shader.frag","webpack://postprocessing/./effects/blending/glsl/subtract/shader.frag","webpack://postprocessing/./effects/lib/effects.types.ts","webpack://postprocessing/./effects/Effect.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","three_1","Pass","scene","arguments","length","undefined","Scene","camera","OrthographicCamera","_classCallCheck","this","uniform","quad","needsSwap","needsDepthTexture","renderToScreen","enabled","material","Array","isArray","Mesh","PlaneBufferGeometry","frustumCulled","add","depthTexture","width","height","renderer","alpha","_this","getFullscreenMaterials","forEach","dispose","keys","map","prop","filter","_typeof","__export","ClearMaskPass_1","ClearMaskPass","ClearPass_1","ClearPass","MaskPass_1","MaskPass","Pass_1","RenderPass_1","RenderPass","ShaderPass_1","ShaderPass","lib_1","partialOptions","_possibleConstructorReturn","_getPrototypeOf","PassName","Clear","options","_objectSpread","clearAlpha","clearColor","inputBuffer","color","copy","getClearColor","getClearAlpha","setClearColor","setRenderTarget","clear","Color","CopyMaterial_1","CopyMaterial","BlendFunction_1","BlendFunction","BlendMode_1","BlendMode","EffectComposer_1","EffectComposer","passes_1","materials_1","outputBuffer","copyPass","passes","depthBuffer","stencilBuffer","autoClear","createBuffer","clone","parent","oldSize","newSize","oldRenderer","domElement","parentNode","getSize","removeChild","appendChild","setSize","index","pass","DepthTexture","format","DepthStencilFormat","type","UnsignedInt248Type","drawingBufferSize","getDrawingBufferSize","context","getContextAttributes","renderTarget","WebGLRenderTarget","minFilter","LinearFilter","magFilter","RGBAFormat","RGBFormat","texture","generateMipmaps","initialize","splice","push","createDepthTexture","setDepthTexture","getDepthTexture","indexOf","delta","state","buffer","stencilTest","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","render","buffers","stencil","setFunc","NOTEQUAL","EQUAL","err","return","size","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","ClearMask","setTest","Mask","inverse","clearStencil","writeValue","clearValue","setMask","depth","setLocked","setOp","REPLACE","ALWAYS","setClear","KEEP","Render","overrideMaterial","clearDepth","clearPass","input","Shader","setFullscreenMaterial","setInput","_this2","materials","uniforms","__importDefault","mod","default","shader_frag_1","shader_vert_1","Uniform","opacity","fragmentShader","vertexShader","depthWrite","depthTest","ShaderMaterial","Effect_1","Effect","shader_frag_2","shader_frag_3","shader_frag_4","shader_frag_5","shader_frag_6","shader_frag_7","shader_frag_8","shader_frag_9","shader_frag_10","shader_frag_11","shader_frag_12","shader_frag_13","shader_frag_14","shader_frag_15","shader_frag_16","shader_frag_17","shader_frag_18","blendFunction","SKIP","ADD","ALPHA","AVERAGE","COLOR_BURN","COLOR_DODGE","DARKEN","DIFFERENCE","EXCLUSION","LIGHTEN","MULTIPLY","DIVIDE","NEGATION","NORMAL","OVERLAY","REFLECT","SCREEN","SOFT_LIGHT","SUBTRACT","EffectName","EffectAttribute","WebGLExtension","blending_1","settings","attributes","NONE","defines","Map","extensions","Set","blendMode","_arr","_i"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postprocessing\"] = factory(require(\"three\"));\n\telse\n\t\troot[\"postprocessing\"] = factory(root[\"three\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\n/**\n * An abstract pass.\n *\n * Passes that do not rely on the depth buffer should explicitly disable the\n * depth test and depth write in their respective shader materials.\n */\nclass Pass {\n    /**\n     * Constructs a new pass.\n     *\n     * @param - The name of this pass. Does not have to be unique.\n     * @param - The scene to render. The default scene contains a single mesh that fills the screen.\n     * @param - The camera. The default camera perfectly captures the screen mesh.\n     */\n    constructor(name, scene = new three_1.Scene(), camera = new three_1.OrthographicCamera(-1, 1, 1, -1, 0, 1)) {\n        this.name = name;\n        this.scene = scene;\n        this.camera = camera;\n        // [k: string]: any;\n        this.uniform = null;\n        /**\n         * A quad mesh that fills the screen.\n         */\n        this.quad = null;\n        /**\n         * Indicates whether the {@link EffectComposer} should swap the frame\n         * buffers after this pass has finished rendering.\n         *\n         * Set this to `false` if this pass doesn't render to the output buffer or\n         * the screen. Otherwise, the contents of the input buffer will be lost.\n         */\n        this.needsSwap = true;\n        /**\n         * Indicates whether the {@link EffectComposer} should prepare a depth\n         * texture for this pass.\n         *\n         * Set this to `true` if this pass relies on depth information from a\n         * preceding {@link RenderPass}.\n         */\n        this.needsDepthTexture = false;\n        /**\n         * Indicates whether this pass should render to screen.\n         */\n        this.renderToScreen = false;\n        /**\n         * Indicates whether this pass should be executed.\n         */\n        this.enabled = true;\n    }\n    /**\n     * Returns the current fullscreen material.\n     *\n     * @return The current fullscreen material(s), or null if there is none.\n     */\n    getFullscreenMaterial() {\n        return (this.quad !== null) ? this.quad.material : null;\n    }\n    /**\n     * Returns the current fullscreen material.\n     *\n     * @return The current fullscreen materials.\n     */\n    getFullscreenMaterials() {\n        return this.quad === null\n            ? []\n            : Array.isArray(this.quad.material)\n                ? this.quad.material\n                : [this.quad.material];\n    }\n    /**\n     * Sets the fullscreen material.\n     *\n     * The material will be assigned to the quad mesh that fills the screen. The\n     * screen quad will be created once a material is assigned via this method.\n     *\n     * @param - A fullscreen material.\n     */\n    setFullscreenMaterial(material) {\n        if (this.quad !== null) {\n            this.quad.material = material;\n        }\n        else {\n            const quad = new three_1.Mesh(new three_1.PlaneBufferGeometry(2, 2), material);\n            quad.frustumCulled = false;\n            if (this.scene !== null) {\n                this.scene.add(quad);\n                this.quad = quad;\n            }\n        }\n    }\n    /**\n     * Returns the current depth texture.\n     *\n     * @return The current depth texture, or null if there is none.\n     */\n    getDepthTexture() {\n        return null;\n    }\n    /**\n     * Sets the depth texture.\n     *\n     * You may override this method if your pass relies on the depth information\n     * of a preceding {@link RenderPass}.\n     *\n     * @param depthTexture - A depth texture.\n     * @param depthPacking - The depth packing. Default to `0`.\n     */\n    setDepthTexture(depthTexture, depthPacking = 0) { }\n    /**\n     * Updates this pass with the renderer's size.\n     *\n     * You may override this method in case you want to be informed about the main\n     * render size.\n     *\n     * The {@link EffectComposer} calls this method before this pass is\n     * initialized and every time its own size is updated.\n     *\n     * @param width - The renderer's width.\n     * @param height - The renderer's height.\n     * @example this.myRenderTarget.setSize(width, height);\n     */\n    setSize(width, height) { }\n    /**\n     * Performs initialization tasks.\n     *\n     * By overriding this method you gain access to the renderer. You'll also be\n     * able to configure your custom render targets to use the appropriate format\n     * (RGB or RGBA).\n     *\n     * The provided renderer can be used to warm up special off-screen render\n     * targets by performing a preliminary render operation.\n     *\n     * The {@link EffectComposer} calls this method when this pass is added to its\n     * queue, but not before its size has been set.\n     *\n     * @param renderer - The renderer.\n     * @param alpha - Whether the renderer uses the alpha channel or not.\n     * @example if(!alpha) { this.myRenderTarget.texture.format = RGBFormat; }\n     */\n    initialize(renderer, alpha) { }\n    /**\n     * Performs a shallow search for disposable properties and deletes them. The\n     * pass will be inoperative after this method was called!\n     *\n     * Disposable objects:\n     *  - WebGLRenderTarget\n     *  - Material\n     *  - Texture\n     *\n     * The {@link EffectComposer} calls this method when it is being destroyed.\n     * You may, however, use it independently to free memory when you are certain\n     * that you don't need this pass anymore.\n     */\n    dispose() {\n        this.getFullscreenMaterials().forEach(material => material.dispose());\n        /**\n         * @todo: Find a less sketchy (see: type safer) way of doing this\n         */\n        Object.keys(this)\n            .map(prop => this[prop])\n            .filter((value) => value !== null\n            && typeof value === 'object'\n            && typeof value.dispose === 'function')\n            .forEach(value => value.dispose());\n    }\n}\nexports.Pass = Pass;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./passes.types\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A compilation of the post processing passes.\n *\n * @module postprocessing/passes\n */\n// export { BlurPass } from './BlurPass';\nvar ClearMaskPass_1 = require(\"./ClearMaskPass\");\nexports.ClearMaskPass = ClearMaskPass_1.ClearMaskPass;\nvar ClearPass_1 = require(\"./ClearPass\");\nexports.ClearPass = ClearPass_1.ClearPass;\n// export { DepthPass } from './DepthPass';\n// export { EffectPass } from './EffectPass';\nvar MaskPass_1 = require(\"./MaskPass\");\nexports.MaskPass = MaskPass_1.MaskPass;\n// export { NormalPass } from './NormalPass';\nvar Pass_1 = require(\"./Pass\");\nexports.Pass = Pass_1.Pass;\nvar RenderPass_1 = require(\"./RenderPass\");\nexports.RenderPass = RenderPass_1.RenderPass;\n// export { SavePass } from './SavePass';\nvar ShaderPass_1 = require(\"./ShaderPass\");\nexports.ShaderPass = ShaderPass_1.ShaderPass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\nconst Pass_1 = require(\"./Pass\");\nconst lib_1 = require(\"./lib\");\n/**\n * A pass that clears the input buffer or the screen.\n *\n * You can prevent specific bits from being cleared by setting either the\n * `autoClearColor`, `autoClearStencil` or `autoClearDepth` properties of the renderer\n * to `false`.\n */\nclass ClearPass extends Pass_1.Pass {\n    /**\n     * Constructs a new clear pass.\n     * @param options - Additional options.\n     */\n    constructor(partialOptions = {}) {\n        super(lib_1.PassName.Clear);\n        const options = {\n            clearAlpha: 0,\n            clearColor: null,\n            ...partialOptions,\n        };\n        this.needsSwap = false;\n        this.clearColor = options.clearColor;\n        this.clearAlpha = options.clearAlpha;\n    }\n    /**\n     * Clears the input buffer or the screen.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     */\n    render(renderer, inputBuffer) {\n        const clearColor = this.clearColor;\n        let clearAlpha;\n        if (clearColor !== null) {\n            ClearPass.color.copy(renderer.getClearColor());\n            clearAlpha = renderer.getClearAlpha();\n            renderer.setClearColor(clearColor, this.clearAlpha);\n        }\n        renderer.setRenderTarget(this.renderToScreen ? undefined : inputBuffer);\n        renderer.clear();\n        if (clearColor !== null) {\n            renderer.setClearColor(ClearPass.color, clearAlpha);\n        }\n    }\n}\n/** Used for saving the original clear color of the renderer. */\nClearPass.color = new three_1.Color();\nexports.ClearPass = ClearPass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A collection of shader materials that are used in the post processing passes.\n *\n * @module postprocessing/materials\n */\n// export { AdaptiveLuminanceMaterial } from './AdaptiveLuminanceMaterial';\n// export { ColorEdgesMaterial } from './ColorEdgesMaterial';\n// export { ConvolutionMaterial, KernelSize } from './ConvolutionMaterial';\nvar CopyMaterial_1 = require(\"./CopyMaterial\");\nexports.CopyMaterial = CopyMaterial_1.CopyMaterial;\n// export { DepthComparisonMaterial } from './DepthComparisonMaterial';\n// export { EffectMaterial, Section } from './EffectMaterial';\n// export { GodRaysMaterial } from './GodRaysMaterial';\n// export { LuminanceMaterial } from './LuminanceMaterial';\n// export { OutlineEdgesMaterial } from './OutlineEdgesMaterial';\n// export { SMAAWeightsMaterial } from './SMAAWeightsMaterial';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A collection of blend functions.\n *\n * @module postprocessing/blending\n */\nvar BlendFunction_1 = require(\"./BlendFunction\");\nexports.BlendFunction = BlendFunction_1.BlendFunction;\nvar BlendMode_1 = require(\"./BlendMode\");\nexports.BlendMode = BlendMode_1.BlendMode;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A blend function enumeration.\n */\nvar BlendFunction;\n(function (BlendFunction) {\n    /** No blending. The effect will not be included in the final shader. */\n    BlendFunction[BlendFunction[\"SKIP\"] = 0] = \"SKIP\";\n    /** Additive blending. Fast, but may produce washed out results. */\n    BlendFunction[BlendFunction[\"ADD\"] = 1] = \"ADD\";\n    /** Alpha blending. Blends based on the alpha value of the new color. Opacity will be ignored. */\n    BlendFunction[BlendFunction[\"ALPHA\"] = 2] = \"ALPHA\";\n    /** Average blending. */\n    BlendFunction[BlendFunction[\"AVERAGE\"] = 3] = \"AVERAGE\";\n    /** Color dodge. */\n    BlendFunction[BlendFunction[\"COLOR_BURN\"] = 4] = \"COLOR_BURN\";\n    /** Color burn. */\n    BlendFunction[BlendFunction[\"COLOR_DODGE\"] = 5] = \"COLOR_DODGE\";\n    /** Prioritize darker colors. */\n    BlendFunction[BlendFunction[\"DARKEN\"] = 6] = \"DARKEN\";\n    /** Color difference. */\n    BlendFunction[BlendFunction[\"DIFFERENCE\"] = 7] = \"DIFFERENCE\";\n    /** Color exclusion. */\n    BlendFunction[BlendFunction[\"EXCLUSION\"] = 8] = \"EXCLUSION\";\n    /** Prioritize lighter colors. */\n    BlendFunction[BlendFunction[\"LIGHTEN\"] = 9] = \"LIGHTEN\";\n    /** Color multiplication. */\n    BlendFunction[BlendFunction[\"MULTIPLY\"] = 10] = \"MULTIPLY\";\n    /** Color division. */\n    BlendFunction[BlendFunction[\"DIVIDE\"] = 11] = \"DIVIDE\";\n    /** Color negation. */\n    BlendFunction[BlendFunction[\"NEGATION\"] = 12] = \"NEGATION\";\n    /** Normal blending. The new color overwrites the old one. */\n    BlendFunction[BlendFunction[\"NORMAL\"] = 13] = \"NORMAL\";\n    /** Color overlay. */\n    BlendFunction[BlendFunction[\"OVERLAY\"] = 14] = \"OVERLAY\";\n    /** Color reflection. */\n    BlendFunction[BlendFunction[\"REFLECT\"] = 15] = \"REFLECT\";\n    /** Screen blending. The two colors are effectively projected on a white screen simultaneously. */\n    BlendFunction[BlendFunction[\"SCREEN\"] = 16] = \"SCREEN\";\n    /** Soft light blending. */\n    BlendFunction[BlendFunction[\"SOFT_LIGHT\"] = 17] = \"SOFT_LIGHT\";\n    /** Color subtraction. */\n    BlendFunction[BlendFunction[\"SUBTRACT\"] = 18] = \"SUBTRACT\";\n})(BlendFunction = exports.BlendFunction || (exports.BlendFunction = {}));\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./effects.types\"));\n","\"use strict\";\n/**\n * Exposure of the library components.\n *\n * @module postprocessing\n */\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./core\"));\n__export(require(\"./effects\"));\n// export * from './images';\n__export(require(\"./materials\"));\n__export(require(\"./passes\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EffectComposer_1 = require(\"./EffectComposer\");\nexports.EffectComposer = EffectComposer_1.EffectComposer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\nconst passes_1 = require(\"../passes\");\nconst materials_1 = require(\"../materials\");\n/**\n * The EffectComposer may be used in place of a normal WebGLRenderer.\n *\n * The auto clear behaviour of the provided renderer will be disabled to prevent\n * unnecessary clear operations.\n *\n * It is common practice to use a {@link RenderPass} as the first pass to\n * automatically clear the screen and render the scene to a texture for further\n * processing.\n */\nclass EffectComposer {\n    /**\n     * Constructs a new effect composer.\n     * @param renderer- The renderer that should be used.\n     * @param options - The options.\n     */\n    constructor(renderer = null, partialOptions = {}) {\n        this.renderer = renderer;\n        /**\n         * The input buffer.\n         *\n         * Reading from and writing to the same render target should be avoided.\n         * Therefore, two seperate yet identical buffers are used.\n         */\n        this.inputBuffer = null;\n        /**\n         * The output buffer.\n         */\n        this.outputBuffer = null;\n        /**\n         * A copy pass used for copying masked scenes.\n         */\n        this.copyPass = new passes_1.ShaderPass(new materials_1.CopyMaterial());\n        /**\n         * The passes.\n         */\n        this.passes = [];\n        const options = {\n            depthBuffer: true,\n            stencilBuffer: false,\n            ...partialOptions,\n        };\n        if (this.renderer !== null) {\n            this.renderer.autoClear = false;\n            this.inputBuffer = this.createBuffer(options.depthBuffer, options.stencilBuffer);\n            this.outputBuffer = this.inputBuffer.clone();\n        }\n    }\n    /**\n     * Replaces the current renderer with the given one. The DOM element of the\n     * current renderer will automatically be removed from its parent node and the\n     * DOM element of the new renderer will take its place.\n     *\n     * The auto clear mechanism of the provided renderer will be disabled.\n     *\n     * @param renderer New renderer.\n     * @return The old renderer.\n     */\n    replaceRenderer(renderer) {\n        const oldRenderer = this.renderer;\n        let parent;\n        let oldSize;\n        let newSize;\n        if (oldRenderer !== null && oldRenderer !== renderer) {\n            this.renderer = renderer;\n            this.renderer.autoClear = false;\n            parent = oldRenderer.domElement.parentNode;\n            oldSize = oldRenderer.getSize();\n            newSize = renderer.getSize();\n            if (parent !== null) {\n                parent.removeChild(oldRenderer.domElement);\n                parent.appendChild(renderer.domElement);\n            }\n            if (oldSize.width !== newSize.width || oldSize.height !== newSize.height) {\n                this.setSize();\n            }\n        }\n        return oldRenderer;\n    }\n    /**\n     * Retrieves the most relevant depth texture for the pass at the given index.\n     * @param index - The index of the pass that needs a depth texture.\n     * @return The depth texture, or null if there is none.\n     */\n    getDepthTexture(index) {\n        const passes = this.passes;\n        let depthTexture = null;\n        let inputBuffer = true;\n        let i;\n        let pass;\n        for (i = 0; i < index; ++i) {\n            pass = passes[i];\n            if (pass.needsSwap) {\n                inputBuffer = !inputBuffer;\n            }\n            else if (pass instanceof passes_1.RenderPass) {\n                depthTexture = (inputBuffer ? this.inputBuffer : this.outputBuffer).depthTexture;\n            }\n        }\n        return depthTexture;\n    }\n    /**\n     * Creates two depth texture attachments, one for the input buffer and one for\n     * the output buffer.\n     *\n     * Depth will be written to the depth texture when something is rendered into\n     * the respective render target and the involved materials have `depthWrite`\n     * enabled. Under normal circumstances, only a {@link RenderPass} will render\n     * depth.\n     *\n     * When a shader reads from a depth texture and writes to a render target that\n     * uses the same depth texture attachment, the depth information will be lost.\n     * This happens even if `depthWrite` is disabled. For that reason, two\n     * separate depth textures are used.\n     */\n    createDepthTexture(width, height) {\n        const depthTexture = new three_1.DepthTexture(width, height);\n        if (this.inputBuffer.stencilBuffer) {\n            depthTexture.format = three_1.DepthStencilFormat;\n            depthTexture.type = three_1.UnsignedInt248Type;\n        }\n        this.inputBuffer.depthTexture = depthTexture;\n        this.outputBuffer.depthTexture = depthTexture.clone();\n    }\n    /**\n     * Creates a new render target by replicating the renderer's canvas.\n     *\n     * The created render target uses a linear filter for texel minification and\n     * magnification. Its render texture format depends on whether the renderer\n     * uses the alpha channel. Mipmaps are disabled.\n     *\n     * @param depthBuffer - Whether the render target should have a depth buffer.\n     * @param stencilBuffer - Whether the render target should have a stencil buffer.\n     * @return A new render target that equals the renderer's canvas.\n     */\n    createBuffer(depthBuffer, stencilBuffer) {\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        const alpha = this.renderer.context.getContextAttributes().alpha;\n        const renderTarget = new three_1.WebGLRenderTarget(drawingBufferSize.width, drawingBufferSize.height, {\n            minFilter: three_1.LinearFilter,\n            magFilter: three_1.LinearFilter,\n            format: alpha ? three_1.RGBAFormat : three_1.RGBFormat,\n            depthBuffer,\n            stencilBuffer,\n        });\n        renderTarget.texture.name = 'EffectComposer.Buffer';\n        renderTarget.texture.generateMipmaps = false;\n        return renderTarget;\n    }\n    /**\n     * Adds a pass, optionally at a specific index.\n     *\n     * @param pass - A new pass.\n     * @param index - An index at which the pass should be inserted.\n     */\n    addPass(pass, index) {\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        pass.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        pass.initialize(this.renderer, this.renderer.context.getContextAttributes().alpha);\n        if (index !== undefined) {\n            this.passes.splice(index, 0, pass);\n        }\n        else {\n            index = this.passes.push(pass) - 1;\n        }\n        if (pass.needsDepthTexture) {\n            if (this.inputBuffer.depthTexture === null) {\n                this.createDepthTexture(drawingBufferSize.width, drawingBufferSize.height);\n            }\n            pass.setDepthTexture(this.getDepthTexture(index));\n        }\n    }\n    /**\n     * Removes a pass.\n     */\n    removePass(pass) {\n        this.passes.splice(this.passes.indexOf(pass), 1);\n    }\n    /**\n     * Renders all enabled passes in the order in which they were added.\n     * @param delta - The time between the last frame and the current one in seconds.\n     */\n    render(delta) {\n        let inputBuffer = this.inputBuffer;\n        let outputBuffer = this.outputBuffer;\n        let stencilTest = false;\n        let context;\n        let state;\n        let buffer;\n        for (const pass of this.passes) {\n            if (pass.enabled) {\n                pass.render(this.renderer, inputBuffer, outputBuffer, delta, stencilTest);\n                if (pass.needsSwap) {\n                    if (stencilTest) {\n                        this.copyPass.renderToScreen = pass.renderToScreen;\n                        context = this.renderer.context;\n                        state = this.renderer.state;\n                        // Preserve the unaffected pixels.\n                        state.buffers.stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n                        this.copyPass.render(this.renderer, inputBuffer, outputBuffer);\n                        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n                    }\n                    buffer = inputBuffer;\n                    inputBuffer = outputBuffer;\n                    outputBuffer = buffer;\n                }\n                if (pass instanceof passes_1.MaskPass) {\n                    stencilTest = true;\n                }\n                else if (pass instanceof passes_1.ClearMaskPass) {\n                    stencilTest = false;\n                }\n            }\n        }\n    }\n    /**\n     * Sets the size of the buffers and the renderer's output canvas.\n     *\n     * Every pass will be informed of the new size. It's up to each pass how that\n     * information is used.\n     *\n     * If no width or height is specified, the render targets and passes will be\n     * updated with the current size of the renderer.\n     */\n    setSize(width, height) {\n        let size;\n        if (width === undefined || height === undefined) {\n            size = this.renderer.getSize();\n            width = size.width;\n            height = size.height;\n        }\n        // Update the logical render size.\n        this.renderer.setSize(width, height);\n        // The drawing buffer size takes the device pixel ratio into account.\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        this.inputBuffer.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        this.outputBuffer.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        for (const pass of this.passes) {\n            pass.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        }\n    }\n    /**\n     * Resets this composer by deleting all passes and creating new buffers.\n     */\n    reset() {\n        const renderTarget = this.createBuffer(this.inputBuffer.depthBuffer, this.inputBuffer.stencilBuffer);\n        this.dispose();\n        // Reanimate.\n        this.inputBuffer = renderTarget;\n        this.outputBuffer = renderTarget.clone();\n        this.copyPass = new passes_1.ShaderPass(new materials_1.CopyMaterial());\n    }\n    /**\n     * Destroys this composer and all passes.\n     *\n     * This method deallocates all disposable objects created by the passes. It\n     * also deletes the main frame buffers of this composer.\n     */\n    dispose() {\n        for (const pass of this.passes)\n            pass.dispose();\n        this.passes = [];\n        if (this.inputBuffer !== null) {\n            this.inputBuffer.dispose();\n            this.inputBuffer = null;\n        }\n        if (this.outputBuffer !== null) {\n            this.outputBuffer.dispose();\n            this.outputBuffer = null;\n        }\n        this.copyPass.dispose();\n    }\n}\nexports.EffectComposer = EffectComposer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lib_1 = require(\"./lib\");\nconst Pass_1 = require(\"./Pass\");\n/**\n * A pass that disables the stencil test.\n */\nclass ClearMaskPass extends Pass_1.Pass {\n    constructor() {\n        super(lib_1.PassName.ClearMask);\n        this.needsSwap = false;\n    }\n    /**\n     * Disables the global stencil test.\n     */\n    render(renderer) {\n        renderer.state.buffers.stencil.setTest(false);\n    }\n}\nexports.ClearMaskPass = ClearMaskPass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PassName;\n(function (PassName) {\n    PassName[\"Clear\"] = \"clear\";\n    PassName[\"Render\"] = \"render\";\n    PassName[\"Shader\"] = \"shader\";\n    PassName[\"Mask\"] = \"mask\";\n    PassName[\"ClearMask\"] = \"clearMask\";\n})(PassName = exports.PassName || (exports.PassName = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lib_1 = require(\"./lib\");\nconst Pass_1 = require(\"./Pass\");\n/**\n * A mask pass.\n *\n * This pass requires that the input and output buffers have a stencil buffer.\n * You can enable the stencil buffer via the {@link EffectComposer} constructor.\n */\nclass MaskPass extends Pass_1.Pass {\n    /**\n     * Constructs a new mask pass.\n     *\n     * @param scene - The scene to render.\n     * @param camera - The camera to use.\n     */\n    constructor(scene, camera) {\n        super(lib_1.PassName.Mask, scene, camera);\n        /** Inverse flag */\n        this.inverse = false;\n        /** Stencil buffer clear flag. */\n        this.clearStencil = true;\n        this.needsSwap = false;\n    }\n    /**\n     * Renders the effect.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\n     */\n    render(renderer, inputBuffer, outputBuffer) {\n        const context = renderer.context;\n        const state = renderer.state;\n        const scene = this.scene;\n        const camera = this.camera;\n        const writeValue = this.inverse ? 0 : 1;\n        const clearValue = 1 - writeValue;\n        // Don't update color or depth.\n        state.buffers.color.setMask(0);\n        state.buffers.depth.setMask(0);\n        // Lock the buffers.\n        state.buffers.color.setLocked(true);\n        state.buffers.depth.setLocked(true);\n        // Configure the stencil.\n        state.buffers.stencil.setTest(true);\n        state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n        state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n        state.buffers.stencil.setClear(clearValue);\n        // Clear the stencil.\n        if (this.clearStencil) {\n            if (this.renderToScreen) {\n                renderer.setRenderTarget();\n                renderer.clearStencil();\n            }\n            else {\n                renderer.setRenderTarget(inputBuffer);\n                renderer.clearStencil();\n                renderer.setRenderTarget(outputBuffer);\n                renderer.clearStencil();\n            }\n        }\n        // Draw the mask.\n        if (this.renderToScreen) {\n            renderer.render(scene, camera);\n        }\n        else {\n            renderer.render(scene, camera, inputBuffer);\n            renderer.render(scene, camera, outputBuffer);\n        }\n        // Unlock the buffers.\n        state.buffers.color.setLocked(false);\n        state.buffers.depth.setLocked(false);\n        // Only render where the stencil is set to 1.\n        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    }\n}\nexports.MaskPass = MaskPass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ClearPass_1 = require(\"./ClearPass\");\nconst Pass_1 = require(\"./Pass\");\nconst lib_1 = require(\"./lib\");\n/**\n * A pass that renders a given scene directly on screen or into the read buffer\n * for further processing.\n */\nclass RenderPass extends Pass_1.Pass {\n    /**\n     * Constructs a new render pass.\n     *\n     * @param scene The scene to render.\n     * @param camera The camera to use to render the scene.\n     * @param options Additional options.\n     */\n    constructor(scene, camera, partialOptions = {}) {\n        super(lib_1.PassName.Render, scene, camera);\n        this.scene = scene;\n        this.camera = camera;\n        this.overrideMaterial = null;\n        const options = {\n            overrideMaterial: null,\n            clearAlpha: 1,\n            clearDepth: false,\n            clear: true,\n            ...partialOptions,\n        };\n        this.needsSwap = false;\n        this.clearPass = new ClearPass_1.ClearPass(options);\n        this.overrideMaterial = options.overrideMaterial;\n        this.clearDepth = options.clearDepth;\n        this.clear = options.clear;\n    }\n    /**\n     * Renders the scene.\n     *\n     * @param renderer The renderer.\n     * @param inputBuffer A frame buffer that contains the result of the previous pass.\n     */\n    render(renderer, inputBuffer) {\n        const scene = this.scene;\n        const renderTarget = this.renderToScreen ? undefined : inputBuffer;\n        const overrideMaterial = scene.overrideMaterial;\n        if (this.clear) {\n            this.clearPass.renderToScreen = this.renderToScreen;\n            this.clearPass.render(renderer, inputBuffer);\n        }\n        else if (this.clearDepth) {\n            renderer.setRenderTarget(renderTarget);\n            renderer.clearDepth();\n        }\n        scene.overrideMaterial = this.overrideMaterial;\n        renderer.render(scene, this.camera, renderTarget);\n        scene.overrideMaterial = overrideMaterial;\n    }\n}\nexports.RenderPass = RenderPass;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lib_1 = require(\"./lib\");\nconst Pass_1 = require(\"./Pass\");\n/**\n * A shader pass. Renders any shader material as a fullscreen effect.\n *\n * This pass should not be used to create multiple chained effects. For a more\n * efficient solution, please refer to the {@link EffectPass}.\n */\nclass ShaderPass extends Pass_1.Pass {\n    /**\n     * Constructs a new shader pass.\n     *\n     * @param material - A shader material.\n     * @param input - The name of the input buffer uniform.\n     */\n    constructor(material, input = 'inputBuffer') {\n        super(lib_1.PassName.Shader);\n        this.setFullscreenMaterial(material);\n        /**\n         * The input buffer uniform.\n         */\n        this.uniform = null;\n        this.setInput(input);\n    }\n    /**\n     * Sets the name of the input buffer uniform.\n     *\n     * Most fullscreen materials modify texels from an input texture. This pass\n     * automatically assigns the main input buffer to the uniform identified by\n     * the given name.\n     *\n     * @param input - The name of the input buffer uniform.\n     */\n    setInput(input) {\n        const materials = this.getFullscreenMaterials();\n        this.uniform = null;\n        materials.forEach(material => {\n            const uniforms = material.uniforms;\n            if (uniforms[input] !== undefined) {\n                this.uniform = uniforms[input];\n            }\n        });\n    }\n    /**\n     * Renders the effect.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\n     */\n    render(renderer, inputBuffer, outputBuffer) {\n        if (this.uniform !== null) {\n            this.uniform.value = inputBuffer.texture;\n        }\n        renderer.render(this.scene, this.camera, this.renderToScreen ? undefined : outputBuffer);\n    }\n}\nexports.ShaderPass = ShaderPass;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\nconst shader_frag_1 = __importDefault(require(\"./glsl/copy/shader.frag\"));\nconst shader_vert_1 = __importDefault(require(\"./glsl/copy/shader.vert\"));\n/**\n * A simple copy shader material.\n */\nclass CopyMaterial extends three_1.ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                inputBuffer: new three_1.Uniform(null),\n                opacity: new three_1.Uniform(1.0),\n            },\n            fragmentShader: shader_frag_1.default,\n            vertexShader: shader_vert_1.default,\n            depthWrite: false,\n            depthTest: false,\n        });\n    }\n}\nexports.CopyMaterial = CopyMaterial;\n","module.exports = \"uniform sampler2D inputBuffer;\\nuniform float opacity;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tvec4 texel = texture2D(inputBuffer, vUv);\\n\\tgl_FragColor = opacity * texel;\\n\\n}\\n\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tvUv = uv;\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\\n}\\n\"","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A collection of effects.\n *\n * @module postprocessing/effects\n */\n__export(require(\"./blending\"));\n__export(require(\"./lib\"));\n// export { BloomEffect } from './BloomEffect';\n// export { BokehEffect } from './BokehEffect';\n// export { BrightnessContrastEffect } from './BrightnessContrastEffect';\n// export { ColorAverageEffect } from './ColorAverageEffect';\n// export { ChromaticAberrationEffect } from './ChromaticAberrationEffect';\n// export { DepthEffect } from './DepthEffect';\n// export { DotScreenEffect } from './DotScreenEffect';\nvar Effect_1 = require(\"./Effect\");\nexports.Effect = Effect_1.Effect;\n// export { GammaCorrectionEffect } from './GammaCorrectionEffect';\n// export { GlitchEffect, GlitchMode } from './GlitchEffect';\n// export { GodRaysEffect } from './GodRaysEffect';\n// export { GridEffect } from './GridEffect';\n// export { HueSaturationEffect } from './HueSaturationEffect';\n// export { NoiseEffect } from './NoiseEffect';\n// export { OutlineEffect } from './OutlineEffect';\n// export { PixelationEffect } from './PixelationEffect';\n// export { RealisticBokehEffect } from './RealisticBokehEffect';\n// export { ScanlineEffect } from './ScanlineEffect';\n// export { ShockWaveEffect } from './ShockWaveEffect';\n// export { SepiaEffect } from './SepiaEffect';\n// export { SMAAEffect } from './SMAAEffect';\n// export { SSAOEffect } from './SSAOEffect';\n// export { TextureEffect } from './TextureEffect';\n// export { ToneMappingEffect } from './ToneMappingEffect';\n// export { VignetteEffect } from './VignetteEffect';\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst three_1 = require(\"three\");\nconst BlendFunction_1 = require(\"./BlendFunction\");\nconst shader_frag_1 = __importDefault(require(\"./glsl/add/shader.frag\"));\nconst shader_frag_2 = __importDefault(require(\"./glsl/alpha/shader.frag\"));\nconst shader_frag_3 = __importDefault(require(\"./glsl/average/shader.frag\"));\nconst shader_frag_4 = __importDefault(require(\"./glsl/color-burn/shader.frag\"));\nconst shader_frag_5 = __importDefault(require(\"./glsl/color-dodge/shader.frag\"));\nconst shader_frag_6 = __importDefault(require(\"./glsl/darken/shader.frag\"));\nconst shader_frag_7 = __importDefault(require(\"./glsl/difference/shader.frag\"));\nconst shader_frag_8 = __importDefault(require(\"./glsl/exclusion/shader.frag\"));\nconst shader_frag_9 = __importDefault(require(\"./glsl/lighten/shader.frag\"));\nconst shader_frag_10 = __importDefault(require(\"./glsl/multiply/shader.frag\"));\nconst shader_frag_11 = __importDefault(require(\"./glsl/divide/shader.frag\"));\nconst shader_frag_12 = __importDefault(require(\"./glsl/negation/shader.frag\"));\nconst shader_frag_13 = __importDefault(require(\"./glsl/normal/shader.frag\"));\nconst shader_frag_14 = __importDefault(require(\"./glsl/overlay/shader.frag\"));\nconst shader_frag_15 = __importDefault(require(\"./glsl/reflect/shader.frag\"));\nconst shader_frag_16 = __importDefault(require(\"./glsl/screen/shader.frag\"));\nconst shader_frag_17 = __importDefault(require(\"./glsl/soft-light/shader.frag\"));\nconst shader_frag_18 = __importDefault(require(\"./glsl/subtract/shader.frag\"));\n/** A blend mode. */\nclass BlendMode {\n    /**\n     * Constructs a new blend mode.\n     *\n     * @param blendFunction - The blend function to use.\n     * @param opacity - The opacity of the color that will be blended with the base color.\n     */\n    constructor(blendFunction, opacity = 1.0) {\n        this.blendFunction = blendFunction;\n        this.opacity = new three_1.Uniform(opacity);\n    }\n    /** Returns the blend function shader code, or null for `SKIP` blend function. */\n    getShaderCode() {\n        switch (this.blendFunction) {\n            case BlendFunction_1.BlendFunction.SKIP: return null;\n            case BlendFunction_1.BlendFunction.ADD: return shader_frag_1.default;\n            case BlendFunction_1.BlendFunction.ALPHA: return shader_frag_2.default;\n            case BlendFunction_1.BlendFunction.AVERAGE: return shader_frag_3.default;\n            case BlendFunction_1.BlendFunction.COLOR_BURN: return shader_frag_4.default;\n            case BlendFunction_1.BlendFunction.COLOR_DODGE: return shader_frag_5.default;\n            case BlendFunction_1.BlendFunction.DARKEN: return shader_frag_6.default;\n            case BlendFunction_1.BlendFunction.DIFFERENCE: return shader_frag_7.default;\n            case BlendFunction_1.BlendFunction.EXCLUSION: return shader_frag_8.default;\n            case BlendFunction_1.BlendFunction.LIGHTEN: return shader_frag_9.default;\n            case BlendFunction_1.BlendFunction.MULTIPLY: return shader_frag_10.default;\n            case BlendFunction_1.BlendFunction.DIVIDE: return shader_frag_11.default;\n            case BlendFunction_1.BlendFunction.NEGATION: return shader_frag_12.default;\n            case BlendFunction_1.BlendFunction.NORMAL: return shader_frag_13.default;\n            case BlendFunction_1.BlendFunction.OVERLAY: return shader_frag_14.default;\n            case BlendFunction_1.BlendFunction.REFLECT: return shader_frag_15.default;\n            case BlendFunction_1.BlendFunction.SCREEN: return shader_frag_16.default;\n            case BlendFunction_1.BlendFunction.SOFT_LIGHT: return shader_frag_17.default;\n            case BlendFunction_1.BlendFunction.SUBTRACT: return shader_frag_18.default;\n        }\n    }\n}\nexports.BlendMode = BlendMode;\n","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn min(x + y, 1.0) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, y.a), x.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (x + y) * 0.5 * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 0.0) ? y : max(1.0 - (1.0 - x) / y, 0.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 1.0) ? y : min(x / (1.0 - y), 1.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn min(x, y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn abs(x - y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (x + y - 2.0 * x * y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn max(x, y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn x * y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y > 0.0) ? min(x / y, 1.0) : 1.0;\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (1.0 - abs(1.0 - x - y)) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (x < 0.5) ? (2.0 * x * y) : (1.0 - 2.0 * (1.0 - x) * (1.0 - y));\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 1.0) ? y : min(x * x / (1.0 - y), 1.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (1.0 - (1.0 - x) * (1.0 - y)) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y < 0.5) ?\\n\\t\\t(2.0 * x * y + x * x * (1.0 - 2.0 * y)) :\\n\\t\\t(sqrt(x) * (2.0 * y - 1.0) + 2.0 * x * (1.0 - y));\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn max(x + y - 1.0, 0.0) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EffectName;\n(function (EffectName) {\n    EffectName[\"Glitch\"] = \"GlitchEffect\";\n})(EffectName = exports.EffectName || (exports.EffectName = {}));\n/**\n * An enumeration of effect attributes.\n * Attributes can be concatenated using the bitwise OR operator.\n *\n * @example\n * const attributes = EffectAttribute.CONVOLUTION | EffectAttribute.DEPTH;\n */\nvar EffectAttribute;\n(function (EffectAttribute) {\n    /* No attributes. Most effects don't need to specify any attributes. */\n    EffectAttribute[EffectAttribute[\"NONE\"] = 0] = \"NONE\";\n    /** Describes effects that require a depth texture. */\n    EffectAttribute[EffectAttribute[\"DEPTH\"] = 1] = \"DEPTH\";\n    /**\n     * Describes effects that fetch additional samples from the input buffer.\n     * There cannot be more than one effect with this attribute per {@link EffectPass}.\n     */\n    EffectAttribute[EffectAttribute[\"CONVOLUTION\"] = 2] = \"CONVOLUTION\";\n})(EffectAttribute = exports.EffectAttribute || (exports.EffectAttribute = {}));\n/** An enumeration of WebGL extensions. */\nvar WebGLExtension;\n(function (WebGLExtension) {\n    /** Enables derivatives by adding the functions dFdx, dFdy and fwidth. */\n    WebGLExtension[\"DERIVATIVES\"] = \"derivatives\";\n    /** Enables gl_FragDepthEXT to set a depth value of a fragment from within the fragment shader. */\n    WebGLExtension[\"FRAG_DEPTH\"] = \"fragDepth\";\n    /** Enables multiple render targets (MRT) support. */\n    WebGLExtension[\"DRAW_BUFFERS\"] = \"drawBuffers\";\n    /** Enables explicit control of texture LOD. */\n    WebGLExtension[\"SHADER_TEXTURE_LOD\"] = \"shaderTextureLOD\";\n})(WebGLExtension = exports.WebGLExtension || (exports.WebGLExtension = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst blending_1 = require(\"./blending\");\nconst lib_1 = require(\"./lib\");\n/**\n * An abstract effect.\n * Effects can be combined using the {@link EffectPass}.\n */\nclass Effect {\n    constructor(name, fragmentShader, partialOptions = {}) {\n        this.name = name;\n        this.fragmentShader = fragmentShader;\n        this.vertexShader = null;\n        const settings = {\n            attributes: lib_1.EffectAttribute.NONE,\n            blendFunction: blending_1.BlendFunction.SCREEN,\n            defines: new Map(),\n            uniforms: new Map(),\n            extensions: new Set(),\n            vertexShader: null,\n            ...partialOptions,\n        };\n        this.attributes = settings.attributes;\n        this.vertexShader = settings.vertexShader;\n        this.defines = settings.defines;\n        this.uniforms = settings.uniforms;\n        this.extensions = settings.extensions;\n        this.blendMode = new blending_1.BlendMode(settings.blendFunction);\n    }\n    /**\n     * Sets the depth texture.\n     *\n     * You may override this method if your effect requires direct access to the\n     * depth texture that is bound to the associated {@link EffectPass}.\n     */\n    setDepthTexture(depthTexture, depthPacking = 0) { }\n    /**\n     * Updates the effect by performing supporting operations.\n     *\n     * This method is called by the {@link EffectPass} right before the main\n     * fullscreen render operation, even if the blend function is set to `SKIP`.\n     *\n     * You may override this method if you need to render additional off-screen\n     * textures or update custom uniforms.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param delta - The time between the last frame and the current one in seconds.\n     */\n    update(renderer, inputBuffer, delta = 0) { }\n    /**\n     * Updates the size of this effect.\n     *\n     * You may override this method in case you want to be informed about the main\n     * render size.\n     *\n     * The {@link EffectPass} calls this method before this effect is initialized\n     * and every time its own size is updated.\n     */\n    setSize(width, height) { }\n    /**\n     * Performs initialization tasks.\n     *\n     * By overriding this method you gain access to the renderer. You'll also be\n     * able to configure your custom render targets to use the appropriate format\n     * (RGB or RGBA).\n     *\n     * The provided renderer can be used to warm up special off-screen render\n     * targets by performing a preliminary render operation.\n     *\n     * The {@link EffectPass} calls this method during its own initialization\n     * which happens after the size has been set.\n     *\n     * @param renderer - The renderer.\n     * @param alpha - Whether the renderer uses the alpha channel or not.\n     * @example if(!alpha) this.myRenderTarget.texture.format = RGBFormat;\n     */\n    initialize(renderer, alpha) { }\n    /**\n     * Performs a shallow search for properties that define a dispose method and\n     * deletes them. The effect will be inoperative after this method was called!\n     *\n     * Disposable objects:\n     *  - render targets\n     *  - materials\n     *  - textures\n     *\n     * The {@link EffectPass} calls this method when it is being destroyed. Do not\n     * call this method directly.\n     */\n    dispose() {\n        for (const key of Object.keys(this)) {\n            if (this[key] !== null && typeof this[key].dispose === 'function') {\n                this[key].dispose();\n                this[key] = null;\n            }\n        }\n    }\n}\nexports.Effect = Effect;\n"],"sourceRoot":""}