{"version":3,"sources":["webpack://postprocessing/webpack/universalModuleDefinition","webpack://postprocessing/webpack/bootstrap","webpack://postprocessing/./core/EffectComposer.ts","webpack://postprocessing/./core/index.ts","webpack://postprocessing/./effects/Effect.ts","webpack://postprocessing/./effects/blending/BlendFunction.ts","webpack://postprocessing/./effects/blending/BlendMode.ts","webpack://postprocessing/./effects/blending/glsl/add/shader.frag","webpack://postprocessing/./effects/blending/glsl/alpha/shader.frag","webpack://postprocessing/./effects/blending/glsl/average/shader.frag","webpack://postprocessing/./effects/blending/glsl/color-burn/shader.frag","webpack://postprocessing/./effects/blending/glsl/color-dodge/shader.frag","webpack://postprocessing/./effects/blending/glsl/darken/shader.frag","webpack://postprocessing/./effects/blending/glsl/difference/shader.frag","webpack://postprocessing/./effects/blending/glsl/divide/shader.frag","webpack://postprocessing/./effects/blending/glsl/exclusion/shader.frag","webpack://postprocessing/./effects/blending/glsl/lighten/shader.frag","webpack://postprocessing/./effects/blending/glsl/multiply/shader.frag","webpack://postprocessing/./effects/blending/glsl/negation/shader.frag","webpack://postprocessing/./effects/blending/glsl/normal/shader.frag","webpack://postprocessing/./effects/blending/glsl/overlay/shader.frag","webpack://postprocessing/./effects/blending/glsl/reflect/shader.frag","webpack://postprocessing/./effects/blending/glsl/screen/shader.frag","webpack://postprocessing/./effects/blending/glsl/soft-light/shader.frag","webpack://postprocessing/./effects/blending/glsl/subtract/shader.frag","webpack://postprocessing/./effects/blending/index.ts","webpack://postprocessing/./effects/index.ts","webpack://postprocessing/./effects/lib/effects.types.ts","webpack://postprocessing/./effects/lib/index.ts","webpack://postprocessing/./materials/CopyMaterial.ts","webpack://postprocessing/./materials/glsl/copy/shader.frag","webpack://postprocessing/./materials/glsl/copy/shader.vert","webpack://postprocessing/./materials/index.ts","webpack://postprocessing/./passes/ClearMaskPass.ts","webpack://postprocessing/./passes/ClearPass.ts","webpack://postprocessing/./passes/MaskPass.ts","webpack://postprocessing/./passes/Pass.ts","webpack://postprocessing/./passes/RenderPass.ts","webpack://postprocessing/./passes/ShaderPass.ts","webpack://postprocessing/./passes/index.ts","webpack://postprocessing/./passes/lib/index.ts","webpack://postprocessing/./passes/lib/passes.types.ts","webpack://postprocessing/./postprocessing.ts","webpack://postprocessing/external \"three\""],"names":["EffectComposer","renderer","partialOptions","inputBuffer","outputBuffer","copyPass","ShaderPass","CopyMaterial","passes","options","depthBuffer","stencilBuffer","autoClear","createBuffer","clone","oldRenderer","parent","oldSize","newSize","domElement","parentNode","getSize","removeChild","appendChild","width","height","setSize","index","depthTexture","i","pass","needsSwap","RenderPass","DepthTexture","format","DepthStencilFormat","type","UnsignedInt248Type","drawingBufferSize","getDrawingBufferSize","alpha","context","getContextAttributes","renderTarget","WebGLRenderTarget","minFilter","LinearFilter","magFilter","RGBAFormat","RGBFormat","texture","name","generateMipmaps","initialize","undefined","splice","push","needsDepthTexture","createDepthTexture","setDepthTexture","getDepthTexture","indexOf","delta","stencilTest","state","buffer","enabled","render","renderToScreen","buffers","stencil","setFunc","NOTEQUAL","EQUAL","MaskPass","ClearMaskPass","size","dispose","Effect","fragmentShader","vertexShader","settings","attributes","EffectAttribute","NONE","blendFunction","BlendFunction","SCREEN","defines","Map","uniforms","extensions","Set","blendMode","BlendMode","depthPacking","Object","keys","key","opacity","Uniform","SKIP","ADD","addBlendFunction","ALPHA","alphaBlendFunction","AVERAGE","averageBlendFunction","COLOR_BURN","colorBurnBlendFunction","COLOR_DODGE","colorDodgeBlendFunction","DARKEN","darkenBlendFunction","DIFFERENCE","differenceBlendFunction","EXCLUSION","exclusionBlendFunction","LIGHTEN","lightenBlendFunction","MULTIPLY","multiplyBlendFunction","DIVIDE","divideBlendFunction","NEGATION","negationBlendFunction","NORMAL","normalBlendFunction","OVERLAY","overlayBlendFunction","REFLECT","reflectBlendFunction","screenBlendFunction","SOFT_LIGHT","softLightBlendFunction","SUBTRACT","subtractBlendFunction","EffectName","WebGLExtension","fragment","vertex","depthWrite","depthTest","ShaderMaterial","PassName","ClearMask","setTest","Pass","ClearPass","Clear","clearAlpha","clearColor","color","copy","getClearColor","getClearAlpha","setClearColor","setRenderTarget","clear","Color","scene","camera","Mask","inverse","clearStencil","writeValue","clearValue","setMask","depth","setLocked","setOp","REPLACE","ALWAYS","setClear","KEEP","Scene","OrthographicCamera","uniform","quad","material","Array","isArray","Mesh","PlaneBufferGeometry","frustumCulled","add","getFullscreenMaterials","forEach","map","prop","filter","value","Render","overrideMaterial","clearDepth","clearPass","input","Shader","setFullscreenMaterial","setInput","materials"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AAWO,IAAMA,cAAb;AAMI,4BAAkD;AAAA,QAAtCC,QAAsC,uEAA3B,IAA2B;AAAA,QAArBC,cAAqB,uEAAJ,EAAI;;AAAA;;AAC9C,SAAKD,QAAL,GAAgBA,QAAhB;AAOA,SAAKE,WAAL,GAAmB,IAAnB;AAIA,SAAKC,YAAL,GAAoB,IAApB;AAIA,SAAKC,QAAL,GAAgB,IAAIC,kDAAJ,CAAe,IAAIC,uDAAJ,EAAf,CAAhB;AAIA,SAAKC,MAAL,GAAc,EAAd;;AACA,QAAMC,OAAO;AACTC,iBAAW,EAAE,IADJ;AAETC,mBAAa,EAAE;AAFN,OAGNT,cAHM,CAAb;;AAKA,QAAI,KAAKD,QAAL,KAAkB,IAAtB,EAA4B;AACxB,WAAKA,QAAL,CAAcW,SAAd,GAA0B,KAA1B;AACA,WAAKT,WAAL,GAAmB,KAAKU,YAAL,CAAkBJ,OAAO,CAACC,WAA1B,EAAuCD,OAAO,CAACE,aAA/C,CAAnB;AACA,WAAKP,YAAL,GAAoB,KAAKD,WAAL,CAAiBW,KAAjB,EAApB;AACH;AACJ;;AArCL;AAAA;AAAA,oCAgDoBb,QAhDpB,EAgD8B;AACtB,UAAMc,WAAW,GAAG,KAAKd,QAAzB;AACA,UAAIe,MAAJ;AACA,UAAIC,OAAJ;AACA,UAAIC,OAAJ;;AACA,UAAIH,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAKd,QAA5C,EAAsD;AAClD,aAAKA,QAAL,GAAgBA,QAAhB;AACA,aAAKA,QAAL,CAAcW,SAAd,GAA0B,KAA1B;AACAI,cAAM,GAAGD,WAAW,CAACI,UAAZ,CAAuBC,UAAhC;AACAH,eAAO,GAAGF,WAAW,CAACM,OAAZ,EAAV;AACAH,eAAO,GAAGjB,QAAQ,CAACoB,OAAT,EAAV;;AACA,YAAIL,MAAM,KAAK,IAAf,EAAqB;AACjBA,gBAAM,CAACM,WAAP,CAAmBP,WAAW,CAACI,UAA/B;AACAH,gBAAM,CAACO,WAAP,CAAmBtB,QAAQ,CAACkB,UAA5B;AACH;;AACD,YAAIF,OAAO,CAACO,KAAR,KAAkBN,OAAO,CAACM,KAA1B,IAAmCP,OAAO,CAACQ,MAAR,KAAmBP,OAAO,CAACO,MAAlE,EAA0E;AACtE,eAAKC,OAAL;AACH;AACJ;;AACD,aAAOX,WAAP;AACH;AApEL;AAAA;AAAA,oCA0EoBY,KA1EpB,EA0E2B;AACnB,UAAMnB,MAAM,GAAG,KAAKA,MAApB;AACA,UAAIoB,YAAY,GAAG,IAAnB;AACA,UAAIzB,WAAW,GAAG,IAAlB;AACA,UAAI0B,CAAJ;AACA,UAAIC,IAAJ;;AACA,WAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,KAAhB,EAAuB,EAAEE,CAAzB,EAA4B;AACxBC,YAAI,GAAGtB,MAAM,CAACqB,CAAD,CAAb;;AACA,YAAIC,IAAI,CAACC,SAAT,EAAoB;AAChB5B,qBAAW,GAAG,CAACA,WAAf;AACH,SAFD,MAGK,IAAI2B,IAAI,YAAYE,kDAApB,EAAgC;AACjCJ,sBAAY,GAAG,CAACzB,WAAW,GAAG,KAAKA,WAAR,GAAsB,KAAKC,YAAvC,EAAqDwB,YAApE;AACH;AACJ;;AACD,aAAOA,YAAP;AACH;AA1FL;AAAA;AAAA,uCAyGuBJ,KAzGvB,EAyG8BC,MAzG9B,EAyGsC;AAC9B,UAAMG,YAAY,GAAG,IAAIK,kDAAJ,CAAiBT,KAAjB,EAAwBC,MAAxB,CAArB;;AACA,UAAI,KAAKtB,WAAL,CAAiBQ,aAArB,EAAoC;AAChCiB,oBAAY,CAACM,MAAb,GAAsBC,wDAAtB;AACAP,oBAAY,CAACQ,IAAb,GAAoBC,wDAApB;AACH;;AACD,WAAKlC,WAAL,CAAiByB,YAAjB,GAAgCA,YAAhC;AACA,WAAKxB,YAAL,CAAkBwB,YAAlB,GAAiCA,YAAY,CAACd,KAAb,EAAjC;AACH;AAjHL;AAAA;AAAA,iCA6HiBJ,WA7HjB,EA6H8BC,aA7H9B,EA6H6C;AACrC,UAAM2B,iBAAiB,GAAG,KAAKrC,QAAL,CAAcsC,oBAAd,EAA1B;AACA,UAAMC,KAAK,GAAG,KAAKvC,QAAL,CAAcwC,OAAd,CAAsBC,oBAAtB,GAA6CF,KAA3D;AACA,UAAMG,YAAY,GAAG,IAAIC,uDAAJ,CAAsBN,iBAAiB,CAACd,KAAxC,EAA+Cc,iBAAiB,CAACb,MAAjE,EAAyE;AAC1FoB,iBAAS,EAAEC,kDAD+E;AAE1FC,iBAAS,EAAED,kDAF+E;AAG1FZ,cAAM,EAAEM,KAAK,GAAGQ,gDAAH,GAAgBC,+CAH6D;AAI1FvC,mBAAW,EAAXA,WAJ0F;AAK1FC,qBAAa,EAAbA;AAL0F,OAAzE,CAArB;AAOAgC,kBAAY,CAACO,OAAb,CAAqBC,IAArB,GAA4B,uBAA5B;AACAR,kBAAY,CAACO,OAAb,CAAqBE,eAArB,GAAuC,KAAvC;AACA,aAAOT,YAAP;AACH;AA1IL;AAAA;AAAA,4BAiJYb,IAjJZ,EAiJkBH,KAjJlB,EAiJyB;AACjB,UAAMW,iBAAiB,GAAG,KAAKrC,QAAL,CAAcsC,oBAAd,EAA1B;AACAT,UAAI,CAACJ,OAAL,CAAaY,iBAAiB,CAACd,KAA/B,EAAsCc,iBAAiB,CAACb,MAAxD;AACAK,UAAI,CAACuB,UAAL,CAAgB,KAAKpD,QAArB,EAA+B,KAAKA,QAAL,CAAcwC,OAAd,CAAsBC,oBAAtB,GAA6CF,KAA5E;;AACA,UAAIb,KAAK,KAAK2B,SAAd,EAAyB;AACrB,aAAK9C,MAAL,CAAY+C,MAAZ,CAAmB5B,KAAnB,EAA0B,CAA1B,EAA6BG,IAA7B;AACH,OAFD,MAGK;AACDH,aAAK,GAAG,KAAKnB,MAAL,CAAYgD,IAAZ,CAAiB1B,IAAjB,IAAyB,CAAjC;AACH;;AACD,UAAIA,IAAI,CAAC2B,iBAAT,EAA4B;AACxB,YAAI,KAAKtD,WAAL,CAAiByB,YAAjB,KAAkC,IAAtC,EAA4C;AACxC,eAAK8B,kBAAL,CAAwBpB,iBAAiB,CAACd,KAA1C,EAAiDc,iBAAiB,CAACb,MAAnE;AACH;;AACDK,YAAI,CAAC6B,eAAL,CAAqB,KAAKC,eAAL,CAAqBjC,KAArB,CAArB;AACH;AACJ;AAjKL;AAAA;AAAA,+BAqKeG,IArKf,EAqKqB;AACb,WAAKtB,MAAL,CAAY+C,MAAZ,CAAmB,KAAK/C,MAAL,CAAYqD,OAAZ,CAAoB/B,IAApB,CAAnB,EAA8C,CAA9C;AACH;AAvKL;AAAA;AAAA,2BA4KWgC,KA5KX,EA4KkB;AACV,UAAI3D,WAAW,GAAG,KAAKA,WAAvB;AACA,UAAIC,YAAY,GAAG,KAAKA,YAAxB;AACA,UAAI2D,WAAW,GAAG,KAAlB;AACA,UAAItB,OAAJ;AACA,UAAIuB,KAAJ;AACA,UAAIC,MAAJ;AANU;AAAA;AAAA;;AAAA;AAOV,6BAAmB,KAAKzD,MAAxB,8HAAgC;AAAA,cAArBsB,IAAqB;;AAC5B,cAAIA,IAAI,CAACoC,OAAT,EAAkB;AACdpC,gBAAI,CAACqC,MAAL,CAAY,KAAKlE,QAAjB,EAA2BE,WAA3B,EAAwCC,YAAxC,EAAsD0D,KAAtD,EAA6DC,WAA7D;;AACA,gBAAIjC,IAAI,CAACC,SAAT,EAAoB;AAChB,kBAAIgC,WAAJ,EAAiB;AACb,qBAAK1D,QAAL,CAAc+D,cAAd,GAA+BtC,IAAI,CAACsC,cAApC;AACA3B,uBAAO,GAAG,KAAKxC,QAAL,CAAcwC,OAAxB;AACAuB,qBAAK,GAAG,KAAK/D,QAAL,CAAc+D,KAAtB;AAEAA,qBAAK,CAACK,OAAN,CAAcC,OAAd,CAAsBC,OAAtB,CAA8B9B,OAAO,CAAC+B,QAAtC,EAAgD,CAAhD,EAAmD,UAAnD;AACA,qBAAKnE,QAAL,CAAc8D,MAAd,CAAqB,KAAKlE,QAA1B,EAAoCE,WAApC,EAAiDC,YAAjD;AACA4D,qBAAK,CAACK,OAAN,CAAcC,OAAd,CAAsBC,OAAtB,CAA8B9B,OAAO,CAACgC,KAAtC,EAA6C,CAA7C,EAAgD,UAAhD;AACH;;AACDR,oBAAM,GAAG9D,WAAT;AACAA,yBAAW,GAAGC,YAAd;AACAA,0BAAY,GAAG6D,MAAf;AACH;;AACD,gBAAInC,IAAI,YAAY4C,gDAApB,EAA8B;AAC1BX,yBAAW,GAAG,IAAd;AACH,aAFD,MAGK,IAAIjC,IAAI,YAAY6C,qDAApB,EAAmC;AACpCZ,yBAAW,GAAG,KAAd;AACH;AACJ;AACJ;AA/BS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCb;AA5ML;AAAA;AAAA,4BAsNYvC,KAtNZ,EAsNmBC,MAtNnB,EAsN2B;AACnB,UAAImD,IAAJ;;AACA,UAAIpD,KAAK,KAAK8B,SAAV,IAAuB7B,MAAM,KAAK6B,SAAtC,EAAiD;AAC7CsB,YAAI,GAAG,KAAK3E,QAAL,CAAcoB,OAAd,EAAP;AACAG,aAAK,GAAGoD,IAAI,CAACpD,KAAb;AACAC,cAAM,GAAGmD,IAAI,CAACnD,MAAd;AACH;;AAED,WAAKxB,QAAL,CAAcyB,OAAd,CAAsBF,KAAtB,EAA6BC,MAA7B;AAEA,UAAMa,iBAAiB,GAAG,KAAKrC,QAAL,CAAcsC,oBAAd,EAA1B;AACA,WAAKpC,WAAL,CAAiBuB,OAAjB,CAAyBY,iBAAiB,CAACd,KAA3C,EAAkDc,iBAAiB,CAACb,MAApE;AACA,WAAKrB,YAAL,CAAkBsB,OAAlB,CAA0BY,iBAAiB,CAACd,KAA5C,EAAmDc,iBAAiB,CAACb,MAArE;AAZmB;AAAA;AAAA;;AAAA;AAanB,8BAAmB,KAAKjB,MAAxB,mIAAgC;AAAA,cAArBsB,IAAqB;AAC5BA,cAAI,CAACJ,OAAL,CAAaY,iBAAiB,CAACd,KAA/B,EAAsCc,iBAAiB,CAACb,MAAxD;AACH;AAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBtB;AAtOL;AAAA;AAAA,4BA0OY;AACJ,UAAMkB,YAAY,GAAG,KAAK9B,YAAL,CAAkB,KAAKV,WAAL,CAAiBO,WAAnC,EAAgD,KAAKP,WAAL,CAAiBQ,aAAjE,CAArB;AACA,WAAKkE,OAAL;AAEA,WAAK1E,WAAL,GAAmBwC,YAAnB;AACA,WAAKvC,YAAL,GAAoBuC,YAAY,CAAC7B,KAAb,EAApB;AACA,WAAKT,QAAL,GAAgB,IAAIC,kDAAJ,CAAe,IAAIC,uDAAJ,EAAf,CAAhB;AACH;AAjPL;AAAA;AAAA,8BAwPc;AAAA;AAAA;AAAA;;AAAA;AACN,8BAAmB,KAAKC,MAAxB;AAAA,cAAWsB,IAAX;AACIA,cAAI,CAAC+C,OAAL;AADJ;AADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGN,WAAKrE,MAAL,GAAc,EAAd;;AACA,UAAI,KAAKL,WAAL,KAAqB,IAAzB,EAA+B;AAC3B,aAAKA,WAAL,CAAiB0E,OAAjB;AACA,aAAK1E,WAAL,GAAmB,IAAnB;AACH;;AACD,UAAI,KAAKC,YAAL,KAAsB,IAA1B,EAAgC;AAC5B,aAAKA,YAAL,CAAkByE,OAAlB;AACA,aAAKzE,YAAL,GAAoB,IAApB;AACH;;AACD,WAAKC,QAAL,CAAcwE,OAAd;AACH;AArQL;;AAAA;AAAA,I;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAKO,IAAMC,MAAb;AACI,kBAAY3B,IAAZ,EAAkB4B,cAAlB,EAAuD;AAAA,QAArB7E,cAAqB,uEAAJ,EAAI;;AAAA;;AACnD,SAAKiD,IAAL,GAAYA,IAAZ;AACA,SAAK4B,cAAL,GAAsBA,cAAtB;AACA,SAAKC,YAAL,GAAoB,IAApB;;AACA,QAAMC,QAAQ;AACVC,gBAAU,EAAEC,oDAAe,CAACC,IADlB;AAEVC,mBAAa,EAAEC,uDAAa,CAACC,MAFnB;AAGVC,aAAO,EAAE,IAAIC,GAAJ,EAHC;AAIVC,cAAQ,EAAE,IAAID,GAAJ,EAJA;AAKVE,gBAAU,EAAE,IAAIC,GAAJ,EALF;AAMVZ,kBAAY,EAAE;AANJ,OAOP9E,cAPO,CAAd;;AASA,SAAKgF,UAAL,GAAkBD,QAAQ,CAACC,UAA3B;AACA,SAAKF,YAAL,GAAoBC,QAAQ,CAACD,YAA7B;AACA,SAAKQ,OAAL,GAAeP,QAAQ,CAACO,OAAxB;AACA,SAAKE,QAAL,GAAgBT,QAAQ,CAACS,QAAzB;AACA,SAAKC,UAAL,GAAkBV,QAAQ,CAACU,UAA3B;AACA,SAAKE,SAAL,GAAiB,IAAIC,mDAAJ,CAAcb,QAAQ,CAACI,aAAvB,CAAjB;AACH;;AApBL;AAAA;AAAA,oCA2BoBzD,YA3BpB,EA2BoD;AAAA,UAAlBmE,YAAkB,uEAAH,CAAG;AAAG;AA3BvD;AAAA;AAAA,2BAyCW9F,QAzCX,EAyCqBE,WAzCrB,EAyC6C;AAAA,UAAX2D,KAAW,uEAAH,CAAG;AAAG;AAzChD;AAAA;AAAA,4BAmDYtC,KAnDZ,EAmDmBC,MAnDnB,EAmD2B,CAAG;AAnD9B;AAAA;AAAA,+BAqEexB,QArEf,EAqEyBuC,KArEzB,EAqEgC,CAAG;AArEnC;AAAA;AAAA,8BAkFc;AAAA,iBACYwD,MAAM,CAACC,IAAP,CAAY,IAAZ,CADZ;;AACN,+CAAqC;AAAhC,YAAMC,GAAG,WAAT;;AACD,YAAI,KAAKA,GAAL,MAAc,IAAd,IAAsB,OAAO,KAAKA,GAAL,EAAUrB,OAAjB,KAA6B,UAAvD,EAAmE;AAC/D,eAAKqB,GAAL,EAAUrB,OAAV;AACA,eAAKqB,GAAL,IAAY,IAAZ;AACH;AACJ;AACJ;AAzFL;;AAAA;AAAA,I;;;;;;;;;;;;ACHA;AAAA;AAAO,IAAIZ,aAAJ;;AACP,CAAC,UAAUA,aAAV,EAAyB;AAEtBA,eAAa,CAACA,aAAa,CAAC,MAAD,CAAb,GAAwB,CAAzB,CAAb,GAA2C,MAA3C;AAEAA,eAAa,CAACA,aAAa,CAAC,KAAD,CAAb,GAAuB,CAAxB,CAAb,GAA0C,KAA1C;AAEAA,eAAa,CAACA,aAAa,CAAC,OAAD,CAAb,GAAyB,CAA1B,CAAb,GAA4C,OAA5C;AAEAA,eAAa,CAACA,aAAa,CAAC,SAAD,CAAb,GAA2B,CAA5B,CAAb,GAA8C,SAA9C;AAEAA,eAAa,CAACA,aAAa,CAAC,YAAD,CAAb,GAA8B,CAA/B,CAAb,GAAiD,YAAjD;AAEAA,eAAa,CAACA,aAAa,CAAC,aAAD,CAAb,GAA+B,CAAhC,CAAb,GAAkD,aAAlD;AAEAA,eAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,CAA3B,CAAb,GAA6C,QAA7C;AAEAA,eAAa,CAACA,aAAa,CAAC,YAAD,CAAb,GAA8B,CAA/B,CAAb,GAAiD,YAAjD;AAEAA,eAAa,CAACA,aAAa,CAAC,WAAD,CAAb,GAA6B,CAA9B,CAAb,GAAgD,WAAhD;AAEAA,eAAa,CAACA,aAAa,CAAC,SAAD,CAAb,GAA2B,CAA5B,CAAb,GAA8C,SAA9C;AAEAA,eAAa,CAACA,aAAa,CAAC,UAAD,CAAb,GAA4B,EAA7B,CAAb,GAAgD,UAAhD;AAEAA,eAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,EAA3B,CAAb,GAA8C,QAA9C;AAEAA,eAAa,CAACA,aAAa,CAAC,UAAD,CAAb,GAA4B,EAA7B,CAAb,GAAgD,UAAhD;AAEAA,eAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,EAA3B,CAAb,GAA8C,QAA9C;AAEAA,eAAa,CAACA,aAAa,CAAC,SAAD,CAAb,GAA2B,EAA5B,CAAb,GAA+C,SAA/C;AAEAA,eAAa,CAACA,aAAa,CAAC,SAAD,CAAb,GAA2B,EAA5B,CAAb,GAA+C,SAA/C;AAEAA,eAAa,CAACA,aAAa,CAAC,QAAD,CAAb,GAA0B,EAA3B,CAAb,GAA8C,QAA9C;AAEAA,eAAa,CAACA,aAAa,CAAC,YAAD,CAAb,GAA8B,EAA/B,CAAb,GAAkD,YAAlD;AAEAA,eAAa,CAACA,aAAa,CAAC,UAAD,CAAb,GAA4B,EAA7B,CAAb,GAAgD,UAAhD;AACH,CAvCD,EAuCGA,aAAa,KAAKA,aAAa,GAAG,EAArB,CAvChB,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO,IAAMQ,SAAb;AAOI,qBAAYT,aAAZ,EAA0C;AAAA,QAAfc,OAAe,uEAAL,GAAK;;AAAA;;AACtC,SAAKd,aAAL,GAAqBA,aAArB;AACA,SAAKc,OAAL,GAAe,IAAIC,6CAAJ,CAAYD,OAAZ,CAAf;AACH;;AAVL;AAAA;AAAA,oCAYoB;AACZ,cAAQ,KAAKd,aAAb;AACI,aAAKC,4DAAa,CAACe,IAAnB;AAAyB,iBAAO,IAAP;;AACzB,aAAKf,4DAAa,CAACgB,GAAnB;AAAwB,iBAAOC,4DAAP;;AACxB,aAAKjB,4DAAa,CAACkB,KAAnB;AAA0B,iBAAOC,8DAAP;;AAC1B,aAAKnB,4DAAa,CAACoB,OAAnB;AAA4B,iBAAOC,gEAAP;;AAC5B,aAAKrB,4DAAa,CAACsB,UAAnB;AAA+B,iBAAOC,mEAAP;;AAC/B,aAAKvB,4DAAa,CAACwB,WAAnB;AAAgC,iBAAOC,oEAAP;;AAChC,aAAKzB,4DAAa,CAAC0B,MAAnB;AAA2B,iBAAOC,+DAAP;;AAC3B,aAAK3B,4DAAa,CAAC4B,UAAnB;AAA+B,iBAAOC,mEAAP;;AAC/B,aAAK7B,4DAAa,CAAC8B,SAAnB;AAA8B,iBAAOC,kEAAP;;AAC9B,aAAK/B,4DAAa,CAACgC,OAAnB;AAA4B,iBAAOC,iEAAP;;AAC5B,aAAKjC,4DAAa,CAACkC,QAAnB;AAA6B,iBAAOC,kEAAP;;AAC7B,aAAKnC,4DAAa,CAACoC,MAAnB;AAA2B,iBAAOC,gEAAP;;AAC3B,aAAKrC,4DAAa,CAACsC,QAAnB;AAA6B,iBAAOC,kEAAP;;AAC7B,aAAKvC,4DAAa,CAACwC,MAAnB;AAA2B,iBAAOC,gEAAP;;AAC3B,aAAKzC,4DAAa,CAAC0C,OAAnB;AAA4B,iBAAOC,iEAAP;;AAC5B,aAAK3C,4DAAa,CAAC4C,OAAnB;AAA4B,iBAAOC,iEAAP;;AAC5B,aAAK7C,4DAAa,CAACC,MAAnB;AAA2B,iBAAO6C,gEAAP;;AAC3B,aAAK9C,4DAAa,CAAC+C,UAAnB;AAA+B,iBAAOC,oEAAP;;AAC/B,aAAKhD,4DAAa,CAACiD,QAAnB;AAA6B,iBAAOC,kEAAP;AAnBjC;AAqBH;AAlCL;;AAAA;AAAA,I;;;;;;;;;;;ACrBA,wFAAwF,6DAA6D,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACA9R,wFAAwF,+CAA+C,KAAK,0EAA0E,iDAAiD,KAAK,G;;;;;;;;;;;ACA5Q,wFAAwF,2DAA2D,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACA5R,mEAAmE,4DAA4D,KAAK,0EAA0E,uEAAuE,+CAA+C,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACA7c,mEAAmE,sDAAsD,KAAK,0EAA0E,uEAAuE,+CAA+C,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACAvc,wFAAwF,uDAAuD,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACAxR,wFAAwF,wDAAwD,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACAzR,mEAAmE,+CAA+C,KAAK,0EAA0E,uEAAuE,+CAA+C,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACAhc,wFAAwF,mEAAmE,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACApS,wFAAwF,uDAAuD,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACAxR,wFAAwF,mDAAmD,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACApR,wFAAwF,sEAAsE,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACAvS,wFAAwF,+CAA+C,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACAhR,mEAAmE,6EAA6E,KAAK,0EAA0E,uEAAuE,+CAA+C,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACA9d,mEAAmE,0DAA0D,KAAK,0EAA0E,uEAAuE,+CAA+C,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACA3c,wFAAwF,2EAA2E,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACA5S,mEAAmE,+HAA+H,KAAK,0EAA0E,uEAAuE,+CAA+C,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;ACAhhB,wFAAwF,mEAAmE,KAAK,0EAA0E,qDAAqD,KAAK,G;;;;;;;;;;;;ACKpS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAO,IAAIC,UAAJ;;AACP,CAAC,UAAUA,UAAV,EAAsB;AACnBA,YAAU,CAAC,QAAD,CAAV,GAAuB,cAAvB;AACH,CAFD,EAEGA,UAAU,KAAKA,UAAU,GAAG,EAAlB,CAFb;;AAUO,IAAItD,eAAJ;;AACP,CAAC,UAAUA,eAAV,EAA2B;AAExBA,iBAAe,CAACA,eAAe,CAAC,MAAD,CAAf,GAA0B,CAA3B,CAAf,GAA+C,MAA/C;AAEAA,iBAAe,CAACA,eAAe,CAAC,OAAD,CAAf,GAA2B,CAA5B,CAAf,GAAgD,OAAhD;AAKAA,iBAAe,CAACA,eAAe,CAAC,aAAD,CAAf,GAAiC,CAAlC,CAAf,GAAsD,aAAtD;AACH,CAVD,EAUGA,eAAe,KAAKA,eAAe,GAAG,EAAvB,CAVlB;;AAYO,IAAIuD,cAAJ;;AACP,CAAC,UAAUA,cAAV,EAA0B;AAEvBA,gBAAc,CAAC,aAAD,CAAd,GAAgC,aAAhC;AAEAA,gBAAc,CAAC,YAAD,CAAd,GAA+B,WAA/B;AAEAA,gBAAc,CAAC,cAAD,CAAd,GAAiC,aAAjC;AAEAA,gBAAc,CAAC,oBAAD,CAAd,GAAuC,kBAAvC;AACH,CATD,EASGA,cAAc,KAAKA,cAAc,GAAG,EAAtB,CATjB,E;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAIO,IAAMnI,YAAb;AAAA;;AACI,0BAAc;AAAA;;AAAA,qFACJ;AACFmF,cAAQ,EAAE;AACNvF,mBAAW,EAAE,IAAIiG,6CAAJ,CAAY,IAAZ,CADP;AAEND,eAAO,EAAE,IAAIC,6CAAJ,CAAY,GAAZ;AAFH,OADR;AAKFrB,oBAAc,EAAE4D,6DALd;AAMF3D,kBAAY,EAAE4D,6DANZ;AAOFC,gBAAU,EAAE,KAPV;AAQFC,eAAS,EAAE;AART,KADI;AAWb;;AAZL;AAAA,EAAkCC,oDAAlC,E;;;;;;;;;;;ACNA,gDAAgD,wBAAwB,qBAAqB,iBAAiB,+CAA+C,mCAAmC,KAAK,G;;;;;;;;;;;ACArM,mCAAmC,iBAAiB,eAAe,2EAA2E,KAAK,G;;;;;;;;;;;;ACQnJ;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AAIO,IAAMpE,aAAb;AAAA;;AACI,2BAAc;AAAA;;AAAA;;AACV,uFAAMqE,6CAAQ,CAACC,SAAf;AACA,UAAKlH,SAAL,GAAiB,KAAjB;AAFU;AAGb;;AAJL;AAAA;AAAA,2BAQW9B,QARX,EAQqB;AACbA,cAAQ,CAAC+D,KAAT,CAAeK,OAAf,CAAuBC,OAAvB,CAA+B4E,OAA/B,CAAuC,KAAvC;AACH;AAVL;;AAAA;AAAA,EAAmCC,0CAAnC,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAQO,IAAMC,SAAb;AAAA;;AAKI,uBAAiC;AAAA;;AAAA,QAArBlJ,cAAqB,uEAAJ,EAAI;;AAAA;;AAC7B,mFAAM8I,6CAAQ,CAACK,KAAf;;AACA,QAAM5I,OAAO;AACT6I,gBAAU,EAAE,CADH;AAETC,gBAAU,EAAE;AAFH,OAGNrJ,cAHM,CAAb;;AAKA,UAAK6B,SAAL,GAAiB,KAAjB;AACA,UAAKwH,UAAL,GAAkB9I,OAAO,CAAC8I,UAA1B;AACA,UAAKD,UAAL,GAAkB7I,OAAO,CAAC6I,UAA1B;AAT6B;AAUhC;;AAfL;AAAA;AAAA,2BAsBWrJ,QAtBX,EAsBqBE,WAtBrB,EAsBkC;AAC1B,UAAMoJ,UAAU,GAAG,KAAKA,UAAxB;AACA,UAAID,UAAJ;;AACA,UAAIC,UAAU,KAAK,IAAnB,EAAyB;AACrBH,iBAAS,CAACI,KAAV,CAAgBC,IAAhB,CAAqBxJ,QAAQ,CAACyJ,aAAT,EAArB;AACAJ,kBAAU,GAAGrJ,QAAQ,CAAC0J,aAAT,EAAb;AACA1J,gBAAQ,CAAC2J,aAAT,CAAuBL,UAAvB,EAAmC,KAAKD,UAAxC;AACH;;AACDrJ,cAAQ,CAAC4J,eAAT,CAAyB,KAAKzF,cAAL,GAAsBd,SAAtB,GAAkCnD,WAA3D;AACAF,cAAQ,CAAC6J,KAAT;;AACA,UAAIP,UAAU,KAAK,IAAnB,EAAyB;AACrBtJ,gBAAQ,CAAC2J,aAAT,CAAuBR,SAAS,CAACI,KAAjC,EAAwCF,UAAxC;AACH;AACJ;AAnCL;;AAAA;AAAA,EAA+BH,0CAA/B;AAsCAC,SAAS,CAACI,KAAV,GAAkB,IAAIO,2CAAJ,EAAlB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AAOO,IAAMrF,QAAb;AAAA;;AAOI,oBAAYsF,KAAZ,EAAmBC,MAAnB,EAA2B;AAAA;;AAAA;;AACvB,kFAAMjB,6CAAQ,CAACkB,IAAf,EAAqBF,KAArB,EAA4BC,MAA5B;AAEA,UAAKE,OAAL,GAAe,KAAf;AAEA,UAAKC,YAAL,GAAoB,IAApB;AACA,UAAKrI,SAAL,GAAiB,KAAjB;AANuB;AAO1B;;AAdL;AAAA;AAAA,2BAsBW9B,QAtBX,EAsBqBE,WAtBrB,EAsBkCC,YAtBlC,EAsBgD;AACxC,UAAMqC,OAAO,GAAGxC,QAAQ,CAACwC,OAAzB;AACA,UAAMuB,KAAK,GAAG/D,QAAQ,CAAC+D,KAAvB;AACA,UAAMgG,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMI,UAAU,GAAG,KAAKF,OAAL,GAAe,CAAf,GAAmB,CAAtC;AACA,UAAMG,UAAU,GAAG,IAAID,UAAvB;AAEArG,WAAK,CAACK,OAAN,CAAcmF,KAAd,CAAoBe,OAApB,CAA4B,CAA5B;AACAvG,WAAK,CAACK,OAAN,CAAcmG,KAAd,CAAoBD,OAApB,CAA4B,CAA5B;AAEAvG,WAAK,CAACK,OAAN,CAAcmF,KAAd,CAAoBiB,SAApB,CAA8B,IAA9B;AACAzG,WAAK,CAACK,OAAN,CAAcmG,KAAd,CAAoBC,SAApB,CAA8B,IAA9B;AAEAzG,WAAK,CAACK,OAAN,CAAcC,OAAd,CAAsB4E,OAAtB,CAA8B,IAA9B;AACAlF,WAAK,CAACK,OAAN,CAAcC,OAAd,CAAsBoG,KAAtB,CAA4BjI,OAAO,CAACkI,OAApC,EAA6ClI,OAAO,CAACkI,OAArD,EAA8DlI,OAAO,CAACkI,OAAtE;AACA3G,WAAK,CAACK,OAAN,CAAcC,OAAd,CAAsBC,OAAtB,CAA8B9B,OAAO,CAACmI,MAAtC,EAA8CP,UAA9C,EAA0D,UAA1D;AACArG,WAAK,CAACK,OAAN,CAAcC,OAAd,CAAsBuG,QAAtB,CAA+BP,UAA/B;;AAEA,UAAI,KAAKF,YAAT,EAAuB;AACnB,YAAI,KAAKhG,cAAT,EAAyB;AACrBnE,kBAAQ,CAAC4J,eAAT;AACA5J,kBAAQ,CAACmK,YAAT;AACH,SAHD,MAIK;AACDnK,kBAAQ,CAAC4J,eAAT,CAAyB1J,WAAzB;AACAF,kBAAQ,CAACmK,YAAT;AACAnK,kBAAQ,CAAC4J,eAAT,CAAyBzJ,YAAzB;AACAH,kBAAQ,CAACmK,YAAT;AACH;AACJ;;AAED,UAAI,KAAKhG,cAAT,EAAyB;AACrBnE,gBAAQ,CAACkE,MAAT,CAAgB6F,KAAhB,EAAuBC,MAAvB;AACH,OAFD,MAGK;AACDhK,gBAAQ,CAACkE,MAAT,CAAgB6F,KAAhB,EAAuBC,MAAvB,EAA+B9J,WAA/B;AACAF,gBAAQ,CAACkE,MAAT,CAAgB6F,KAAhB,EAAuBC,MAAvB,EAA+B7J,YAA/B;AACH;;AAED4D,WAAK,CAACK,OAAN,CAAcmF,KAAd,CAAoBiB,SAApB,CAA8B,KAA9B;AACAzG,WAAK,CAACK,OAAN,CAAcmG,KAAd,CAAoBC,SAApB,CAA8B,KAA9B;AAEAzG,WAAK,CAACK,OAAN,CAAcC,OAAd,CAAsBC,OAAtB,CAA8B9B,OAAO,CAACgC,KAAtC,EAA6C,CAA7C,EAAgD,UAAhD;AACAT,WAAK,CAACK,OAAN,CAAcC,OAAd,CAAsBoG,KAAtB,CAA4BjI,OAAO,CAACqI,IAApC,EAA0CrI,OAAO,CAACqI,IAAlD,EAAwDrI,OAAO,CAACqI,IAAhE;AACH;AAnEL;;AAAA;AAAA,EAA8B3B,0CAA9B,E;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAOO,IAAMA,IAAb;AAQI,gBAAYhG,IAAZ,EAA4F;AAAA,QAA1E6G,KAA0E,uEAAlE,IAAIe,2CAAJ,EAAkE;AAAA,QAArDd,MAAqD,uEAA5C,IAAIe,wDAAJ,CAAuB,CAAC,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,CAA4C;;AAAA;;AACxF,SAAK7H,IAAL,GAAYA,IAAZ;AACA,SAAK6G,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AAEA,SAAKgB,OAAL,GAAe,IAAf;AAIA,SAAKC,IAAL,GAAY,IAAZ;AAQA,SAAKnJ,SAAL,GAAiB,IAAjB;AAQA,SAAK0B,iBAAL,GAAyB,KAAzB;AAIA,SAAKW,cAAL,GAAsB,KAAtB;AAIA,SAAKF,OAAL,GAAe,IAAf;AACH;;AA1CL;AAAA;AAAA,4CAgD4B;AACpB,aAAQ,KAAKgH,IAAL,KAAc,IAAf,GAAuB,KAAKA,IAAL,CAAUC,QAAjC,GAA4C,IAAnD;AACH;AAlDL;AAAA;AAAA,6CAwD6B;AACrB,aAAO,KAAKD,IAAL,KAAc,IAAd,GACD,EADC,GAEDE,KAAK,CAACC,OAAN,CAAc,KAAKH,IAAL,CAAUC,QAAxB,IACI,KAAKD,IAAL,CAAUC,QADd,GAEI,CAAC,KAAKD,IAAL,CAAUC,QAAX,CAJV;AAKH;AA9DL;AAAA;AAAA,0CAuE0BA,QAvE1B,EAuEoC;AAC5B,UAAI,KAAKD,IAAL,KAAc,IAAlB,EAAwB;AACpB,aAAKA,IAAL,CAAUC,QAAV,GAAqBA,QAArB;AACH,OAFD,MAGK;AACD,YAAMD,IAAI,GAAG,IAAII,0CAAJ,CAAS,IAAIC,yDAAJ,CAAwB,CAAxB,EAA2B,CAA3B,CAAT,EAAwCJ,QAAxC,CAAb;AACAD,YAAI,CAACM,aAAL,GAAqB,KAArB;;AACA,YAAI,KAAKxB,KAAL,KAAe,IAAnB,EAAyB;AACrB,eAAKA,KAAL,CAAWyB,GAAX,CAAeP,IAAf;AACA,eAAKA,IAAL,GAAYA,IAAZ;AACH;AACJ;AACJ;AAnFL;AAAA;AAAA,sCAyFsB;AACd,aAAO,IAAP;AACH;AA3FL;AAAA;AAAA,oCAqGoBtJ,YArGpB,EAqGoD;AAAA,UAAlBmE,YAAkB,uEAAH,CAAG;AAAG;AArGvD;AAAA;AAAA,4BAmHYvE,KAnHZ,EAmHmBC,MAnHnB,EAmH2B,CAAG;AAnH9B;AAAA;AAAA,+BAqIexB,QArIf,EAqIyBuC,KArIzB,EAqIgC,CAAG;AArInC;AAAA;AAAA,8BAmJc;AAAA;;AACN,WAAKkJ,sBAAL,GAA8BC,OAA9B,CAAsC,UAAAR,QAAQ;AAAA,eAAIA,QAAQ,CAACtG,OAAT,EAAJ;AAAA,OAA9C;AAIAmB,YAAM,CAACC,IAAP,CAAY,IAAZ,EACK2F,GADL,CACS,UAAAC,IAAI;AAAA,eAAI,KAAI,CAACA,IAAD,CAAR;AAAA,OADb,EAEKC,MAFL,CAEY,UAACC,KAAD;AAAA,eAAWA,KAAK,KAAK,IAAV,IAChB,QAAOA,KAAP,MAAiB,QADD,IAEhB,OAAOA,KAAK,CAAClH,OAAb,KAAyB,UAFpB;AAAA,OAFZ,EAKK8G,OALL,CAKa,UAAAI,KAAK;AAAA,eAAIA,KAAK,CAAClH,OAAN,EAAJ;AAAA,OALlB;AAMH;AA9JL;;AAAA;AAAA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AAKO,IAAM7C,UAAb;AAAA;;AAQI,sBAAYgI,KAAZ,EAAmBC,MAAnB,EAAgD;AAAA;;AAAA,QAArB/J,cAAqB,uEAAJ,EAAI;;AAAA;;AAC5C,oFAAM8I,6CAAQ,CAACgD,MAAf,EAAuBhC,KAAvB,EAA8BC,MAA9B;AACA,UAAKD,KAAL,GAAaA,KAAb;AACA,UAAKC,MAAL,GAAcA,MAAd;AACA,UAAKgC,gBAAL,GAAwB,IAAxB;;AACA,QAAMxL,OAAO;AACTwL,sBAAgB,EAAE,IADT;AAET3C,gBAAU,EAAE,CAFH;AAGT4C,gBAAU,EAAE,KAHH;AAITpC,WAAK,EAAE;AAJE,OAKN5J,cALM,CAAb;;AAOA,UAAK6B,SAAL,GAAiB,KAAjB;AACA,UAAKoK,SAAL,GAAiB,IAAI/C,oDAAJ,CAAc3I,OAAd,CAAjB;AACA,UAAKwL,gBAAL,GAAwBxL,OAAO,CAACwL,gBAAhC;AACA,UAAKC,UAAL,GAAkBzL,OAAO,CAACyL,UAA1B;AACA,UAAKpC,KAAL,GAAarJ,OAAO,CAACqJ,KAArB;AAhB4C;AAiB/C;;AAzBL;AAAA;AAAA,2BAgCW7J,QAhCX,EAgCqBE,WAhCrB,EAgCkC;AAC1B,UAAM6J,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMrH,YAAY,GAAG,KAAKyB,cAAL,GAAsBd,SAAtB,GAAkCnD,WAAvD;AACA,UAAM8L,gBAAgB,GAAGjC,KAAK,CAACiC,gBAA/B;;AACA,UAAI,KAAKnC,KAAT,EAAgB;AACZ,aAAKqC,SAAL,CAAe/H,cAAf,GAAgC,KAAKA,cAArC;AACA,aAAK+H,SAAL,CAAehI,MAAf,CAAsBlE,QAAtB,EAAgCE,WAAhC;AACH,OAHD,MAIK,IAAI,KAAK+L,UAAT,EAAqB;AACtBjM,gBAAQ,CAAC4J,eAAT,CAAyBlH,YAAzB;AACA1C,gBAAQ,CAACiM,UAAT;AACH;;AACDlC,WAAK,CAACiC,gBAAN,GAAyB,KAAKA,gBAA9B;AACAhM,cAAQ,CAACkE,MAAT,CAAgB6F,KAAhB,EAAuB,KAAKC,MAA5B,EAAoCtH,YAApC;AACAqH,WAAK,CAACiC,gBAAN,GAAyBA,gBAAzB;AACH;AA/CL;;AAAA;AAAA,EAAgC9C,0CAAhC,E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAOO,IAAM7I,UAAb;AAAA;;AAOI,sBAAY6K,QAAZ,EAA6C;AAAA;;AAAA,QAAvBiB,KAAuB,uEAAf,aAAe;;AAAA;;AACzC,oFAAMpD,6CAAQ,CAACqD,MAAf;;AACA,UAAKC,qBAAL,CAA2BnB,QAA3B;;AAIA,UAAKF,OAAL,GAAe,IAAf;;AACA,UAAKsB,QAAL,CAAcH,KAAd;;AAPyC;AAQ5C;;AAfL;AAAA;AAAA,6BAyBaA,KAzBb,EAyBoB;AAAA;;AACZ,UAAMI,SAAS,GAAG,KAAKd,sBAAL,EAAlB;AACA,WAAKT,OAAL,GAAe,IAAf;AACAuB,eAAS,CAACb,OAAV,CAAkB,UAAAR,QAAQ,EAAI;AAC1B,YAAMzF,QAAQ,GAAGyF,QAAQ,CAACzF,QAA1B;;AACA,YAAIA,QAAQ,CAAC0G,KAAD,CAAR,KAAoB9I,SAAxB,EAAmC;AAC/B,gBAAI,CAAC2H,OAAL,GAAevF,QAAQ,CAAC0G,KAAD,CAAvB;AACH;AACJ,OALD;AAMH;AAlCL;AAAA;AAAA,2BA0CWnM,QA1CX,EA0CqBE,WA1CrB,EA0CkCC,YA1ClC,EA0CgD;AACxC,UAAI,KAAK6K,OAAL,KAAiB,IAArB,EAA2B;AACvB,aAAKA,OAAL,CAAac,KAAb,GAAqB5L,WAAW,CAAC+C,OAAjC;AACH;;AACDjD,cAAQ,CAACkE,MAAT,CAAgB,KAAK6F,KAArB,EAA4B,KAAKC,MAAjC,EAAyC,KAAK7F,cAAL,GAAsBd,SAAtB,GAAkClD,YAA3E;AACH;AA/CL;;AAAA;AAAA,EAAgC+I,0CAAhC,E;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAO,IAAIH,QAAJ;;AACP,CAAC,UAAUA,QAAV,EAAoB;AACjBA,UAAQ,CAAC,OAAD,CAAR,GAAoB,OAApB;AACAA,UAAQ,CAAC,QAAD,CAAR,GAAqB,QAArB;AACAA,UAAQ,CAAC,QAAD,CAAR,GAAqB,QAArB;AACAA,UAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB;AACAA,UAAQ,CAAC,WAAD,CAAR,GAAwB,WAAxB;AACH,CAND,EAMGA,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CANX,E;;;;;;;;;;;;ACIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;ACRA,mD","file":"postprocessing.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"three\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"three\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"postprocessing\"] = factory(require(\"three\"));\n\telse\n\t\troot[\"postprocessing\"] = factory(root[\"three\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_three__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./postprocessing.ts\");\n","import { DepthStencilFormat, DepthTexture, LinearFilter, RGBAFormat, RGBFormat, UnsignedInt248Type, WebGLRenderTarget, } from 'three';\nimport { ClearMaskPass, MaskPass, RenderPass, ShaderPass } from '../passes';\nimport { CopyMaterial } from '../materials';\n/**\n * The EffectComposer may be used in place of a normal WebGLRenderer.\n *\n * The auto clear behaviour of the provided renderer will be disabled to prevent\n * unnecessary clear operations.\n *\n * It is common practice to use a {@link RenderPass} as the first pass to\n * automatically clear the screen and render the scene to a texture for further\n * processing.\n */\nexport class EffectComposer {\n    /**\n     * Constructs a new effect composer.\n     * @param renderer- The renderer that should be used.\n     * @param options - The options.\n     */\n    constructor(renderer = null, partialOptions = {}) {\n        this.renderer = renderer;\n        /**\n         * The input buffer.\n         *\n         * Reading from and writing to the same render target should be avoided.\n         * Therefore, two seperate yet identical buffers are used.\n         */\n        this.inputBuffer = null;\n        /**\n         * The output buffer.\n         */\n        this.outputBuffer = null;\n        /**\n         * A copy pass used for copying masked scenes.\n         */\n        this.copyPass = new ShaderPass(new CopyMaterial());\n        /**\n         * The passes.\n         */\n        this.passes = [];\n        const options = {\n            depthBuffer: true,\n            stencilBuffer: false,\n            ...partialOptions,\n        };\n        if (this.renderer !== null) {\n            this.renderer.autoClear = false;\n            this.inputBuffer = this.createBuffer(options.depthBuffer, options.stencilBuffer);\n            this.outputBuffer = this.inputBuffer.clone();\n        }\n    }\n    /**\n     * Replaces the current renderer with the given one. The DOM element of the\n     * current renderer will automatically be removed from its parent node and the\n     * DOM element of the new renderer will take its place.\n     *\n     * The auto clear mechanism of the provided renderer will be disabled.\n     *\n     * @param renderer New renderer.\n     * @return The old renderer.\n     */\n    replaceRenderer(renderer) {\n        const oldRenderer = this.renderer;\n        let parent;\n        let oldSize;\n        let newSize;\n        if (oldRenderer !== null && oldRenderer !== renderer) {\n            this.renderer = renderer;\n            this.renderer.autoClear = false;\n            parent = oldRenderer.domElement.parentNode;\n            oldSize = oldRenderer.getSize();\n            newSize = renderer.getSize();\n            if (parent !== null) {\n                parent.removeChild(oldRenderer.domElement);\n                parent.appendChild(renderer.domElement);\n            }\n            if (oldSize.width !== newSize.width || oldSize.height !== newSize.height) {\n                this.setSize();\n            }\n        }\n        return oldRenderer;\n    }\n    /**\n     * Retrieves the most relevant depth texture for the pass at the given index.\n     * @param index - The index of the pass that needs a depth texture.\n     * @return The depth texture, or null if there is none.\n     */\n    getDepthTexture(index) {\n        const passes = this.passes;\n        let depthTexture = null;\n        let inputBuffer = true;\n        let i;\n        let pass;\n        for (i = 0; i < index; ++i) {\n            pass = passes[i];\n            if (pass.needsSwap) {\n                inputBuffer = !inputBuffer;\n            }\n            else if (pass instanceof RenderPass) {\n                depthTexture = (inputBuffer ? this.inputBuffer : this.outputBuffer).depthTexture;\n            }\n        }\n        return depthTexture;\n    }\n    /**\n     * Creates two depth texture attachments, one for the input buffer and one for\n     * the output buffer.\n     *\n     * Depth will be written to the depth texture when something is rendered into\n     * the respective render target and the involved materials have `depthWrite`\n     * enabled. Under normal circumstances, only a {@link RenderPass} will render\n     * depth.\n     *\n     * When a shader reads from a depth texture and writes to a render target that\n     * uses the same depth texture attachment, the depth information will be lost.\n     * This happens even if `depthWrite` is disabled. For that reason, two\n     * separate depth textures are used.\n     */\n    createDepthTexture(width, height) {\n        const depthTexture = new DepthTexture(width, height);\n        if (this.inputBuffer.stencilBuffer) {\n            depthTexture.format = DepthStencilFormat;\n            depthTexture.type = UnsignedInt248Type;\n        }\n        this.inputBuffer.depthTexture = depthTexture;\n        this.outputBuffer.depthTexture = depthTexture.clone();\n    }\n    /**\n     * Creates a new render target by replicating the renderer's canvas.\n     *\n     * The created render target uses a linear filter for texel minification and\n     * magnification. Its render texture format depends on whether the renderer\n     * uses the alpha channel. Mipmaps are disabled.\n     *\n     * @param depthBuffer - Whether the render target should have a depth buffer.\n     * @param stencilBuffer - Whether the render target should have a stencil buffer.\n     * @return A new render target that equals the renderer's canvas.\n     */\n    createBuffer(depthBuffer, stencilBuffer) {\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        const alpha = this.renderer.context.getContextAttributes().alpha;\n        const renderTarget = new WebGLRenderTarget(drawingBufferSize.width, drawingBufferSize.height, {\n            minFilter: LinearFilter,\n            magFilter: LinearFilter,\n            format: alpha ? RGBAFormat : RGBFormat,\n            depthBuffer,\n            stencilBuffer,\n        });\n        renderTarget.texture.name = 'EffectComposer.Buffer';\n        renderTarget.texture.generateMipmaps = false;\n        return renderTarget;\n    }\n    /**\n     * Adds a pass, optionally at a specific index.\n     *\n     * @param pass - A new pass.\n     * @param index - An index at which the pass should be inserted.\n     */\n    addPass(pass, index) {\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        pass.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        pass.initialize(this.renderer, this.renderer.context.getContextAttributes().alpha);\n        if (index !== undefined) {\n            this.passes.splice(index, 0, pass);\n        }\n        else {\n            index = this.passes.push(pass) - 1;\n        }\n        if (pass.needsDepthTexture) {\n            if (this.inputBuffer.depthTexture === null) {\n                this.createDepthTexture(drawingBufferSize.width, drawingBufferSize.height);\n            }\n            pass.setDepthTexture(this.getDepthTexture(index));\n        }\n    }\n    /**\n     * Removes a pass.\n     */\n    removePass(pass) {\n        this.passes.splice(this.passes.indexOf(pass), 1);\n    }\n    /**\n     * Renders all enabled passes in the order in which they were added.\n     * @param delta - The time between the last frame and the current one in seconds.\n     */\n    render(delta) {\n        let inputBuffer = this.inputBuffer;\n        let outputBuffer = this.outputBuffer;\n        let stencilTest = false;\n        let context;\n        let state;\n        let buffer;\n        for (const pass of this.passes) {\n            if (pass.enabled) {\n                pass.render(this.renderer, inputBuffer, outputBuffer, delta, stencilTest);\n                if (pass.needsSwap) {\n                    if (stencilTest) {\n                        this.copyPass.renderToScreen = pass.renderToScreen;\n                        context = this.renderer.context;\n                        state = this.renderer.state;\n                        // Preserve the unaffected pixels.\n                        state.buffers.stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n                        this.copyPass.render(this.renderer, inputBuffer, outputBuffer);\n                        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n                    }\n                    buffer = inputBuffer;\n                    inputBuffer = outputBuffer;\n                    outputBuffer = buffer;\n                }\n                if (pass instanceof MaskPass) {\n                    stencilTest = true;\n                }\n                else if (pass instanceof ClearMaskPass) {\n                    stencilTest = false;\n                }\n            }\n        }\n    }\n    /**\n     * Sets the size of the buffers and the renderer's output canvas.\n     *\n     * Every pass will be informed of the new size. It's up to each pass how that\n     * information is used.\n     *\n     * If no width or height is specified, the render targets and passes will be\n     * updated with the current size of the renderer.\n     */\n    setSize(width, height) {\n        let size;\n        if (width === undefined || height === undefined) {\n            size = this.renderer.getSize();\n            width = size.width;\n            height = size.height;\n        }\n        // Update the logical render size.\n        this.renderer.setSize(width, height);\n        // The drawing buffer size takes the device pixel ratio into account.\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        this.inputBuffer.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        this.outputBuffer.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        for (const pass of this.passes) {\n            pass.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        }\n    }\n    /**\n     * Resets this composer by deleting all passes and creating new buffers.\n     */\n    reset() {\n        const renderTarget = this.createBuffer(this.inputBuffer.depthBuffer, this.inputBuffer.stencilBuffer);\n        this.dispose();\n        // Reanimate.\n        this.inputBuffer = renderTarget;\n        this.outputBuffer = renderTarget.clone();\n        this.copyPass = new ShaderPass(new CopyMaterial());\n    }\n    /**\n     * Destroys this composer and all passes.\n     *\n     * This method deallocates all disposable objects created by the passes. It\n     * also deletes the main frame buffers of this composer.\n     */\n    dispose() {\n        for (const pass of this.passes)\n            pass.dispose();\n        this.passes = [];\n        if (this.inputBuffer !== null) {\n            this.inputBuffer.dispose();\n            this.inputBuffer = null;\n        }\n        if (this.outputBuffer !== null) {\n            this.outputBuffer.dispose();\n            this.outputBuffer = null;\n        }\n        this.copyPass.dispose();\n    }\n}\n","export { EffectComposer } from './EffectComposer';\n","import { BlendFunction, BlendMode } from './blending';\nimport { EffectAttribute, } from './lib';\n/**\n * An abstract effect.\n * Effects can be combined using the {@link EffectPass}.\n */\nexport class Effect {\n    constructor(name, fragmentShader, partialOptions = {}) {\n        this.name = name;\n        this.fragmentShader = fragmentShader;\n        this.vertexShader = null;\n        const settings = {\n            attributes: EffectAttribute.NONE,\n            blendFunction: BlendFunction.SCREEN,\n            defines: new Map(),\n            uniforms: new Map(),\n            extensions: new Set(),\n            vertexShader: null,\n            ...partialOptions,\n        };\n        this.attributes = settings.attributes;\n        this.vertexShader = settings.vertexShader;\n        this.defines = settings.defines;\n        this.uniforms = settings.uniforms;\n        this.extensions = settings.extensions;\n        this.blendMode = new BlendMode(settings.blendFunction);\n    }\n    /**\n     * Sets the depth texture.\n     *\n     * You may override this method if your effect requires direct access to the\n     * depth texture that is bound to the associated {@link EffectPass}.\n     */\n    setDepthTexture(depthTexture, depthPacking = 0) { }\n    /**\n     * Updates the effect by performing supporting operations.\n     *\n     * This method is called by the {@link EffectPass} right before the main\n     * fullscreen render operation, even if the blend function is set to `SKIP`.\n     *\n     * You may override this method if you need to render additional off-screen\n     * textures or update custom uniforms.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param delta - The time between the last frame and the current one in seconds.\n     */\n    update(renderer, inputBuffer, delta = 0) { }\n    /**\n     * Updates the size of this effect.\n     *\n     * You may override this method in case you want to be informed about the main\n     * render size.\n     *\n     * The {@link EffectPass} calls this method before this effect is initialized\n     * and every time its own size is updated.\n     */\n    setSize(width, height) { }\n    /**\n     * Performs initialization tasks.\n     *\n     * By overriding this method you gain access to the renderer. You'll also be\n     * able to configure your custom render targets to use the appropriate format\n     * (RGB or RGBA).\n     *\n     * The provided renderer can be used to warm up special off-screen render\n     * targets by performing a preliminary render operation.\n     *\n     * The {@link EffectPass} calls this method during its own initialization\n     * which happens after the size has been set.\n     *\n     * @param renderer - The renderer.\n     * @param alpha - Whether the renderer uses the alpha channel or not.\n     * @example if(!alpha) this.myRenderTarget.texture.format = RGBFormat;\n     */\n    initialize(renderer, alpha) { }\n    /**\n     * Performs a shallow search for properties that define a dispose method and\n     * deletes them. The effect will be inoperative after this method was called!\n     *\n     * Disposable objects:\n     *  - render targets\n     *  - materials\n     *  - textures\n     *\n     * The {@link EffectPass} calls this method when it is being destroyed. Do not\n     * call this method directly.\n     */\n    dispose() {\n        for (const key of Object.keys(this)) {\n            if (this[key] !== null && typeof this[key].dispose === 'function') {\n                this[key].dispose();\n                this[key] = null;\n            }\n        }\n    }\n}\n","/**\n * A blend function enumeration.\n */\nexport var BlendFunction;\n(function (BlendFunction) {\n    /** No blending. The effect will not be included in the final shader. */\n    BlendFunction[BlendFunction[\"SKIP\"] = 0] = \"SKIP\";\n    /** Additive blending. Fast, but may produce washed out results. */\n    BlendFunction[BlendFunction[\"ADD\"] = 1] = \"ADD\";\n    /** Alpha blending. Blends based on the alpha value of the new color. Opacity will be ignored. */\n    BlendFunction[BlendFunction[\"ALPHA\"] = 2] = \"ALPHA\";\n    /** Average blending. */\n    BlendFunction[BlendFunction[\"AVERAGE\"] = 3] = \"AVERAGE\";\n    /** Color dodge. */\n    BlendFunction[BlendFunction[\"COLOR_BURN\"] = 4] = \"COLOR_BURN\";\n    /** Color burn. */\n    BlendFunction[BlendFunction[\"COLOR_DODGE\"] = 5] = \"COLOR_DODGE\";\n    /** Prioritize darker colors. */\n    BlendFunction[BlendFunction[\"DARKEN\"] = 6] = \"DARKEN\";\n    /** Color difference. */\n    BlendFunction[BlendFunction[\"DIFFERENCE\"] = 7] = \"DIFFERENCE\";\n    /** Color exclusion. */\n    BlendFunction[BlendFunction[\"EXCLUSION\"] = 8] = \"EXCLUSION\";\n    /** Prioritize lighter colors. */\n    BlendFunction[BlendFunction[\"LIGHTEN\"] = 9] = \"LIGHTEN\";\n    /** Color multiplication. */\n    BlendFunction[BlendFunction[\"MULTIPLY\"] = 10] = \"MULTIPLY\";\n    /** Color division. */\n    BlendFunction[BlendFunction[\"DIVIDE\"] = 11] = \"DIVIDE\";\n    /** Color negation. */\n    BlendFunction[BlendFunction[\"NEGATION\"] = 12] = \"NEGATION\";\n    /** Normal blending. The new color overwrites the old one. */\n    BlendFunction[BlendFunction[\"NORMAL\"] = 13] = \"NORMAL\";\n    /** Color overlay. */\n    BlendFunction[BlendFunction[\"OVERLAY\"] = 14] = \"OVERLAY\";\n    /** Color reflection. */\n    BlendFunction[BlendFunction[\"REFLECT\"] = 15] = \"REFLECT\";\n    /** Screen blending. The two colors are effectively projected on a white screen simultaneously. */\n    BlendFunction[BlendFunction[\"SCREEN\"] = 16] = \"SCREEN\";\n    /** Soft light blending. */\n    BlendFunction[BlendFunction[\"SOFT_LIGHT\"] = 17] = \"SOFT_LIGHT\";\n    /** Color subtraction. */\n    BlendFunction[BlendFunction[\"SUBTRACT\"] = 18] = \"SUBTRACT\";\n})(BlendFunction || (BlendFunction = {}));\n","import { Uniform } from 'three';\nimport { BlendFunction } from './BlendFunction';\nimport addBlendFunction from './glsl/add/shader.frag';\nimport alphaBlendFunction from './glsl/alpha/shader.frag';\nimport averageBlendFunction from './glsl/average/shader.frag';\nimport colorBurnBlendFunction from './glsl/color-burn/shader.frag';\nimport colorDodgeBlendFunction from './glsl/color-dodge/shader.frag';\nimport darkenBlendFunction from './glsl/darken/shader.frag';\nimport differenceBlendFunction from './glsl/difference/shader.frag';\nimport exclusionBlendFunction from './glsl/exclusion/shader.frag';\nimport lightenBlendFunction from './glsl/lighten/shader.frag';\nimport multiplyBlendFunction from './glsl/multiply/shader.frag';\nimport divideBlendFunction from './glsl/divide/shader.frag';\nimport negationBlendFunction from './glsl/negation/shader.frag';\nimport normalBlendFunction from './glsl/normal/shader.frag';\nimport overlayBlendFunction from './glsl/overlay/shader.frag';\nimport reflectBlendFunction from './glsl/reflect/shader.frag';\nimport screenBlendFunction from './glsl/screen/shader.frag';\nimport softLightBlendFunction from './glsl/soft-light/shader.frag';\nimport subtractBlendFunction from './glsl/subtract/shader.frag';\n/** A blend mode. */\nexport class BlendMode {\n    /**\n     * Constructs a new blend mode.\n     *\n     * @param blendFunction - The blend function to use.\n     * @param opacity - The opacity of the color that will be blended with the base color.\n     */\n    constructor(blendFunction, opacity = 1.0) {\n        this.blendFunction = blendFunction;\n        this.opacity = new Uniform(opacity);\n    }\n    /** Returns the blend function shader code, or null for `SKIP` blend function. */\n    getShaderCode() {\n        switch (this.blendFunction) {\n            case BlendFunction.SKIP: return null;\n            case BlendFunction.ADD: return addBlendFunction;\n            case BlendFunction.ALPHA: return alphaBlendFunction;\n            case BlendFunction.AVERAGE: return averageBlendFunction;\n            case BlendFunction.COLOR_BURN: return colorBurnBlendFunction;\n            case BlendFunction.COLOR_DODGE: return colorDodgeBlendFunction;\n            case BlendFunction.DARKEN: return darkenBlendFunction;\n            case BlendFunction.DIFFERENCE: return differenceBlendFunction;\n            case BlendFunction.EXCLUSION: return exclusionBlendFunction;\n            case BlendFunction.LIGHTEN: return lightenBlendFunction;\n            case BlendFunction.MULTIPLY: return multiplyBlendFunction;\n            case BlendFunction.DIVIDE: return divideBlendFunction;\n            case BlendFunction.NEGATION: return negationBlendFunction;\n            case BlendFunction.NORMAL: return normalBlendFunction;\n            case BlendFunction.OVERLAY: return overlayBlendFunction;\n            case BlendFunction.REFLECT: return reflectBlendFunction;\n            case BlendFunction.SCREEN: return screenBlendFunction;\n            case BlendFunction.SOFT_LIGHT: return softLightBlendFunction;\n            case BlendFunction.SUBTRACT: return subtractBlendFunction;\n        }\n    }\n}\n","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn min(x + y, 1.0) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, y.a), x.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (x + y) * 0.5 * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 0.0) ? y : max(1.0 - (1.0 - x) / y, 0.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 1.0) ? y : min(x / (1.0 - y), 1.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn min(x, y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn abs(x - y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y > 0.0) ? min(x / y, 1.0) : 1.0;\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (x + y - 2.0 * x * y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn max(x, y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn x * y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (1.0 - abs(1.0 - x - y)) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (x < 0.5) ? (2.0 * x * y) : (1.0 - 2.0 * (1.0 - x) * (1.0 - y));\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 1.0) ? y : min(x * x / (1.0 - y), 1.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (1.0 - (1.0 - x) * (1.0 - y)) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y < 0.5) ?\\n\\t\\t(2.0 * x * y + x * x * (1.0 - 2.0 * y)) :\\n\\t\\t(sqrt(x) * (2.0 * y - 1.0) + 2.0 * x * (1.0 - y));\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn max(x + y - 1.0, 0.0) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","/**\n * A collection of blend functions.\n *\n * @module postprocessing/blending\n */\nexport { BlendFunction } from './BlendFunction';\nexport { BlendMode } from './BlendMode';\n","/**\n * A collection of effects.\n *\n * @module postprocessing/effects\n */\nexport * from './blending';\nexport * from './lib';\n// export { BloomEffect } from './BloomEffect';\n// export { BokehEffect } from './BokehEffect';\n// export { BrightnessContrastEffect } from './BrightnessContrastEffect';\n// export { ColorAverageEffect } from './ColorAverageEffect';\n// export { ChromaticAberrationEffect } from './ChromaticAberrationEffect';\n// export { DepthEffect } from './DepthEffect';\n// export { DotScreenEffect } from './DotScreenEffect';\nexport { Effect } from './Effect';\n// export { GammaCorrectionEffect } from './GammaCorrectionEffect';\n// export { GlitchEffect, GlitchMode } from './GlitchEffect';\n// export { GodRaysEffect } from './GodRaysEffect';\n// export { GridEffect } from './GridEffect';\n// export { HueSaturationEffect } from './HueSaturationEffect';\n// export { NoiseEffect } from './NoiseEffect';\n// export { OutlineEffect } from './OutlineEffect';\n// export { PixelationEffect } from './PixelationEffect';\n// export { RealisticBokehEffect } from './RealisticBokehEffect';\n// export { ScanlineEffect } from './ScanlineEffect';\n// export { ShockWaveEffect } from './ShockWaveEffect';\n// export { SepiaEffect } from './SepiaEffect';\n// export { SMAAEffect } from './SMAAEffect';\n// export { SSAOEffect } from './SSAOEffect';\n// export { TextureEffect } from './TextureEffect';\n// export { ToneMappingEffect } from './ToneMappingEffect';\n// export { VignetteEffect } from './VignetteEffect';\n","export var EffectName;\n(function (EffectName) {\n    EffectName[\"Glitch\"] = \"GlitchEffect\";\n})(EffectName || (EffectName = {}));\n/**\n * An enumeration of effect attributes.\n * Attributes can be concatenated using the bitwise OR operator.\n *\n * @example\n * const attributes = EffectAttribute.CONVOLUTION | EffectAttribute.DEPTH;\n */\nexport var EffectAttribute;\n(function (EffectAttribute) {\n    /* No attributes. Most effects don't need to specify any attributes. */\n    EffectAttribute[EffectAttribute[\"NONE\"] = 0] = \"NONE\";\n    /** Describes effects that require a depth texture. */\n    EffectAttribute[EffectAttribute[\"DEPTH\"] = 1] = \"DEPTH\";\n    /**\n     * Describes effects that fetch additional samples from the input buffer.\n     * There cannot be more than one effect with this attribute per {@link EffectPass}.\n     */\n    EffectAttribute[EffectAttribute[\"CONVOLUTION\"] = 2] = \"CONVOLUTION\";\n})(EffectAttribute || (EffectAttribute = {}));\n/** An enumeration of WebGL extensions. */\nexport var WebGLExtension;\n(function (WebGLExtension) {\n    /** Enables derivatives by adding the functions dFdx, dFdy and fwidth. */\n    WebGLExtension[\"DERIVATIVES\"] = \"derivatives\";\n    /** Enables gl_FragDepthEXT to set a depth value of a fragment from within the fragment shader. */\n    WebGLExtension[\"FRAG_DEPTH\"] = \"fragDepth\";\n    /** Enables multiple render targets (MRT) support. */\n    WebGLExtension[\"DRAW_BUFFERS\"] = \"drawBuffers\";\n    /** Enables explicit control of texture LOD. */\n    WebGLExtension[\"SHADER_TEXTURE_LOD\"] = \"shaderTextureLOD\";\n})(WebGLExtension || (WebGLExtension = {}));\n","export * from './effects.types';\n","import { ShaderMaterial, Uniform } from 'three';\nimport fragment from './glsl/copy/shader.frag';\nimport vertex from './glsl/copy/shader.vert';\n/**\n * A simple copy shader material.\n */\nexport class CopyMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                inputBuffer: new Uniform(null),\n                opacity: new Uniform(1.0),\n            },\n            fragmentShader: fragment,\n            vertexShader: vertex,\n            depthWrite: false,\n            depthTest: false,\n        });\n    }\n}\n","module.exports = \"uniform sampler2D inputBuffer;\\nuniform float opacity;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tvec4 texel = texture2D(inputBuffer, vUv);\\n\\tgl_FragColor = opacity * texel;\\n\\n}\\n\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tvUv = uv;\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\\n}\\n\"","/**\n * A collection of shader materials that are used in the post processing passes.\n *\n * @module postprocessing/materials\n */\n// export { AdaptiveLuminanceMaterial } from './AdaptiveLuminanceMaterial';\n// export { ColorEdgesMaterial } from './ColorEdgesMaterial';\n// export { ConvolutionMaterial, KernelSize } from './ConvolutionMaterial';\nexport { CopyMaterial } from './CopyMaterial';\n// export { DepthComparisonMaterial } from './DepthComparisonMaterial';\n// export { EffectMaterial, Section } from './EffectMaterial';\n// export { GodRaysMaterial } from './GodRaysMaterial';\n// export { LuminanceMaterial } from './LuminanceMaterial';\n// export { OutlineEdgesMaterial } from './OutlineEdgesMaterial';\n// export { SMAAWeightsMaterial } from './SMAAWeightsMaterial';\n","import { PassName } from './lib';\nimport { Pass } from './Pass';\n/**\n * A pass that disables the stencil test.\n */\nexport class ClearMaskPass extends Pass {\n    constructor() {\n        super(PassName.ClearMask);\n        this.needsSwap = false;\n    }\n    /**\n     * Disables the global stencil test.\n     */\n    render(renderer) {\n        renderer.state.buffers.stencil.setTest(false);\n    }\n}\n","import { Color } from 'three';\nimport { Pass } from './Pass';\nimport { PassName } from './lib';\n/**\n * A pass that clears the input buffer or the screen.\n *\n * You can prevent specific bits from being cleared by setting either the\n * `autoClearColor`, `autoClearStencil` or `autoClearDepth` properties of the renderer\n * to `false`.\n */\nexport class ClearPass extends Pass {\n    /**\n     * Constructs a new clear pass.\n     * @param options - Additional options.\n     */\n    constructor(partialOptions = {}) {\n        super(PassName.Clear);\n        const options = {\n            clearAlpha: 0,\n            clearColor: null,\n            ...partialOptions,\n        };\n        this.needsSwap = false;\n        this.clearColor = options.clearColor;\n        this.clearAlpha = options.clearAlpha;\n    }\n    /**\n     * Clears the input buffer or the screen.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     */\n    render(renderer, inputBuffer) {\n        const clearColor = this.clearColor;\n        let clearAlpha;\n        if (clearColor !== null) {\n            ClearPass.color.copy(renderer.getClearColor());\n            clearAlpha = renderer.getClearAlpha();\n            renderer.setClearColor(clearColor, this.clearAlpha);\n        }\n        renderer.setRenderTarget(this.renderToScreen ? undefined : inputBuffer);\n        renderer.clear();\n        if (clearColor !== null) {\n            renderer.setClearColor(ClearPass.color, clearAlpha);\n        }\n    }\n}\n/** Used for saving the original clear color of the renderer. */\nClearPass.color = new Color();\n","import { PassName } from './lib';\nimport { Pass } from './Pass';\n/**\n * A mask pass.\n *\n * This pass requires that the input and output buffers have a stencil buffer.\n * You can enable the stencil buffer via the {@link EffectComposer} constructor.\n */\nexport class MaskPass extends Pass {\n    /**\n     * Constructs a new mask pass.\n     *\n     * @param scene - The scene to render.\n     * @param camera - The camera to use.\n     */\n    constructor(scene, camera) {\n        super(PassName.Mask, scene, camera);\n        /** Inverse flag */\n        this.inverse = false;\n        /** Stencil buffer clear flag. */\n        this.clearStencil = true;\n        this.needsSwap = false;\n    }\n    /**\n     * Renders the effect.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\n     */\n    render(renderer, inputBuffer, outputBuffer) {\n        const context = renderer.context;\n        const state = renderer.state;\n        const scene = this.scene;\n        const camera = this.camera;\n        const writeValue = this.inverse ? 0 : 1;\n        const clearValue = 1 - writeValue;\n        // Don't update color or depth.\n        state.buffers.color.setMask(0);\n        state.buffers.depth.setMask(0);\n        // Lock the buffers.\n        state.buffers.color.setLocked(true);\n        state.buffers.depth.setLocked(true);\n        // Configure the stencil.\n        state.buffers.stencil.setTest(true);\n        state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n        state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n        state.buffers.stencil.setClear(clearValue);\n        // Clear the stencil.\n        if (this.clearStencil) {\n            if (this.renderToScreen) {\n                renderer.setRenderTarget();\n                renderer.clearStencil();\n            }\n            else {\n                renderer.setRenderTarget(inputBuffer);\n                renderer.clearStencil();\n                renderer.setRenderTarget(outputBuffer);\n                renderer.clearStencil();\n            }\n        }\n        // Draw the mask.\n        if (this.renderToScreen) {\n            renderer.render(scene, camera);\n        }\n        else {\n            renderer.render(scene, camera, inputBuffer);\n            renderer.render(scene, camera, outputBuffer);\n        }\n        // Unlock the buffers.\n        state.buffers.color.setLocked(false);\n        state.buffers.depth.setLocked(false);\n        // Only render where the stencil is set to 1.\n        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    }\n}\n","import { Scene, Mesh, OrthographicCamera, PlaneBufferGeometry, } from 'three';\n/**\n * An abstract pass.\n *\n * Passes that do not rely on the depth buffer should explicitly disable the\n * depth test and depth write in their respective shader materials.\n */\nexport class Pass {\n    /**\n     * Constructs a new pass.\n     *\n     * @param - The name of this pass. Does not have to be unique.\n     * @param - The scene to render. The default scene contains a single mesh that fills the screen.\n     * @param - The camera. The default camera perfectly captures the screen mesh.\n     */\n    constructor(name, scene = new Scene(), camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)) {\n        this.name = name;\n        this.scene = scene;\n        this.camera = camera;\n        // [k: string]: any;\n        this.uniform = null;\n        /**\n         * A quad mesh that fills the screen.\n         */\n        this.quad = null;\n        /**\n         * Indicates whether the {@link EffectComposer} should swap the frame\n         * buffers after this pass has finished rendering.\n         *\n         * Set this to `false` if this pass doesn't render to the output buffer or\n         * the screen. Otherwise, the contents of the input buffer will be lost.\n         */\n        this.needsSwap = true;\n        /**\n         * Indicates whether the {@link EffectComposer} should prepare a depth\n         * texture for this pass.\n         *\n         * Set this to `true` if this pass relies on depth information from a\n         * preceding {@link RenderPass}.\n         */\n        this.needsDepthTexture = false;\n        /**\n         * Indicates whether this pass should render to screen.\n         */\n        this.renderToScreen = false;\n        /**\n         * Indicates whether this pass should be executed.\n         */\n        this.enabled = true;\n    }\n    /**\n     * Returns the current fullscreen material.\n     *\n     * @return The current fullscreen material(s), or null if there is none.\n     */\n    getFullscreenMaterial() {\n        return (this.quad !== null) ? this.quad.material : null;\n    }\n    /**\n     * Returns the current fullscreen material.\n     *\n     * @return The current fullscreen materials.\n     */\n    getFullscreenMaterials() {\n        return this.quad === null\n            ? []\n            : Array.isArray(this.quad.material)\n                ? this.quad.material\n                : [this.quad.material];\n    }\n    /**\n     * Sets the fullscreen material.\n     *\n     * The material will be assigned to the quad mesh that fills the screen. The\n     * screen quad will be created once a material is assigned via this method.\n     *\n     * @param - A fullscreen material.\n     */\n    setFullscreenMaterial(material) {\n        if (this.quad !== null) {\n            this.quad.material = material;\n        }\n        else {\n            const quad = new Mesh(new PlaneBufferGeometry(2, 2), material);\n            quad.frustumCulled = false;\n            if (this.scene !== null) {\n                this.scene.add(quad);\n                this.quad = quad;\n            }\n        }\n    }\n    /**\n     * Returns the current depth texture.\n     *\n     * @return The current depth texture, or null if there is none.\n     */\n    getDepthTexture() {\n        return null;\n    }\n    /**\n     * Sets the depth texture.\n     *\n     * You may override this method if your pass relies on the depth information\n     * of a preceding {@link RenderPass}.\n     *\n     * @param depthTexture - A depth texture.\n     * @param depthPacking - The depth packing. Default to `0`.\n     */\n    setDepthTexture(depthTexture, depthPacking = 0) { }\n    /**\n     * Updates this pass with the renderer's size.\n     *\n     * You may override this method in case you want to be informed about the main\n     * render size.\n     *\n     * The {@link EffectComposer} calls this method before this pass is\n     * initialized and every time its own size is updated.\n     *\n     * @param width - The renderer's width.\n     * @param height - The renderer's height.\n     * @example this.myRenderTarget.setSize(width, height);\n     */\n    setSize(width, height) { }\n    /**\n     * Performs initialization tasks.\n     *\n     * By overriding this method you gain access to the renderer. You'll also be\n     * able to configure your custom render targets to use the appropriate format\n     * (RGB or RGBA).\n     *\n     * The provided renderer can be used to warm up special off-screen render\n     * targets by performing a preliminary render operation.\n     *\n     * The {@link EffectComposer} calls this method when this pass is added to its\n     * queue, but not before its size has been set.\n     *\n     * @param renderer - The renderer.\n     * @param alpha - Whether the renderer uses the alpha channel or not.\n     * @example if(!alpha) { this.myRenderTarget.texture.format = RGBFormat; }\n     */\n    initialize(renderer, alpha) { }\n    /**\n     * Performs a shallow search for disposable properties and deletes them. The\n     * pass will be inoperative after this method was called!\n     *\n     * Disposable objects:\n     *  - WebGLRenderTarget\n     *  - Material\n     *  - Texture\n     *\n     * The {@link EffectComposer} calls this method when it is being destroyed.\n     * You may, however, use it independently to free memory when you are certain\n     * that you don't need this pass anymore.\n     */\n    dispose() {\n        this.getFullscreenMaterials().forEach(material => material.dispose());\n        /**\n         * @todo: Find a less sketchy (see: type safer) way of doing this\n         */\n        Object.keys(this)\n            .map(prop => this[prop])\n            .filter((value) => value !== null\n            && typeof value === 'object'\n            && typeof value.dispose === 'function')\n            .forEach(value => value.dispose());\n    }\n}\n","import { ClearPass } from './ClearPass';\nimport { Pass } from './Pass';\nimport { PassName } from './lib';\n/**\n * A pass that renders a given scene directly on screen or into the read buffer\n * for further processing.\n */\nexport class RenderPass extends Pass {\n    /**\n     * Constructs a new render pass.\n     *\n     * @param scene The scene to render.\n     * @param camera The camera to use to render the scene.\n     * @param options Additional options.\n     */\n    constructor(scene, camera, partialOptions = {}) {\n        super(PassName.Render, scene, camera);\n        this.scene = scene;\n        this.camera = camera;\n        this.overrideMaterial = null;\n        const options = {\n            overrideMaterial: null,\n            clearAlpha: 1,\n            clearDepth: false,\n            clear: true,\n            ...partialOptions,\n        };\n        this.needsSwap = false;\n        this.clearPass = new ClearPass(options);\n        this.overrideMaterial = options.overrideMaterial;\n        this.clearDepth = options.clearDepth;\n        this.clear = options.clear;\n    }\n    /**\n     * Renders the scene.\n     *\n     * @param renderer The renderer.\n     * @param inputBuffer A frame buffer that contains the result of the previous pass.\n     */\n    render(renderer, inputBuffer) {\n        const scene = this.scene;\n        const renderTarget = this.renderToScreen ? undefined : inputBuffer;\n        const overrideMaterial = scene.overrideMaterial;\n        if (this.clear) {\n            this.clearPass.renderToScreen = this.renderToScreen;\n            this.clearPass.render(renderer, inputBuffer);\n        }\n        else if (this.clearDepth) {\n            renderer.setRenderTarget(renderTarget);\n            renderer.clearDepth();\n        }\n        scene.overrideMaterial = this.overrideMaterial;\n        renderer.render(scene, this.camera, renderTarget);\n        scene.overrideMaterial = overrideMaterial;\n    }\n}\n","import { PassName } from './lib';\nimport { Pass } from './Pass';\n/**\n * A shader pass. Renders any shader material as a fullscreen effect.\n *\n * This pass should not be used to create multiple chained effects. For a more\n * efficient solution, please refer to the {@link EffectPass}.\n */\nexport class ShaderPass extends Pass {\n    /**\n     * Constructs a new shader pass.\n     *\n     * @param material - A shader material.\n     * @param input - The name of the input buffer uniform.\n     */\n    constructor(material, input = 'inputBuffer') {\n        super(PassName.Shader);\n        this.setFullscreenMaterial(material);\n        /**\n         * The input buffer uniform.\n         */\n        this.uniform = null;\n        this.setInput(input);\n    }\n    /**\n     * Sets the name of the input buffer uniform.\n     *\n     * Most fullscreen materials modify texels from an input texture. This pass\n     * automatically assigns the main input buffer to the uniform identified by\n     * the given name.\n     *\n     * @param input - The name of the input buffer uniform.\n     */\n    setInput(input) {\n        const materials = this.getFullscreenMaterials();\n        this.uniform = null;\n        materials.forEach(material => {\n            const uniforms = material.uniforms;\n            if (uniforms[input] !== undefined) {\n                this.uniform = uniforms[input];\n            }\n        });\n    }\n    /**\n     * Renders the effect.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\n     */\n    render(renderer, inputBuffer, outputBuffer) {\n        if (this.uniform !== null) {\n            this.uniform.value = inputBuffer.texture;\n        }\n        renderer.render(this.scene, this.camera, this.renderToScreen ? undefined : outputBuffer);\n    }\n}\n","/**\n * A compilation of the post processing passes.\n *\n * @module postprocessing/passes\n */\n// export { BlurPass } from './BlurPass';\nexport { ClearMaskPass } from './ClearMaskPass';\nexport { ClearPass } from './ClearPass';\n// export { DepthPass } from './DepthPass';\n// export { EffectPass } from './EffectPass';\nexport { MaskPass } from './MaskPass';\n// export { NormalPass } from './NormalPass';\nexport { Pass } from './Pass';\nexport { RenderPass } from './RenderPass';\n// export { SavePass } from './SavePass';\nexport { ShaderPass } from './ShaderPass';\n","export * from './passes.types';\n","export var PassName;\n(function (PassName) {\n    PassName[\"Clear\"] = \"clear\";\n    PassName[\"Render\"] = \"render\";\n    PassName[\"Shader\"] = \"shader\";\n    PassName[\"Mask\"] = \"mask\";\n    PassName[\"ClearMask\"] = \"clearMask\";\n})(PassName || (PassName = {}));\n","/**\n * Exposure of the library components.\n *\n * @module postprocessing\n */\nexport * from './core';\nexport * from './effects';\n// export * from './images';\nexport * from './materials';\nexport * from './passes';\n","module.exports = __WEBPACK_EXTERNAL_MODULE_three__;"],"sourceRoot":""}