{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"THREE\"","webpack:///./materials/glsl/copy/shader.frag","webpack:///./materials/glsl/copy/shader.vert","webpack:///./effects/blending/glsl/add/shader.frag","webpack:///./effects/blending/glsl/alpha/shader.frag","webpack:///./effects/blending/glsl/average/shader.frag","webpack:///./effects/blending/glsl/color-burn/shader.frag","webpack:///./effects/blending/glsl/color-dodge/shader.frag","webpack:///./effects/blending/glsl/darken/shader.frag","webpack:///./effects/blending/glsl/difference/shader.frag","webpack:///./effects/blending/glsl/exclusion/shader.frag","webpack:///./effects/blending/glsl/lighten/shader.frag","webpack:///./effects/blending/glsl/multiply/shader.frag","webpack:///./effects/blending/glsl/divide/shader.frag","webpack:///./effects/blending/glsl/negation/shader.frag","webpack:///./effects/blending/glsl/normal/shader.frag","webpack:///./effects/blending/glsl/overlay/shader.frag","webpack:///./effects/blending/glsl/reflect/shader.frag","webpack:///./effects/blending/glsl/screen/shader.frag","webpack:///./effects/blending/glsl/soft-light/shader.frag","webpack:///./effects/blending/glsl/subtract/shader.frag","webpack:///./passes/lib/passes.types.ts","webpack:///./passes/Pass.ts","webpack:///./passes/ShaderPass.ts","webpack:///./passes/ClearPass.ts","webpack:///./passes/RenderPass.ts","webpack:///./passes/MaskPass.ts","webpack:///./passes/ClearMaskPass.ts","webpack:///./materials/CopyMaterial.ts","webpack:///./core/EffectComposer.ts","webpack:///./effects/blending/BlendFunction.ts","webpack:///./effects/blending/BlendMode.ts","webpack:///./effects/lib/effects.types.ts","webpack:///./effects/Effect.ts","webpack:///./index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","THREE","PassName","Pass","scene","arguments","length","undefined","Scene","camera","OrthographicCamera","_classCallCheck","this","uniform","quad","needsSwap","needsDepthTexture","renderToScreen","enabled","material","Array","isArray","Mesh","PlaneBufferGeometry","frustumCulled","add","depthTexture","width","height","renderer","alpha","_this","getFullscreenMaterials","forEach","dispose","keys","map","prop","filter","_typeof","ShaderPass","_Pass","input","ShaderPass_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","Shader","setFullscreenMaterial","setInput","_inherits","_this2","materials","uniforms","inputBuffer","outputBuffer","texture","render","ClearPass","partialOptions","ClearPass_classCallCheck","ClearPass_possibleConstructorReturn","ClearPass_getPrototypeOf","Clear","options","_objectSpread","clearAlpha","clearColor","ClearPass_inherits","color","copy","getClearColor","getClearAlpha","setClearColor","setRenderTarget","clear","Color","RenderPass","RenderPass_classCallCheck","RenderPass_possibleConstructorReturn","RenderPass_getPrototypeOf","Render","overrideMaterial","RenderPass_objectSpread","clearDepth","clearPass","RenderPass_inherits","renderTarget","MaskPass","MaskPass_classCallCheck","MaskPass_possibleConstructorReturn","MaskPass_getPrototypeOf","Mask","inverse","clearStencil","MaskPass_inherits","context","state","writeValue","clearValue","buffers","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","ClearMaskPass_classCallCheck","ClearMaskPass_possibleConstructorReturn","ClearMaskPass_getPrototypeOf","ClearMask","ClearMaskPass_inherits","CopyMaterial","_ShaderMaterial","CopyMaterial_classCallCheck","CopyMaterial_possibleConstructorReturn","CopyMaterial_getPrototypeOf","Uniform","opacity","fragmentShader","fragment","vertexShader","vertex","depthWrite","depthTest","CopyMaterial_inherits","ShaderMaterial","BlendFunction","EffectComposer","EffectComposer_classCallCheck","copyPass","passes","EffectComposer_objectSpread","depthBuffer","stencilBuffer","autoClear","createBuffer","clone","parent","oldSize","newSize","oldRenderer","domElement","parentNode","getSize","removeChild","appendChild","setSize","index","pass","DepthTexture","format","DepthStencilFormat","type","UnsignedInt248Type","drawingBufferSize","getDrawingBufferSize","getContextAttributes","WebGLRenderTarget","minFilter","LinearFilter","magFilter","RGBAFormat","RGBFormat","generateMipmaps","initialize","splice","push","createDepthTexture","setDepthTexture","getDepthTexture","indexOf","delta","buffer","stencilTest","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","NOTEQUAL","err","return","size","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","EffectName","EffectAttribute","WebGLExtension","BlendMode","blendFunction","BlendMode_classCallCheck","SKIP","ADD","addBlendFunction","ALPHA","alphaBlendFunction","AVERAGE","averageBlendFunction","COLOR_BURN","colorBurnBlendFunction","COLOR_DODGE","colorDodgeBlendFunction","DARKEN","darkenBlendFunction","DIFFERENCE","differenceBlendFunction","EXCLUSION","exclusionBlendFunction","LIGHTEN","lightenBlendFunction","MULTIPLY","multiplyBlendFunction","DIVIDE","divideBlendFunction","NEGATION","negationBlendFunction","NORMAL","normalBlendFunction","OVERLAY","overlayBlendFunction","REFLECT","reflectBlendFunction","SCREEN","screenBlendFunction","SOFT_LIGHT","softLightBlendFunction","SUBTRACT","subtractBlendFunction","Effect","Effect_classCallCheck","settings","Effect_objectSpread","attributes","NONE","defines","Map","extensions","Set","blendMode","_arr","_i","__webpack_exports__","EffectComposer_EffectComposer","Effect_Effect","BlendMode_BlendMode","CopyMaterial_CopyMaterial","ClearMaskPass_ClearMaskPass","ClearPass_ClearPass","MaskPass_MaskPass","Pass_Pass","RenderPass_RenderPass","ShaderPass_ShaderPass"],"mappings":"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","file":"postprocessing.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = THREE;","module.exports = \"uniform sampler2D inputBuffer;\\nuniform float opacity;\\n\\nvarying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tvec4 texel = texture2D(inputBuffer, vUv);\\n\\tgl_FragColor = opacity * texel;\\n\\n}\\n\"","module.exports = \"varying vec2 vUv;\\n\\nvoid main() {\\n\\n\\tvUv = uv;\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn min(x + y, 1.0) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, y.a), x.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (x + y) * 0.5 * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 0.0) ? y : max(1.0 - (1.0 - x) / y, 0.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 1.0) ? y : min(x / (1.0 - y), 1.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn min(x, y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn abs(x - y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (x + y - 2.0 * x * y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn max(x, y) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn x * y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y > 0.0) ? min(x / y, 1.0) : 1.0;\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (1.0 - abs(1.0 - x - y)) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn y * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (x < 0.5) ? (2.0 * x * y) : (1.0 - 2.0 * (1.0 - x) * (1.0 - y));\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y == 1.0) ? y : min(x * x / (1.0 - y), 1.0);\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn (1.0 - (1.0 - x) * (1.0 - y)) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"float blend(const in float x, const in float y) {\\n\\n\\treturn (y < 0.5) ?\\n\\t\\t(2.0 * x * y + x * x * (1.0 - 2.0 * y)) :\\n\\t\\t(sqrt(x) * (2.0 * y - 1.0) + 2.0 * x * (1.0 - y));\\n\\n}\\n\\nvec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\tvec3 z = vec3(blend(x.r, y.r), blend(x.g, y.g), blend(x.b, y.b));\\n\\n\\treturn z * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","module.exports = \"vec3 blend(const in vec3 x, const in vec3 y, const in float opacity) {\\n\\n\\treturn max(x + y - 1.0, 0.0) * opacity + x * (1.0 - opacity);\\n\\n}\\n\\nvec4 blend(const in vec4 x, const in vec4 y, const in float opacity) {\\n\\n\\treturn vec4(blend(x.rgb, y.rgb, opacity), y.a);\\n\\n}\\n\"","export var PassName;\n(function (PassName) {\n    PassName[\"Clear\"] = \"clear\";\n    PassName[\"Render\"] = \"render\";\n    PassName[\"Shader\"] = \"shader\";\n    PassName[\"Mask\"] = \"mask\";\n    PassName[\"ClearMask\"] = \"clearMask\";\n})(PassName || (PassName = {}));\n","import { Scene, Mesh, OrthographicCamera, PlaneBufferGeometry, } from 'three';\n/**\n * An abstract pass.\n *\n * Passes that do not rely on the depth buffer should explicitly disable the\n * depth test and depth write in their respective shader materials.\n */\nexport class Pass {\n    /**\n     * Constructs a new pass.\n     *\n     * @param - The name of this pass. Does not have to be unique.\n     * @param - The scene to render. The default scene contains a single mesh that fills the screen.\n     * @param - The camera. The default camera perfectly captures the screen mesh.\n     */\n    constructor(name, scene = new Scene(), camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1)) {\n        this.name = name;\n        this.scene = scene;\n        this.camera = camera;\n        // [k: string]: any;\n        this.uniform = null;\n        /**\n         * A quad mesh that fills the screen.\n         */\n        this.quad = null;\n        /**\n         * Indicates whether the {@link EffectComposer} should swap the frame\n         * buffers after this pass has finished rendering.\n         *\n         * Set this to `false` if this pass doesn't render to the output buffer or\n         * the screen. Otherwise, the contents of the input buffer will be lost.\n         */\n        this.needsSwap = true;\n        /**\n         * Indicates whether the {@link EffectComposer} should prepare a depth\n         * texture for this pass.\n         *\n         * Set this to `true` if this pass relies on depth information from a\n         * preceding {@link RenderPass}.\n         */\n        this.needsDepthTexture = false;\n        /**\n         * Indicates whether this pass should render to screen.\n         */\n        this.renderToScreen = false;\n        /**\n         * Indicates whether this pass should be executed.\n         */\n        this.enabled = true;\n    }\n    /**\n     * Returns the current fullscreen material.\n     *\n     * @return The current fullscreen material(s), or null if there is none.\n     */\n    getFullscreenMaterial() {\n        return (this.quad !== null) ? this.quad.material : null;\n    }\n    /**\n     * Returns the current fullscreen material.\n     *\n     * @return The current fullscreen materials.\n     */\n    getFullscreenMaterials() {\n        return this.quad === null\n            ? []\n            : Array.isArray(this.quad.material)\n                ? this.quad.material\n                : [this.quad.material];\n    }\n    /**\n     * Sets the fullscreen material.\n     *\n     * The material will be assigned to the quad mesh that fills the screen. The\n     * screen quad will be created once a material is assigned via this method.\n     *\n     * @param - A fullscreen material.\n     */\n    setFullscreenMaterial(material) {\n        if (this.quad !== null) {\n            this.quad.material = material;\n        }\n        else {\n            const quad = new Mesh(new PlaneBufferGeometry(2, 2), material);\n            quad.frustumCulled = false;\n            if (this.scene !== null) {\n                this.scene.add(quad);\n                this.quad = quad;\n            }\n        }\n    }\n    /**\n     * Returns the current depth texture.\n     *\n     * @return The current depth texture, or null if there is none.\n     */\n    getDepthTexture() {\n        return null;\n    }\n    /**\n     * Sets the depth texture.\n     *\n     * You may override this method if your pass relies on the depth information\n     * of a preceding {@link RenderPass}.\n     *\n     * @param depthTexture - A depth texture.\n     * @param depthPacking - The depth packing. Default to `0`.\n     */\n    setDepthTexture(depthTexture, depthPacking = 0) { }\n    /**\n     * Updates this pass with the renderer's size.\n     *\n     * You may override this method in case you want to be informed about the main\n     * render size.\n     *\n     * The {@link EffectComposer} calls this method before this pass is\n     * initialized and every time its own size is updated.\n     *\n     * @param width - The renderer's width.\n     * @param height - The renderer's height.\n     * @example this.myRenderTarget.setSize(width, height);\n     */\n    setSize(width, height) { }\n    /**\n     * Performs initialization tasks.\n     *\n     * By overriding this method you gain access to the renderer. You'll also be\n     * able to configure your custom render targets to use the appropriate format\n     * (RGB or RGBA).\n     *\n     * The provided renderer can be used to warm up special off-screen render\n     * targets by performing a preliminary render operation.\n     *\n     * The {@link EffectComposer} calls this method when this pass is added to its\n     * queue, but not before its size has been set.\n     *\n     * @param renderer - The renderer.\n     * @param alpha - Whether the renderer uses the alpha channel or not.\n     * @example if(!alpha) { this.myRenderTarget.texture.format = RGBFormat; }\n     */\n    initialize(renderer, alpha) { }\n    /**\n     * Performs a shallow search for disposable properties and deletes them. The\n     * pass will be inoperative after this method was called!\n     *\n     * Disposable objects:\n     *  - WebGLRenderTarget\n     *  - Material\n     *  - Texture\n     *\n     * The {@link EffectComposer} calls this method when it is being destroyed.\n     * You may, however, use it independently to free memory when you are certain\n     * that you don't need this pass anymore.\n     */\n    dispose() {\n        this.getFullscreenMaterials().forEach(material => material.dispose());\n        /**\n         * @todo: Find a less sketchy (see: type safer) way of doing this\n         */\n        Object.keys(this)\n            .map(prop => this[prop])\n            .filter((value) => value !== null\n            && typeof value === 'object'\n            && typeof value.dispose === 'function')\n            .forEach(value => value.dispose());\n    }\n}\n","import { PassName } from './lib';\nimport { Pass } from './Pass';\n/**\n * A shader pass. Renders any shader material as a fullscreen effect.\n *\n * This pass should not be used to create multiple chained effects. For a more\n * efficient solution, please refer to the {@link EffectPass}.\n */\nexport class ShaderPass extends Pass {\n    /**\n     * Constructs a new shader pass.\n     *\n     * @param material - A shader material.\n     * @param input - The name of the input buffer uniform.\n     */\n    constructor(material, input = 'inputBuffer') {\n        super(PassName.Shader);\n        this.setFullscreenMaterial(material);\n        /**\n         * The input buffer uniform.\n         */\n        this.uniform = null;\n        this.setInput(input);\n    }\n    /**\n     * Sets the name of the input buffer uniform.\n     *\n     * Most fullscreen materials modify texels from an input texture. This pass\n     * automatically assigns the main input buffer to the uniform identified by\n     * the given name.\n     *\n     * @param input - The name of the input buffer uniform.\n     */\n    setInput(input) {\n        const materials = this.getFullscreenMaterials();\n        this.uniform = null;\n        materials.forEach(material => {\n            const uniforms = material.uniforms;\n            if (uniforms[input] !== undefined) {\n                this.uniform = uniforms[input];\n            }\n        });\n    }\n    /**\n     * Renders the effect.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\n     */\n    render(renderer, inputBuffer, outputBuffer) {\n        if (this.uniform !== null) {\n            this.uniform.value = inputBuffer.texture;\n        }\n        renderer.render(this.scene, this.camera, this.renderToScreen ? undefined : outputBuffer);\n    }\n}\n","import { Color } from 'three';\nimport { Pass } from './Pass';\nimport { PassName } from './lib';\n/**\n * A pass that clears the input buffer or the screen.\n *\n * You can prevent specific bits from being cleared by setting either the\n * `autoClearColor`, `autoClearStencil` or `autoClearDepth` properties of the renderer\n * to `false`.\n */\nexport class ClearPass extends Pass {\n    /**\n     * Constructs a new clear pass.\n     * @param options - Additional options.\n     */\n    constructor(partialOptions = {}) {\n        super(PassName.Clear);\n        const options = {\n            clearAlpha: 0,\n            clearColor: null,\n            ...partialOptions,\n        };\n        this.needsSwap = false;\n        this.clearColor = options.clearColor;\n        this.clearAlpha = options.clearAlpha;\n    }\n    /**\n     * Clears the input buffer or the screen.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     */\n    render(renderer, inputBuffer) {\n        const clearColor = this.clearColor;\n        let clearAlpha;\n        if (clearColor !== null) {\n            ClearPass.color.copy(renderer.getClearColor());\n            clearAlpha = renderer.getClearAlpha();\n            renderer.setClearColor(clearColor, this.clearAlpha);\n        }\n        renderer.setRenderTarget(this.renderToScreen ? undefined : inputBuffer);\n        renderer.clear();\n        if (clearColor !== null) {\n            renderer.setClearColor(ClearPass.color, clearAlpha);\n        }\n    }\n}\n/** Used for saving the original clear color of the renderer. */\nClearPass.color = new Color();\n","import { ClearPass } from './ClearPass';\nimport { Pass } from './Pass';\nimport { PassName } from './lib';\n/**\n * A pass that renders a given scene directly on screen or into the read buffer\n * for further processing.\n */\nexport class RenderPass extends Pass {\n    /**\n     * Constructs a new render pass.\n     *\n     * @param scene The scene to render.\n     * @param camera The camera to use to render the scene.\n     * @param options Additional options.\n     */\n    constructor(scene, camera, partialOptions = {}) {\n        super(PassName.Render, scene, camera);\n        this.scene = scene;\n        this.camera = camera;\n        this.overrideMaterial = null;\n        const options = {\n            overrideMaterial: null,\n            clearAlpha: 1,\n            clearDepth: false,\n            clear: true,\n            ...partialOptions,\n        };\n        this.needsSwap = false;\n        this.clearPass = new ClearPass(options);\n        this.overrideMaterial = options.overrideMaterial;\n        this.clearDepth = options.clearDepth;\n        this.clear = options.clear;\n    }\n    /**\n     * Renders the scene.\n     *\n     * @param renderer The renderer.\n     * @param inputBuffer A frame buffer that contains the result of the previous pass.\n     */\n    render(renderer, inputBuffer) {\n        const scene = this.scene;\n        const renderTarget = this.renderToScreen ? undefined : inputBuffer;\n        const overrideMaterial = scene.overrideMaterial;\n        if (this.clear) {\n            this.clearPass.renderToScreen = this.renderToScreen;\n            this.clearPass.render(renderer, inputBuffer);\n        }\n        else if (this.clearDepth) {\n            renderer.setRenderTarget(renderTarget);\n            renderer.clearDepth();\n        }\n        scene.overrideMaterial = this.overrideMaterial;\n        renderer.render(scene, this.camera, renderTarget);\n        scene.overrideMaterial = overrideMaterial;\n    }\n}\n","import { PassName } from './lib';\nimport { Pass } from './Pass';\n/**\n * A mask pass.\n *\n * This pass requires that the input and output buffers have a stencil buffer.\n * You can enable the stencil buffer via the {@link EffectComposer} constructor.\n */\nexport class MaskPass extends Pass {\n    /**\n     * Constructs a new mask pass.\n     *\n     * @param scene - The scene to render.\n     * @param camera - The camera to use.\n     */\n    constructor(scene, camera) {\n        super(PassName.Mask, scene, camera);\n        /** Inverse flag */\n        this.inverse = false;\n        /** Stencil buffer clear flag. */\n        this.clearStencil = true;\n        this.needsSwap = false;\n    }\n    /**\n     * Renders the effect.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.\n     */\n    render(renderer, inputBuffer, outputBuffer) {\n        const context = renderer.context;\n        const state = renderer.state;\n        const scene = this.scene;\n        const camera = this.camera;\n        const writeValue = this.inverse ? 0 : 1;\n        const clearValue = 1 - writeValue;\n        // Don't update color or depth.\n        state.buffers.color.setMask(0);\n        state.buffers.depth.setMask(0);\n        // Lock the buffers.\n        state.buffers.color.setLocked(true);\n        state.buffers.depth.setLocked(true);\n        // Configure the stencil.\n        state.buffers.stencil.setTest(true);\n        state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n        state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n        state.buffers.stencil.setClear(clearValue);\n        // Clear the stencil.\n        if (this.clearStencil) {\n            if (this.renderToScreen) {\n                renderer.setRenderTarget();\n                renderer.clearStencil();\n            }\n            else {\n                renderer.setRenderTarget(inputBuffer);\n                renderer.clearStencil();\n                renderer.setRenderTarget(outputBuffer);\n                renderer.clearStencil();\n            }\n        }\n        // Draw the mask.\n        if (this.renderToScreen) {\n            renderer.render(scene, camera);\n        }\n        else {\n            renderer.render(scene, camera, inputBuffer);\n            renderer.render(scene, camera, outputBuffer);\n        }\n        // Unlock the buffers.\n        state.buffers.color.setLocked(false);\n        state.buffers.depth.setLocked(false);\n        // Only render where the stencil is set to 1.\n        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    }\n}\n","import { PassName } from './lib';\nimport { Pass } from './Pass';\n/**\n * A pass that disables the stencil test.\n */\nexport class ClearMaskPass extends Pass {\n    constructor() {\n        super(PassName.ClearMask);\n        this.needsSwap = false;\n    }\n    /**\n     * Disables the global stencil test.\n     */\n    render(renderer) {\n        renderer.state.buffers.stencil.setTest(false);\n    }\n}\n","import { ShaderMaterial, Uniform } from 'three';\nimport fragment from './glsl/copy/shader.frag';\nimport vertex from './glsl/copy/shader.vert';\n/**\n * A simple copy shader material.\n */\nexport class CopyMaterial extends ShaderMaterial {\n    constructor() {\n        super({\n            uniforms: {\n                inputBuffer: new Uniform(null),\n                opacity: new Uniform(1.0),\n            },\n            fragmentShader: fragment,\n            vertexShader: vertex,\n            depthWrite: false,\n            depthTest: false,\n        });\n    }\n}\n","import { DepthStencilFormat, DepthTexture, LinearFilter, RGBAFormat, RGBFormat, UnsignedInt248Type, WebGLRenderTarget, } from 'three';\nimport { ClearMaskPass, MaskPass, RenderPass, ShaderPass } from '../passes';\nimport { CopyMaterial } from '../materials';\n/**\n * The EffectComposer may be used in place of a normal WebGLRenderer.\n *\n * The auto clear behaviour of the provided renderer will be disabled to prevent\n * unnecessary clear operations.\n *\n * It is common practice to use a {@link RenderPass} as the first pass to\n * automatically clear the screen and render the scene to a texture for further\n * processing.\n */\nexport class EffectComposer {\n    /**\n     * Constructs a new effect composer.\n     * @param renderer- The renderer that should be used.\n     * @param options - The options.\n     */\n    constructor(renderer = null, partialOptions = {}) {\n        this.renderer = renderer;\n        /**\n         * The input buffer.\n         *\n         * Reading from and writing to the same render target should be avoided.\n         * Therefore, two seperate yet identical buffers are used.\n         */\n        this.inputBuffer = null;\n        /**\n         * The output buffer.\n         */\n        this.outputBuffer = null;\n        /**\n         * A copy pass used for copying masked scenes.\n         */\n        this.copyPass = new ShaderPass(new CopyMaterial());\n        /**\n         * The passes.\n         */\n        this.passes = [];\n        const options = {\n            depthBuffer: true,\n            stencilBuffer: false,\n            ...partialOptions,\n        };\n        if (this.renderer !== null) {\n            this.renderer.autoClear = false;\n            this.inputBuffer = this.createBuffer(options.depthBuffer, options.stencilBuffer);\n            this.outputBuffer = this.inputBuffer.clone();\n        }\n    }\n    /**\n     * Replaces the current renderer with the given one. The DOM element of the\n     * current renderer will automatically be removed from its parent node and the\n     * DOM element of the new renderer will take its place.\n     *\n     * The auto clear mechanism of the provided renderer will be disabled.\n     *\n     * @param renderer New renderer.\n     * @return The old renderer.\n     */\n    replaceRenderer(renderer) {\n        const oldRenderer = this.renderer;\n        let parent;\n        let oldSize;\n        let newSize;\n        if (oldRenderer !== null && oldRenderer !== renderer) {\n            this.renderer = renderer;\n            this.renderer.autoClear = false;\n            parent = oldRenderer.domElement.parentNode;\n            oldSize = oldRenderer.getSize();\n            newSize = renderer.getSize();\n            if (parent !== null) {\n                parent.removeChild(oldRenderer.domElement);\n                parent.appendChild(renderer.domElement);\n            }\n            if (oldSize.width !== newSize.width || oldSize.height !== newSize.height) {\n                this.setSize();\n            }\n        }\n        return oldRenderer;\n    }\n    /**\n     * Retrieves the most relevant depth texture for the pass at the given index.\n     * @param index - The index of the pass that needs a depth texture.\n     * @return The depth texture, or null if there is none.\n     */\n    getDepthTexture(index) {\n        const passes = this.passes;\n        let depthTexture = null;\n        let inputBuffer = true;\n        let i;\n        let pass;\n        for (i = 0; i < index; ++i) {\n            pass = passes[i];\n            if (pass.needsSwap) {\n                inputBuffer = !inputBuffer;\n            }\n            else if (pass instanceof RenderPass) {\n                depthTexture = (inputBuffer ? this.inputBuffer : this.outputBuffer).depthTexture;\n            }\n        }\n        return depthTexture;\n    }\n    /**\n     * Creates two depth texture attachments, one for the input buffer and one for\n     * the output buffer.\n     *\n     * Depth will be written to the depth texture when something is rendered into\n     * the respective render target and the involved materials have `depthWrite`\n     * enabled. Under normal circumstances, only a {@link RenderPass} will render\n     * depth.\n     *\n     * When a shader reads from a depth texture and writes to a render target that\n     * uses the same depth texture attachment, the depth information will be lost.\n     * This happens even if `depthWrite` is disabled. For that reason, two\n     * separate depth textures are used.\n     */\n    createDepthTexture(width, height) {\n        const depthTexture = new DepthTexture(width, height);\n        if (this.inputBuffer.stencilBuffer) {\n            depthTexture.format = DepthStencilFormat;\n            depthTexture.type = UnsignedInt248Type;\n        }\n        this.inputBuffer.depthTexture = depthTexture;\n        this.outputBuffer.depthTexture = depthTexture.clone();\n    }\n    /**\n     * Creates a new render target by replicating the renderer's canvas.\n     *\n     * The created render target uses a linear filter for texel minification and\n     * magnification. Its render texture format depends on whether the renderer\n     * uses the alpha channel. Mipmaps are disabled.\n     *\n     * @param depthBuffer - Whether the render target should have a depth buffer.\n     * @param stencilBuffer - Whether the render target should have a stencil buffer.\n     * @return A new render target that equals the renderer's canvas.\n     */\n    createBuffer(depthBuffer, stencilBuffer) {\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        const alpha = this.renderer.context.getContextAttributes().alpha;\n        const renderTarget = new WebGLRenderTarget(drawingBufferSize.width, drawingBufferSize.height, {\n            minFilter: LinearFilter,\n            magFilter: LinearFilter,\n            format: alpha ? RGBAFormat : RGBFormat,\n            depthBuffer,\n            stencilBuffer,\n        });\n        renderTarget.texture.name = 'EffectComposer.Buffer';\n        renderTarget.texture.generateMipmaps = false;\n        return renderTarget;\n    }\n    /**\n     * Adds a pass, optionally at a specific index.\n     *\n     * @param pass - A new pass.\n     * @param index - An index at which the pass should be inserted.\n     */\n    addPass(pass, index) {\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        pass.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        pass.initialize(this.renderer, this.renderer.context.getContextAttributes().alpha);\n        if (index !== undefined) {\n            this.passes.splice(index, 0, pass);\n        }\n        else {\n            index = this.passes.push(pass) - 1;\n        }\n        if (pass.needsDepthTexture) {\n            if (this.inputBuffer.depthTexture === null) {\n                this.createDepthTexture(drawingBufferSize.width, drawingBufferSize.height);\n            }\n            pass.setDepthTexture(this.getDepthTexture(index));\n        }\n    }\n    /**\n     * Removes a pass.\n     */\n    removePass(pass) {\n        this.passes.splice(this.passes.indexOf(pass), 1);\n    }\n    /**\n     * Renders all enabled passes in the order in which they were added.\n     * @param delta - The time between the last frame and the current one in seconds.\n     */\n    render(delta) {\n        let inputBuffer = this.inputBuffer;\n        let outputBuffer = this.outputBuffer;\n        let stencilTest = false;\n        let context;\n        let state;\n        let buffer;\n        for (const pass of this.passes) {\n            if (pass.enabled) {\n                pass.render(this.renderer, inputBuffer, outputBuffer, delta, stencilTest);\n                if (pass.needsSwap) {\n                    if (stencilTest) {\n                        this.copyPass.renderToScreen = pass.renderToScreen;\n                        context = this.renderer.context;\n                        state = this.renderer.state;\n                        // Preserve the unaffected pixels.\n                        state.buffers.stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n                        this.copyPass.render(this.renderer, inputBuffer, outputBuffer);\n                        state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n                    }\n                    buffer = inputBuffer;\n                    inputBuffer = outputBuffer;\n                    outputBuffer = buffer;\n                }\n                if (pass instanceof MaskPass) {\n                    stencilTest = true;\n                }\n                else if (pass instanceof ClearMaskPass) {\n                    stencilTest = false;\n                }\n            }\n        }\n    }\n    /**\n     * Sets the size of the buffers and the renderer's output canvas.\n     *\n     * Every pass will be informed of the new size. It's up to each pass how that\n     * information is used.\n     *\n     * If no width or height is specified, the render targets and passes will be\n     * updated with the current size of the renderer.\n     */\n    setSize(width, height) {\n        let size;\n        if (width === undefined || height === undefined) {\n            size = this.renderer.getSize();\n            width = size.width;\n            height = size.height;\n        }\n        // Update the logical render size.\n        this.renderer.setSize(width, height);\n        // The drawing buffer size takes the device pixel ratio into account.\n        const drawingBufferSize = this.renderer.getDrawingBufferSize();\n        this.inputBuffer.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        this.outputBuffer.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        for (const pass of this.passes) {\n            pass.setSize(drawingBufferSize.width, drawingBufferSize.height);\n        }\n    }\n    /**\n     * Resets this composer by deleting all passes and creating new buffers.\n     */\n    reset() {\n        const renderTarget = this.createBuffer(this.inputBuffer.depthBuffer, this.inputBuffer.stencilBuffer);\n        this.dispose();\n        // Reanimate.\n        this.inputBuffer = renderTarget;\n        this.outputBuffer = renderTarget.clone();\n        this.copyPass = new ShaderPass(new CopyMaterial());\n    }\n    /**\n     * Destroys this composer and all passes.\n     *\n     * This method deallocates all disposable objects created by the passes. It\n     * also deletes the main frame buffers of this composer.\n     */\n    dispose() {\n        for (const pass of this.passes)\n            pass.dispose();\n        this.passes = [];\n        if (this.inputBuffer !== null) {\n            this.inputBuffer.dispose();\n            this.inputBuffer = null;\n        }\n        if (this.outputBuffer !== null) {\n            this.outputBuffer.dispose();\n            this.outputBuffer = null;\n        }\n        this.copyPass.dispose();\n    }\n}\n","/**\n * A blend function enumeration.\n */\nexport var BlendFunction;\n(function (BlendFunction) {\n    /** No blending. The effect will not be included in the final shader. */\n    BlendFunction[BlendFunction[\"SKIP\"] = 0] = \"SKIP\";\n    /** Additive blending. Fast, but may produce washed out results. */\n    BlendFunction[BlendFunction[\"ADD\"] = 1] = \"ADD\";\n    /** Alpha blending. Blends based on the alpha value of the new color. Opacity will be ignored. */\n    BlendFunction[BlendFunction[\"ALPHA\"] = 2] = \"ALPHA\";\n    /** Average blending. */\n    BlendFunction[BlendFunction[\"AVERAGE\"] = 3] = \"AVERAGE\";\n    /** Color dodge. */\n    BlendFunction[BlendFunction[\"COLOR_BURN\"] = 4] = \"COLOR_BURN\";\n    /** Color burn. */\n    BlendFunction[BlendFunction[\"COLOR_DODGE\"] = 5] = \"COLOR_DODGE\";\n    /** Prioritize darker colors. */\n    BlendFunction[BlendFunction[\"DARKEN\"] = 6] = \"DARKEN\";\n    /** Color difference. */\n    BlendFunction[BlendFunction[\"DIFFERENCE\"] = 7] = \"DIFFERENCE\";\n    /** Color exclusion. */\n    BlendFunction[BlendFunction[\"EXCLUSION\"] = 8] = \"EXCLUSION\";\n    /** Prioritize lighter colors. */\n    BlendFunction[BlendFunction[\"LIGHTEN\"] = 9] = \"LIGHTEN\";\n    /** Color multiplication. */\n    BlendFunction[BlendFunction[\"MULTIPLY\"] = 10] = \"MULTIPLY\";\n    /** Color division. */\n    BlendFunction[BlendFunction[\"DIVIDE\"] = 11] = \"DIVIDE\";\n    /** Color negation. */\n    BlendFunction[BlendFunction[\"NEGATION\"] = 12] = \"NEGATION\";\n    /** Normal blending. The new color overwrites the old one. */\n    BlendFunction[BlendFunction[\"NORMAL\"] = 13] = \"NORMAL\";\n    /** Color overlay. */\n    BlendFunction[BlendFunction[\"OVERLAY\"] = 14] = \"OVERLAY\";\n    /** Color reflection. */\n    BlendFunction[BlendFunction[\"REFLECT\"] = 15] = \"REFLECT\";\n    /** Screen blending. The two colors are effectively projected on a white screen simultaneously. */\n    BlendFunction[BlendFunction[\"SCREEN\"] = 16] = \"SCREEN\";\n    /** Soft light blending. */\n    BlendFunction[BlendFunction[\"SOFT_LIGHT\"] = 17] = \"SOFT_LIGHT\";\n    /** Color subtraction. */\n    BlendFunction[BlendFunction[\"SUBTRACT\"] = 18] = \"SUBTRACT\";\n})(BlendFunction || (BlendFunction = {}));\n","import { Uniform } from 'three';\nimport { BlendFunction } from './BlendFunction';\nimport addBlendFunction from './glsl/add/shader.frag';\nimport alphaBlendFunction from './glsl/alpha/shader.frag';\nimport averageBlendFunction from './glsl/average/shader.frag';\nimport colorBurnBlendFunction from './glsl/color-burn/shader.frag';\nimport colorDodgeBlendFunction from './glsl/color-dodge/shader.frag';\nimport darkenBlendFunction from './glsl/darken/shader.frag';\nimport differenceBlendFunction from './glsl/difference/shader.frag';\nimport exclusionBlendFunction from './glsl/exclusion/shader.frag';\nimport lightenBlendFunction from './glsl/lighten/shader.frag';\nimport multiplyBlendFunction from './glsl/multiply/shader.frag';\nimport divideBlendFunction from './glsl/divide/shader.frag';\nimport negationBlendFunction from './glsl/negation/shader.frag';\nimport normalBlendFunction from './glsl/normal/shader.frag';\nimport overlayBlendFunction from './glsl/overlay/shader.frag';\nimport reflectBlendFunction from './glsl/reflect/shader.frag';\nimport screenBlendFunction from './glsl/screen/shader.frag';\nimport softLightBlendFunction from './glsl/soft-light/shader.frag';\nimport subtractBlendFunction from './glsl/subtract/shader.frag';\n/** A blend mode. */\nexport class BlendMode {\n    /**\n     * Constructs a new blend mode.\n     *\n     * @param blendFunction - The blend function to use.\n     * @param opacity - The opacity of the color that will be blended with the base color.\n     */\n    constructor(blendFunction, opacity = 1.0) {\n        this.blendFunction = blendFunction;\n        this.opacity = new Uniform(opacity);\n    }\n    /** Returns the blend function shader code, or null for `SKIP` blend function. */\n    getShaderCode() {\n        switch (this.blendFunction) {\n            case BlendFunction.SKIP: return null;\n            case BlendFunction.ADD: return addBlendFunction;\n            case BlendFunction.ALPHA: return alphaBlendFunction;\n            case BlendFunction.AVERAGE: return averageBlendFunction;\n            case BlendFunction.COLOR_BURN: return colorBurnBlendFunction;\n            case BlendFunction.COLOR_DODGE: return colorDodgeBlendFunction;\n            case BlendFunction.DARKEN: return darkenBlendFunction;\n            case BlendFunction.DIFFERENCE: return differenceBlendFunction;\n            case BlendFunction.EXCLUSION: return exclusionBlendFunction;\n            case BlendFunction.LIGHTEN: return lightenBlendFunction;\n            case BlendFunction.MULTIPLY: return multiplyBlendFunction;\n            case BlendFunction.DIVIDE: return divideBlendFunction;\n            case BlendFunction.NEGATION: return negationBlendFunction;\n            case BlendFunction.NORMAL: return normalBlendFunction;\n            case BlendFunction.OVERLAY: return overlayBlendFunction;\n            case BlendFunction.REFLECT: return reflectBlendFunction;\n            case BlendFunction.SCREEN: return screenBlendFunction;\n            case BlendFunction.SOFT_LIGHT: return softLightBlendFunction;\n            case BlendFunction.SUBTRACT: return subtractBlendFunction;\n        }\n    }\n}\n","export var EffectName;\n(function (EffectName) {\n    EffectName[\"Glitch\"] = \"GlitchEffect\";\n})(EffectName || (EffectName = {}));\n/**\n * An enumeration of effect attributes.\n * Attributes can be concatenated using the bitwise OR operator.\n *\n * @example\n * const attributes = EffectAttribute.CONVOLUTION | EffectAttribute.DEPTH;\n */\nexport var EffectAttribute;\n(function (EffectAttribute) {\n    /* No attributes. Most effects don't need to specify any attributes. */\n    EffectAttribute[EffectAttribute[\"NONE\"] = 0] = \"NONE\";\n    /** Describes effects that require a depth texture. */\n    EffectAttribute[EffectAttribute[\"DEPTH\"] = 1] = \"DEPTH\";\n    /**\n     * Describes effects that fetch additional samples from the input buffer.\n     * There cannot be more than one effect with this attribute per {@link EffectPass}.\n     */\n    EffectAttribute[EffectAttribute[\"CONVOLUTION\"] = 2] = \"CONVOLUTION\";\n})(EffectAttribute || (EffectAttribute = {}));\n/** An enumeration of WebGL extensions. */\nexport var WebGLExtension;\n(function (WebGLExtension) {\n    /** Enables derivatives by adding the functions dFdx, dFdy and fwidth. */\n    WebGLExtension[\"DERIVATIVES\"] = \"derivatives\";\n    /** Enables gl_FragDepthEXT to set a depth value of a fragment from within the fragment shader. */\n    WebGLExtension[\"FRAG_DEPTH\"] = \"fragDepth\";\n    /** Enables multiple render targets (MRT) support. */\n    WebGLExtension[\"DRAW_BUFFERS\"] = \"drawBuffers\";\n    /** Enables explicit control of texture LOD. */\n    WebGLExtension[\"SHADER_TEXTURE_LOD\"] = \"shaderTextureLOD\";\n})(WebGLExtension || (WebGLExtension = {}));\n","import { BlendFunction, BlendMode } from './blending';\nimport { EffectAttribute, } from './lib';\n/**\n * An abstract effect.\n * Effects can be combined using the {@link EffectPass}.\n */\nexport class Effect {\n    constructor(name, fragmentShader, partialOptions = {}) {\n        this.name = name;\n        this.fragmentShader = fragmentShader;\n        this.vertexShader = null;\n        const settings = {\n            attributes: EffectAttribute.NONE,\n            blendFunction: BlendFunction.SCREEN,\n            defines: new Map(),\n            uniforms: new Map(),\n            extensions: new Set(),\n            vertexShader: null,\n            ...partialOptions,\n        };\n        this.attributes = settings.attributes;\n        this.vertexShader = settings.vertexShader;\n        this.defines = settings.defines;\n        this.uniforms = settings.uniforms;\n        this.extensions = settings.extensions;\n        this.blendMode = new BlendMode(settings.blendFunction);\n    }\n    /**\n     * Sets the depth texture.\n     *\n     * You may override this method if your effect requires direct access to the\n     * depth texture that is bound to the associated {@link EffectPass}.\n     */\n    setDepthTexture(depthTexture, depthPacking = 0) { }\n    /**\n     * Updates the effect by performing supporting operations.\n     *\n     * This method is called by the {@link EffectPass} right before the main\n     * fullscreen render operation, even if the blend function is set to `SKIP`.\n     *\n     * You may override this method if you need to render additional off-screen\n     * textures or update custom uniforms.\n     *\n     * @param renderer - The renderer.\n     * @param inputBuffer - A frame buffer that contains the result of the previous pass.\n     * @param delta - The time between the last frame and the current one in seconds.\n     */\n    update(renderer, inputBuffer, delta = 0) { }\n    /**\n     * Updates the size of this effect.\n     *\n     * You may override this method in case you want to be informed about the main\n     * render size.\n     *\n     * The {@link EffectPass} calls this method before this effect is initialized\n     * and every time its own size is updated.\n     */\n    setSize(width, height) { }\n    /**\n     * Performs initialization tasks.\n     *\n     * By overriding this method you gain access to the renderer. You'll also be\n     * able to configure your custom render targets to use the appropriate format\n     * (RGB or RGBA).\n     *\n     * The provided renderer can be used to warm up special off-screen render\n     * targets by performing a preliminary render operation.\n     *\n     * The {@link EffectPass} calls this method during its own initialization\n     * which happens after the size has been set.\n     *\n     * @param renderer - The renderer.\n     * @param alpha - Whether the renderer uses the alpha channel or not.\n     * @example if(!alpha) this.myRenderTarget.texture.format = RGBFormat;\n     */\n    initialize(renderer, alpha) { }\n    /**\n     * Performs a shallow search for properties that define a dispose method and\n     * deletes them. The effect will be inoperative after this method was called!\n     *\n     * Disposable objects:\n     *  - render targets\n     *  - materials\n     *  - textures\n     *\n     * The {@link EffectPass} calls this method when it is being destroyed. Do not\n     * call this method directly.\n     */\n    dispose() {\n        for (const key of Object.keys(this)) {\n            if (this[key] !== null && typeof this[key].dispose === 'function') {\n                this[key].dispose();\n                this[key] = null;\n            }\n        }\n    }\n}\n","/**\n * Exposure of the library components.\n *\n * @module postprocessing\n */\nexport * from './core';\nexport * from './effects';\n// export * from './images';\nexport * from './materials';\nexport * from './passes';\n"],"sourceRoot":""}